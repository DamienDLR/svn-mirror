%
% \iffalse
%<*driver>
 \documentclass[cm-default]{l3doc}
 \begin{document}
 \DocInput{l3coffins.dtx}
 \end{document}
%</driver>
% \fi
%
% \GetFileInfo{l3coffins.dtx}
%
% \title{The \textsf{l3coffins} package\thanks{This file
%         has version number \fileversion, last
%         revised \filedate.}}
% \author{Frank Mittelbach\thanks{Based on ideas and code developed by David
%    Carlisle, Frank Mittelbach and Chris Rowley in some distent time in the
%    last millenium --- or as David would say ``in his former life''.}}
% \date{\filedate}
%  \maketitle
% 
% 
%
% \newenvironment{Arglist}{\small\itemize
%        \newcommand\Argitem[1]{\item[\texttt{\###1}]}}{\enditemize}
%
%
% \tableofcontents
%
%
% \section{Introduction}
%
% Note: 
% This is now a mixture of stuff: it needs severe rationalisation when
% we have decided what interfaces it should support (probably several
% levels are needed).  Having done that, drastic renaming will needed.
% 
% A no longer so small extsnsion of David's handles.  I think that
% everything gets expanded as needed, except possibly some of the
% things put through calc.
% 
% Uses box register rather than putting the box on a list and then
% removing it again (avoids, at least, possible unwanted messages).
%
% I think that I have got adjustments working and removed globally global
% stuff so as to add extra robustness against reuse of box registers within
% nested groups....maybe:-).
%
% I now see that we get arbitrary named handles for free: well done!
% This suggests that it may be worth spending some time getting some
% new types of coffins such as boxed/framed paras with handles on the
% top and bottom baselines.
%
% Also, not yet fully done but easy and needed is (new) handles placed
% relative to other (existing) ones.  This is not yet a single command
% but I have now defined a lower-level tool that extracts the necessary
% information from a handles PL.
%
%
% Pre-defined handles:
%\begin{verbatim} 
%              tl--------------tc--------------tr
%               |lt                          rt| 
%               |                              | 
%               |lT___       __Tc__       ___rT| 
%               |                              | 
%               |lc                          rc| 
%               |                              | 
%               |lB___       __Bc__       ___rB| 
%               |                              | 
%               |lb                          rb| 
%              bl--------------bc--------------br
%\end{verbatim}
%  In addition, the two ends of the actual baseline are labelled: lH, rH.
%  
%
% To this default list of `natural handles' could be added
%\begin{verbatim}
% \mathaxisht == \fontdimen...\textfont0}:
%
% lM\z@{(\ht#1-\dp#1)/2-\mathaxisht}%
% rM{\wd#1}{(\ht#1-\dp#1)/2-\mathaxisht}%
%\end{verbatim}
%
% But, eg, the top baseline in a vbox cannot be added to this list and
% it will not be inherited by outer boxes in any sensible way.

% A `natural handle' probably has a better name: it is one that can be defined
% for any box register and depends only on |\ht|, |\wd| and |\dp| (ie it is
% defined entirely by the external attributes of the register and does
% not depend in any other way on the contents of the box.  In a sense
% these are the only ones we can have using standard TeX, but we fake
% some others (see below) which are thus, definitely, `non-natural'.

% \section{Implementation}
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
%    \begin{macrocode}
\RequirePackage{expl3}
\GetIdInfo$Id$
  {coffins module}

\ProvidesExplPackage
  {\filename}{\filedate}{\fileversion}{\filedescription}
%    \end{macrocode}
%
%
% \subsection{Temporary variables used in this module}
%
%
%
%
%  \begin{macro}{\l_coffin_tmp_box}
%    Scratch box register used to repack a vertical coffin to determine its
%    top baseline.
%    \begin{macrocode}
\box_new:N \l_coffin_tmp_box
%    \end{macrocode}
%  \end{macro}
%
%
%
%
%
%  \begin{macro}{\l_coffin_tmpa_dim,
%                \l_coffin_tmpb_dim
%                }
%    Scratch length registers used in calulating offsets etc.
%    \begin{macrocode}
\dim_new:N \l_coffin_tmpa_dim 
\dim_new:N \l_coffin_tmpb_dim 
%    \end{macrocode}
%  \end{macro}
%
%
%
%
%  \begin{macro}{\l_coffin_offset_x_dim,
%                \l_coffin_offset_y_dim
%                }
%    These next two are used to hold the offset between two coffins
%    when doing alignment (measuring the distance between the two reference
%    points of the two boxes).
%    \begin{macrocode}
\dim_new:N \l_coffin_offset_x_dim 
\dim_new:N \l_coffin_offset_y_dim 
%    \end{macrocode}
%  \end{macro}
%
%
%
%
%  \begin{macro}{}
%    A few scratch token list registers used in many places.
%    \begin{macrocode}
\tl_new:N \l_coffin_tmpa_tl 
\tl_new:N \l_coffin_tmpb_tl 
\tl_new:N \l_coffin_tmpc_tl 
%    \end{macrocode}
%  \end{macro}
%
%
%
%
%  \begin{macro}{\l_coffin_handle_tl}
%    Token list variable to exclusively hold a retrieved handle value (for
%    more than just a very short time).
%    \begin{macrocode}
\tl_new:N \l_coffin_handle_tl
%    \end{macrocode}
%  \end{macro}
%
%
%
%
%  \begin{macro}{\_coffin_eval_handle_value:N}
%    A temporary command that is redefined on the fly to resolve handle values
%    that contain |##1| denoting the current coffin, e.g., |\wd ##1|.
%    \begin{macrocode}
\cs_new:Npn \_coffin_eval_handle_value:N #1 {}
%    \end{macrocode}
%  \end{macro}
%
%
%
%
%
%
%
%
% \subsection{The default set of handles}
%
%
%  \begin{macro}{\l_coffin_default_handles_prop}
%    This propery list holds the default set of ``natural'' handles, i.e.,
%    those that can be defined just through information about the box
%    dimensions. The handles that relate to top and bottom baseline in a
%    vertical box only get added when a coffin is filled bia a coffin
%    operation like |\vcoffin_set:Nn|.
%    \begin{macrocode}
\prop_new:N   \l_coffin_default_handles_prop
%    \end{macrocode}
%
%    Handle names follow the following convention: vertical information comes
%    first, followed by horizontal information, e.g., top-left = \texttt{tl}.    
%    \begin{macrocode}
\prop_put:Nnn \l_coffin_default_handles_prop {tl} {{0pt}    {\ht#1}}
\prop_put:Nnn \l_coffin_default_handles_prop {tc} {{.5\wd#1}{\ht#1}}
\prop_put:Nnn \l_coffin_default_handles_prop {tr} {{\wd#1}  {\ht#1}}
%    \end{macrocode}
%    
%    \begin{macrocode}
\prop_put:Nnn \l_coffin_default_handles_prop {cl} {{0pt}    {(\ht#1-\dp#1)/2}}
\prop_put:Nnn \l_coffin_default_handles_prop {cc} {{.5\wd#1}{(\ht#1-\dp#1)/2}}
\prop_put:Nnn \l_coffin_default_handles_prop {cr} {{\wd#1}  {(\ht#1-\dp#1)/2}}
%    \end{macrocode}
%    
%    \begin{macrocode}
\prop_put:Nnn \l_coffin_default_handles_prop {bl} {{0pt}    {-\dp#1}}
\prop_put:Nnn \l_coffin_default_handles_prop {bc} {{.5\wd#1}{-\dp#1}}
\prop_put:Nnn \l_coffin_default_handles_prop {br} {{\wd#1}  {-\dp#1}}
%    \end{macrocode}
%    
%    The vertical position of the coffin reference point (i.e., its baseline)
%    is denoted by the code \texttt{H}. The codes \texttt{B} for bottom
%    baseline and \texttt{T} top baseline are added for vertical
%    coffins. Alternativel, we could make them both equal for horizontal coffins.
%    \begin{macrocode}
\prop_put:Nnn \l_coffin_default_handles_prop {Hl} {{0pt}    {0pt}}
\prop_put:Nnn \l_coffin_default_handles_prop {Hc} {{.5\wd#1}{0pt}}
\prop_put:Nnn \l_coffin_default_handles_prop {Hr} {{\wd#1}  {0pt}}
%    \end{macrocode}
%  \end{macro}
%
%
%
%
%
%
%
%
% \subsection{Making coffins}
%
%
%  \begin{macro}{\coffin_new:N}
%    Declare a new coffin (which is a box and a property list holding
%    information about the handles. Initially we use the natural default
%    handles stored in |\l_coffin_default_handles_prop|.
%    \begin{macrocode}
\cs_new:Npn \coffin_new:N #1 {
   \box_new:N #1
   \prop_new:c {l_coffin_ \tex_number:D #1 _prop}
   \coffin_set_handles_to_default:N #1
}
%    \end{macrocode}
%  \end{macro}
%
%
%
%
%
%  \begin{macro}{\coffin_add_struture_if_needed:N}
%
%    Check if box has already coffin support data structure and if not add
%    it. Thus, this command turns an ordinary box into a coffin.
%
%    \begin{macrocode}
\cs_new:Npn \coffin_add_struture_if_needed:N #1   { 
%    \end{macrocode}
%    A box is a coffin if it has the property list for handles defined. If not we
%    define it assing it the default handles.
%    \begin{macrocode}
  \cs_if_free:cT {l_coffin_ \tex_number:D #1 _prop}
    {
     \prop_new:c {l_coffin_ \tex_number:D #1 _prop}
%    \end{macrocode}
%    The next line adds the default handles locally. Perhaps that isn't a good
%    idea and we should do it globally here.\footnote{Issue?}
%    \begin{macrocode}
     \coffin_set_handles_to_default:N #1
    }
}
%    \end{macrocode}
%  \end{macro}
%
%
%
%
%
%  \begin{macro}{\coffin_add_or_reset_default_handles:N}
%
%    This command sets all handles of a box to the default handles. It should
%    be used whenever coffin (or box) is about to receive new content. After
%    all, handles from a previous coffin life should vanish at that point.
%
%    Works on boxes without being already coffins.
%    \begin{macrocode}
\cs_new:Npn \coffin_add_or_reset_default_handles:N #1   { 
%    \end{macrocode}
%    A box is a coffin if it has the property list for handles defined. If not we
%    define it assing it the default handles.
%    \begin{macrocode}
  \cs_if_free:cTF {l_coffin_ \tex_number:D #1 _prop}
    {
     \prop_new:c {l_coffin_ \tex_number:D #1 _prop}
%    \end{macrocode}
%    The next line adds the default handles locally. Perhaps that isn't a good
%    idea and we should do it globally here.\footnote{Issue? If okay, this
%    code could be streamlined.}
%    \begin{macrocode}
     \coffin_set_handles_to_default:N #1
    }
    {\coffin_set_handles_to_default:N #1 }
}
%    \end{macrocode}
%  \end{macro}
%
%
%
%
%
%
%
% \subsection{Getting and setting handles}
%
% \subsubsection{Setting and displaying all handles}
%
%
%  \begin{macro}{\coffin_set_eq_handles:NN}
%    Set all handles of one coffin to the be the handles of another coffin.
%    \begin{macrocode}
\cs_new:Npn \coffin_set_eq_handles:NN #1#2 {
    \prop_set_eq:cc {l_coffin_ \tex_number:D #1 _prop}
                    {l_coffin_ \tex_number:D #2 _prop}
}
%    \end{macrocode}
%  \end{macro}
%
%
%  \begin{macro}{\coffin_set_handles_to_default:N}
%    Set all handles of one coffin to the default set of handles stored in
%    property list |\l_coffin_default_handles_prop|.
%    \begin{macrocode}
\cs_new:Npn \coffin_set_handles_to_default:N #1 {
    \prop_set_eq:cN {l_coffin_ \tex_number:D #1 _prop}
                    \l_coffin_default_handles_prop
}
%    \end{macrocode}
%  \end{macro}
%
%
%  \begin{macro}{\coffin_show_handles:N}
%    Some simple tracing: show all handles defined for some coffin or box.
%    \begin{macrocode}
\cs_new:Npn \coffin_show_handles:N #1 {
  \typeout{Handles~ of~ coffin~ \string #1 (\tex_number:D #1):}
  \cs_if_free:cTF {l_coffin_ \tex_number:D #1 _prop}
     { \typeout{---no~ handles---} }
     { \prop_display:c {l_coffin_ \tex_number:D #1 _prop} }
}
%    \end{macrocode}
%  \end{macro}
%
%
%
%    
%  \begin{macro}{\coffin_print_handle_values:Nn}
%    Some simple attempt at pretty printing \ldots{} to be improved.
%    First argument is the box for which the handles should be printed and
%    second argument is a delimiter to be used after each handle, for example
%    |\\|.
%    \begin{macrocode}
\cs_new:Npn \coffin_print_handle_values:Nn #1#2 {
   \prop_map_inline:cn {l_coffin_ \tex_number:D #1 _prop}
      {
        \_coffin_print_handle_values:Nnnnn #1 {##1} ##2 {#2}
      }
}
%    \end{macrocode}
%    
%    \begin{macrocode}
\cs_new:Npn \_coffin_print_handle_values:Nnnnn #1#2#3#4 #5 {
    \cs_set:Npn \_coffin_eval_handle_value:N ##1 {#3}
    \dim_set:Nn \l_coffin_tmpa_dim {\_coffin_eval_handle_value:N #1}
    \cs_set:Npn \_coffin_eval_handle_value:N ##1 {#4}
    \dim_set:Nn \l_coffin_tmpb_dim {\_coffin_eval_handle_value:N #1}
%    \end{macrocode}
%    
%    \begin{macrocode}
    key(\token_to_str:N #2)=(\dim_use:N \l_coffin_tmpa_dim;~
                             \dim_use:N \l_coffin_tmpb_dim )
    #5
}
%    \end{macrocode}
%  \end{macro}
%
%
%
%
%
%
%
% \subsubsection{Setting a single handle}
%
%  \begin{macro}{\coffin_set_handle_coordinates:Nnn,
%                \coffin_set_handle_coordinates:NnV,
%                \coffin_set_handle_coordinates:NVV}
%   
%    This command sets the values for one handle.
% 
%    For speed reasons this command doesn't check if this is really a coffin,
%    i.e., has the handle property list being set up. For a slower but safe
%    version in user-level commands use |\coffin_set_handle_safe:Nnnn|.
%    
%    Arguments:
%    \begin{Arglist}
%    \Argitem{1} reference to coffin
%    \Argitem{2} handle name
%    \Argitem{3} handle coordinates (brace pair)
%    \end{Arglist}
%
%    \begin{macrocode}
\cs_new:Npn \coffin_set_handle_coordinates:Nnn #1 {
    \prop_put:cnn {l_coffin_ \tex_number:D #1 _prop}
}
%    \end{macrocode}
%    
%    \begin{macrocode}
\cs_generate_variant:Nn \coffin_set_handle_coordinates:Nnn { NnV, NVV }
%    \end{macrocode}
%  \end{macro}
%
%

%  \begin{macro}{\coffin_set_handle_safe:Nnnn}
%    This command provides a safe way to add or update a handle of some
%    coffin. In the handle values the commands |\width|, |\height|, and
%    |\depth| can be used to refer to the coffin dimensions
%    
%    Arguments:
%    \begin{Arglist}
%    \Argitem{1} reference to coffin
%    \Argitem{2} handle name
%    \Argitem{3} x-value of handle (can contain |##1| to refer to the coffin
%    dimensions, e.g., |.2\wd ##1| half the width of the coffin.
%    \Argitem{4} y-value of handle 
%    \end{Arglist}
%
%    \begin{macrocode}
\cs_new:Npn  \coffin_set_handle_safe:Nnnn #1#2#3#4 {
%    \end{macrocode}
%    If the command is used on a box without handle property, add it first.
%    \begin{macrocode}
  \coffin_add_struture_if_needed:N #1 
%    \end{macrocode}
%    Provide definitions for |\width| etc.\ for use in  the
%    coordinates.
%
%    Potential issue: this currently adds the box register, e.g., |\wd \aaa|
%    and not something like a more generic |\wd ##1|. So at least something
%    like copying coffins wouldn't quite work. So it might be better to use
%    |##1| instead.\footnote{Issue?}
%    \begin{macrocode}
  \cs_set:Npn\width{\wd#1}
  \cs_set:Npn\height{\ht#1}
  \cs_set:Npn\depth{\dp#1}
%    \end{macrocode}
%    
%    Potential issue: as we have no control over the data passed to us as
%    coordinates using full expansion isn't really the best
%    solution.\footnote{Issue? Needs probably changing!}
%    \begin{macrocode}
  \tl_set:Nx \l_coffin_handle_tl { {#3}{#4} } % dangerous "x"
%    \end{macrocode}
%    
%    \begin{macrocode}
%<*trace>
\typeout{set:~ \string#1(#2)=\l_coffin_handle_tl\space to~ #3/#4}
%</trace>
%    \end{macrocode}
%    Update or add the handle:
%    \begin{macrocode}
  \coffin_set_handle_coordinates:NnV #1 {#2} \l_coffin_handle_tl
%    \end{macrocode}
%    This preserves some kind of invariant:
%    \begin{macrocode}
  \cs_undefine:N \width
  \cs_undefine:N \height
  \cs_undefine:N \depth
}

%    \end{macrocode}
%  \end{macro}
%
%
%
%
%
%  \begin{macro}{\coffin_adjust_handle_safe:Nnnn}
%    
%    This command provides a safe way to update a handle of some coffin
%    relative to its current poision. In the handle values the commands
%    |\width|, |\height|, and |\depth| can be used to refer to the coffin
%    dimensions.
%
%    If the handle doesn't exist an error is signalled and the box reference
%    point will be used.
%    
%    Arguments:
%    \begin{Arglist}
%    \Argitem{1} reference to coffin
%    \Argitem{2} handle name
%    \Argitem{3} x-shift of handle (can contain |##1| to refer to the coffin
%    dimensions, e.g., |.2\wd ##1| half the width of the coffin.
%    \Argitem{4} y-shift of handle 
%    \end{Arglist}
%
%    \begin{macrocode}
\cs_new:Npn \coffin_adjust_handle_safe:Nnnn #1#2#3#4  {
%    \end{macrocode}
%    If the command is used on a box without handle property, add it first.
%    \begin{macrocode}
  \coffin_add_struture_if_needed:N #1
%    \end{macrocode}
%    
%    \begin{macrocode}
  \cs_set:Npn\width{\wd#1}
  \cs_set:Npn\height{\ht#1}
  \cs_set:Npn\depth{\dp#1}
%    \end{macrocode}
%    Retrieve the handle and if non-existant signal an error. We do this on
%    foot here instead of using |\coffin_get_handle_coordinates:NnN| as we are
%    in the ``raw'' handle value.
%    \begin{macrocode}
  \prop_get:cnN {l_coffin_ \tex_number:D #1 _prop} {#2} \l_coffin_handle_tl
  \quark_if_no_value:NT \l_coffin_handle_tl
     {
      \ERROR_handle_not_set
      \tl_set:Nn \l_coffin_handle_tl { {0pt}{0pt} }
     }
%    \end{macrocode}
%    
%    \begin{macrocode}
%<*trace>
  \typeout{adjust:~ \string#1(#2)~=~\l_coffin_handle_tl
           \space\space with~ \space (#3,#4) }
%</trace>
%    \end{macrocode}
%    Adjust the handle value (note that |\l_coffin_handle_tl| is implicitly set by the
%    command |\_coffin_adjust_handle_values:nnnn|)\ldots
%    \begin{macrocode}
  \exp_after:wN \_coffin_adjust_handle_values:nnnn \l_coffin_handle_tl {#3} {#4}
%    \end{macrocode}
%    \ldots and then put it back:
%    \begin{macrocode}
  \coffin_set_handle_coordinates:NnV #1 {#2} \l_coffin_handle_tl
%    \end{macrocode}
%    
%    \begin{macrocode}
%<*trace>
  \typeout{\@spaces\@spaces\@spaces \space\space\space\space 
           =>~ \l_coffin_handle_tl } 
%</trace>
%    \end{macrocode}
%    This preserves some kind of invariant:
%    \begin{macrocode}
  \cs_undefine:N \width
  \cs_undefine:N \height
  \cs_undefine:N \depth
}
%    \end{macrocode}
%  \end{macro}
%
%
%
%
%  \begin{macro}{\_coffin_adjust_handle_values:nnnn}
%    This helper command is used to update the handle values.
%    \begin{macrocode}
\cs_new:Npn \_coffin_adjust_handle_values:nnnn #1 #2 #3 #4 {
   \tl_set:Nn \l_coffin_handle_tl { {#1+(#3)}{#2+(#4)} }
}
%    \end{macrocode}
%  \end{macro}
%
%
%
%
% \subsubsection{Retrieving a handle value}
%
%  \begin{macro}{\coffin_get_handle_coordinates:NnN}
%    This command retrieves a handle value and stores it in a token list
%    variable given as third argument. If the handle doesn't exist an error is
%    signaled and the normal reference point (\verb={0pt}{0pt}=) is returned.
%
%    The command can be used with boxes not having handles set up. In this
%    case the default handles are made available first.
%
%    Arguments:
%    \begin{Arglist}
%    \Argitem{1} reference to coffin
%    \Argitem{2} handle name
%    \Argitem{3} token list variable to receive value
%    \end{Arglist}
%
%    \begin{macrocode}
\cs_new:Npn \coffin_get_handle_coordinates:NnN #1#2#3 {
%    \end{macrocode}
%    First we ensure that the handle data structure is set up.
%    \begin{macrocode}
  \coffin_add_struture_if_needed:N #1
%    \end{macrocode}
%    Then we trieve the handle value.
%    \begin{macrocode}
  \prop_get:cnN {l_coffin_ \tex_number:D #1 _prop} {#2} #3
%    \end{macrocode}
%    In case the handle name is unknown we will get a |\q_no_value| returned,
%    so we better distinguish this case.
%    \begin{macrocode}
  \quark_if_no_value:NTF #3
%    \end{macrocode}
%    If the handle was unknown we signal an error and use the box reference
%    point as a return value.
%    \begin{macrocode}
     {
      \ERROR_handle_not_set
      \tl_set:Nn #3 { {0pt}{0pt} }
     }
%    \end{macrocode}
%    Otherwise the value is now stored in |#3|, but it may
%    contain a formula with dependencies to the coffin dimension (using |##1|
%    to refer to the coffin), so we need
%    to resolve those first. To do this we define the helper command
%    |\_coffin_eval_handle_value:N| with one argument and the handle value as
%    replacement text.\footnote{There must be a nicer way to set this up, right?}
%    \begin{macrocode}
     {
      \exp_after:wN
	 \cs_set:Npn
      \exp_after:wN 
	  \_coffin_eval_handle_value:N
      \exp_after:wN 
	  ##
      \exp_after:wN
	   1
      \exp_after:wN
	  { #3 }
%    \end{macrocode}
%    Now we reset the value to make any box dimension dependencies explicit
%    (i.e., replace |##1| with a reference to the coffin name in |#1|).
%    \begin{macrocode}
      \tl_set:No #3 { \_coffin_eval_handle_value:N #1 }
     }
%    \end{macrocode}
%    
%    \begin{macrocode}
%<*trace>
  \typeout {\string#1(#2) = #3}
%</trace>
}
%    \end{macrocode}
%  \end{macro}



%
%
% \subsection{Setting the content of a coffin}
%
%

%  \begin{macro}{\hcoffin_set:Nn}
%    
%    \begin{macrocode}
\cs_set:Npn \hcoffin_set:Nn #1 {
%    \end{macrocode}
%    Safeguard against using an ordinary box and reset the handles if the box
%    was previously used as a coffin:
%    \begin{macrocode}
   \coffin_add_or_reset_default_handles:N #1
%    \end{macrocode}
%    For now we simply call \LaTeX{}'s |\sbox| under a private name. This way
%    we can make |\sbox| point to |\hcoffin_set:Nn| if we wish to later.
%    \begin{macrocode}
   \_latex_sbox:Nn #1
}
%    \end{macrocode}
%  \end{macro}


%  \begin{macro}{\_latex_sbox:Nn}
%    Save away the original \LaTeX{} definition.
%    \begin{macrocode}
\cs_new_eq:NN \_latex_sbox:Nn \sbox
%    \end{macrocode}
%  \end{macro}
%
%
%
%  \begin{macro}{\vcoffin_set:Nnn}
%    
%    \begin{macrocode}
\cs_new:Npn\vcoffin_set:Nnn #1#2#3 {
%    \end{macrocode}
%    Safeguard against using an ordinary box and reset the handles if the box
%    was previously used as a coffin:
%    \begin{macrocode}
   \coffin_add_or_reset_default_handles:N #1
%    \end{macrocode}
%    Set the content as a vertical box.\footnote{This will probably need
%    updating to properly support color etc etc.}
%    \begin{macrocode}
   \vbox_set:Nn #1 {\dim_set:Nn \hsize {#2}
                     #3
%                    \endgraf \showthe\prevgraf
                   }
%    \end{macrocode}
%    To calculate the top baseline we need to reset the box and measure its
%    new height:
%    \begin{macrocode}
   \vbox_set_top:Nn \l_coffin_tmp_box {\vbox_unpack:N #1}
   \dim_set:Nn \l_coffin_tmpa_dim {\ht #1 - \ht \l_coffin_tmp_box } 
%    \end{macrocode}
%    We then use the new value to set up the \texttt{T} codes.
%    \begin{macrocode}
   \tl_set:Nx \l_coffin_tmpa_tl { {0pt}         {\dim_use:N \l_coffin_tmpa_dim} }
   \tl_set:Nx \l_coffin_tmpb_tl { {\wd ####1}   {\dim_use:N \l_coffin_tmpa_dim} }
   \tl_set:Nx \l_coffin_tmpc_tl { {.5\wd ####1} {\dim_use:N \l_coffin_tmpa_dim} }
%    \end{macrocode}
%    
%    \begin{macrocode}
   \coffin_set_handle_coordinates:NnV #1 {Tl} \l_coffin_tmpa_tl
   \coffin_set_handle_coordinates:NnV #1 {Tc} \l_coffin_tmpc_tl
   \coffin_set_handle_coordinates:NnV #1 {Tr} \l_coffin_tmpb_tl
%    \end{macrocode}
%    The \texttt{B} codes are simpler since it is the same as \texttt{H}.
%    \begin{macrocode}
   \coffin_set_handle_coordinates:Nnn #1 {Bl} {{0pt}      {0pt}}
   \coffin_set_handle_coordinates:Nnn #1 {Bc} {{.5\wd ##1}{0pt}}
   \coffin_set_handle_coordinates:Nnn #1 {Br} {{\wd ##1}  {0pt}}
}
%    \end{macrocode}
%  \end{macro}
%
%
%
%
%  \begin{macro}{\coffin_set_eq:NN}
%    Copy the content of one coffin to the next. Both arguments are assumed to
%    be coffins, i.e., there is no checking.
%    \begin{macrocode}
\cs_new:Npn \coffin_set_eq:NN #1#2 {
    \box_set_eq:NN #1 #2
    \coffin_set_eq_handles:NN #1 #2
}
%    \end{macrocode}
%  \end{macro}
%
%
%
%  \begin{macro}{\coffin_set_eq_clear:NN}
%    Move the content of one coffin to the next. Afterwards the box will be
%    void and the property list of handles are reset to the default list.
%    Both arguments are assumed to
%    be coffins, i.e., there is no checking.
%    \begin{macrocode}
\cs_new:Npn \coffin_set_eq_clear:NN #1#2 {
    \box_set_eq_clear:NN #1 #2
    \coffin_set_eq_handles:NN #1 #2
    \coffin_set_handles_to_default:N #2
}
%    \end{macrocode}
%  \end{macro}
%
%
%
%
%
%
%
% \subsection{Aligning coffins}
%
%
%
%  \begin{macro}{\l_coffin_aligned_coffin}
%    This is a scratch coffin we use later to store intermediate results when
%    aligning coffins.
%    \begin{macrocode}
\coffin_new:N \l_coffin_aligned_coffin
%    \end{macrocode}
%  \end{macro}
%
%
%
%
%  \begin{macro}{\coffin_align_boxes:nnnnNNnnN}
%
%    This helper command aligns two boxes (need not be coffins) given specific
%    specific alignment points (as offset from the normal reference point of
%    the box) and some x/y offset to use between the alignment points.
%
%    The bounding box of the whole construction is \ldots{} whatever it is
%    (height and depth are Ok, but all horizontal stuff is somewhat
%    arbitrary), thus this box register is not, typically, very useful without
%    further work on the horizontal positioning and size.  There are various
%    possibilities for these refinements, these are explored in the top-level
%    commands defined later on.
%
%    Arguments:
%    \begin{Arglist}
%    \Argitem{1} x-offset box-A (can be a formula coming from a coffin
%                handle specification)
%    \Argitem{2} y-offset box-A (can be a formula)
%    \Argitem{3} x-offset box-B (can be a formula)
%    \Argitem{4} y-offset box-B (can be a formula)
%    \Argitem{5} box register reference for box-A (single token)
%    \Argitem{6} box register reference for box-B (single token)
%    \Argitem{7} x-offset between alignment points (can be a formula)
%    \Argitem{8} y-offset between alignment points (can be a formula)
%    \Argitem{9} box register reference for result box (single token)
%    \end{Arglist}
%    The result is stored in a new box (\#9) which is turned into a coffin and
%    add the original handles from box-A (with their formulas) available as
%    \texttt{\meta{handle}}. Other handles, referring to box-A and box-Bas
%    absolute coordinates (via \texttt{\meta{box-A}-\meta{handle}}) need to
%    wait until we know how the bounding box has been calculated.
%
%    \begin{macrocode}
\cs_new:Npn \coffin_align_boxes:nnnnNNnnN #1#2 #3#4 #5#6 #7#8 #9 {
%    \end{macrocode}
%    First calulate the final offset between the two box reference pointsused
%    by \TeX:
%    \begin{macrocode}
  \dim_set:Nn \l_coffin_offset_x_dim{(#1)+(#7)-(#3)}
  \dim_set:Nn \l_coffin_offset_y_dim{(#2)+(#8)-(#4)}
%    \end{macrocode}
%    Then put the aligned boes into the result box by\ldots
%    \begin{macrocode}
    \hbox_set:Nn #9 {
%    \end{macrocode}
%    \ldots first setting box-A and doing a backup by its width which brings
%    us back to the reference point of box-A.
%    \begin{macrocode}
      \box_use:N #5
      \tex_kern:D -\wd #5 
%    \end{macrocode}
%    Then move horizontally by the calulated x-offset and place box-B with its
%    reference point raised by the calulated y-offset. (The two horizontal
%    |\tex_kern:D| movements could be combined to save a bit space, but we
%    need the |\l_coffin_offset_x_dim| later again so we don't bother.
%    \begin{macrocode}
      \tex_kern:D \l_coffin_offset_x_dim
      \box_move_up:nn \l_coffin_offset_y_dim {\box_use:N #6 }
    }
%    \end{macrocode}
%    Final step is to turn the result box into a coffin with the right kind of
%    handles attached.
%
%    First we check if the coffin data structure is already present:
%    \begin{macrocode}
   \coffin_add_struture_if_needed:N #9
%    \end{macrocode}
%    Then we copy a default set of handles to get a clean state. For this we
%    use the handles from box-A. Note that the final box may have new
%    dimensions and thus handles may change places (being typically relative
%    to the box dimensions. This is arguably wrong and one may have to move
%    this code until after the dimensions have been determined (with or
%    without clipping).\footnote{Issue?}
%    However, we normally want to preserve handles for \texttt{T} and we can
%    do this only by ``calculating/copying'' them from the box handles involved.
%    \begin{macrocode}
   \coffin_set_eq_handles:NN #9 #5
%    \end{macrocode}
%    What we can't yet do at this point is adding explicit handles that refer
%    back to the individual handles from box-A and box-B via
%    \texttt{\meta{box-B}-\meta{handle}}. This isn't possible, as we don't
%    know yet where the final reference point of the result box will lie as
%    this depends on they way we do clipping later on. So we have have to wait
%    with this using the values of |\l_coffin_offset_x_dim| and
%    |\l_coffin_offset_y_dim| that we have calculated above.
%    \begin{macrocode}
}
%    \end{macrocode}
%  \end{macro}
%
%
%
%
%
%  \begin{macro}{\coffin_save_handle_values_with_offset:NnnN}
%
%    This command takes the handles from box-A, calculates their numerical
%    value, offsets them by some x/y-offset and then writes a new handle with
%    the name \texttt{\meta{box-A}-\meta{handle}} and stores it as a handle
%    for box-B.
%
%    Arguments:
%    \begin{Arglist}
%    \Argitem{1} box-A reference used as source to build new handle list
%    \Argitem{2} x-offset
%    \Argitem{3} y-offset
%    \Argitem{4} box-B reference receiving updated handles
%    \end{Arglist}
%
%    \begin{macrocode}
\cs_new:Npn \coffin_save_handle_values_with_offset:NnnN #1 #2#3 #4 {
%    \end{macrocode}
%    We map some inline code over the handle property list of box-A to
%    retrieve the handles and calculate the new ones.
%    \begin{macrocode}
   \prop_map_inline:cn {l_coffin_ \tex_number:D #1 _prop}
      {
%    \end{macrocode}
%    The actual work is done by a helper command which receives all necessary
%    values as separate arguments. Note that |##2| will contain a braced pair
%    of handle values so that they become separate arguments to the helper
%    function.
%    \begin{macrocode}
        \coffin_save_handle_values_with_offset:NnnnnnN #1 {##1} ##2 {#2}{#3} #4 
      }
%    \end{macrocode}
%    Some debugging code to verify the results:
%    \begin{macrocode}
%<*debug>
    \coffin_show_handles:N #4
%</debug>
}
%    \end{macrocode}
%  \end{macro}
%
%
%
%
%
%  \begin{macro}{\coffin_save_handle_values_with_offset:NnnnnnN}
%    
%    This command takes explicit values for a single handle from box-A,
%    calculates the numerical 
%    values, offsets them by the x/y-offset and then writes a new handle with
%    the name \texttt{\meta{box-A}-\meta{handle}} stored  as a handle
%    for box-B.
%    
%    Arguments:
%    \begin{Arglist}
%    \Argitem{1} box-A reference used as source to build new handle list
%    \Argitem{2} handle name
%    \Argitem{3} handle x-value
%    \Argitem{4} handle y-value
%    \Argitem{5} x-offset
%    \Argitem{6} y-offset
%    \Argitem{7} box-B reference receiving updated handle
%    \end{Arglist}
%
%    \begin{macrocode}
\cs_new:Npn \coffin_save_handle_values_with_offset:NnnnnnN #1#2#3#4 #5#6 #7 {
%    \end{macrocode}
%    The x-value of the handle might involve a formula (such as |\wd ##1|), so
%    to calculate the numerical value we have to resolve this. This is done by
%    defining a scratch command with one argument (receiving the box-A) and
%    the handle ``formula'' as replacement text---if that replacement text is
%    already numerical, no harm will be done.
%    \begin{macrocode}
    \cs_set:Npn \_coffin_eval_handle_value:N ##1 {#3}
%    \end{macrocode}
%    We then calculate the new absolute x-position for the handle as follows:
%    \begin{macrocode}
    \dim_set:Nn \l_coffin_tmpa_dim {\_coffin_eval_handle_value:N #1 + #5}
%    \end{macrocode}
%    Same game for the new y-position.
%    \begin{macrocode}
    \cs_set:Npn \_coffin_eval_handle_value:N ##1 {#4}
    \dim_set:Nn \l_coffin_tmpb_dim {\_coffin_eval_handle_value:N #1 + #6}
%    \end{macrocode}
%    To build the new handle name we have to distinuish two cases: a) this is
%    a native handle of box-A, either one of the default handles or one
%    explicitly build by the user and b) it is a derived handle which was
%    added to box-A as the result of aligning two coffins earlier.
%
%    In the latter case the name will be of the form
%    \texttt{\meta{somebox}-\meta{handle}} and in this cases we simply leave it
%    alone, otherwise we build the name as
%    \texttt{\meta{box-A}-\meta{handle}}. 
%
%    Consequence of this is that user defined handle names better not contain
%    a ``\texttt{-}'' and that one can't align the same coffin several times
%    to some other coffin without loosing the handles (as the second alignment
%    will overwrite the handles from the first). However, this approach makes
%    handles from inner coffins in alignment operations available later on
%    without any dependency on the order the alignment happened. If we would
%    unconditionally prepend \texttt{\meta{box-A}-} all handles would be
%    uniquely identifiable, but their name would depend on the order the
%    alignment happend which would be a very bad idea.
%    \begin{macrocode}
    \tl_if_in:nnTF {#2} {-} 
          { \tl_set:Nx \l_coffin_tmpa_tl { #2 }     }
          { \tl_set:Nx \l_coffin_tmpa_tl { #1-#2 }  }
%    \end{macrocode}
%    Prepare to store the handle values:
%    \begin{macrocode}
    \tl_set:Nx \l_coffin_tmpb_tl { {\dim_use:N \l_coffin_tmpa_dim}
                                   {\dim_use:N \l_coffin_tmpb_dim} }
%    \end{macrocode}
%    Now we are ready to put the new handle into box-B's property list.
%    \begin{macrocode}
    \coffin_set_handle_coordinates:NVV #7
                  \l_coffin_tmpa_tl \l_coffin_tmpb_tl
}
%    \end{macrocode}
%  \end{macro}




%  \begin{macro}{\coffin_align_two_coffins:NnnnNnN}
%    
%    This helper command alligns two coffins at their handle with a specific
%    offset between them and saves the result in a third coffin.
%    
%    Just like |\coffin_align_boxes:nnnnNNnnN| on which this is based the
%    bounding box is unusable without further correction.
%
%    Arguments:
%    \begin{Arglist}
%    \Argitem{1} box register reference for box-A (single token)
%    \Argitem{2} handle of box-A to align with
%    \Argitem{3} x-offset between handles
%    \Argitem{4} y-offset between handles
%    \Argitem{5} box register reference for box-B (single token)
%    \Argitem{6} handle of box-B to align with
%    \Argitem{7} box register reference for result box (single token)
%    \end{Arglist}
%
%    \begin{macrocode}
\cs_new:Npn \coffin_align_two_coffins:NnnnNnN #1#2#3#4#5#6#7 {
%    \end{macrocode}
%    First we retrieve the handle coordinates from the two handles.
%    \begin{macrocode}
  \coffin_get_handle_coordinates:NnN #1{#2}\l_coffin_tmpa_tl
  \coffin_get_handle_coordinates:NnN #5{#6}\l_coffin_tmpb_tl
%    \end{macrocode}
%    The next operation results in |\l_coffin_tmpa_tl| holding four brace
%    groups with the coordinates of both handles.
%    \begin{macrocode}
  \tl_set:Nx \l_coffin_tmpa_tl { \l_coffin_tmpa_tl \l_coffin_tmpb_tl }
%    \end{macrocode}
%    By expanding |\l_coffin_tmpa_tl| prior to calling
%    |\coffin_align_boxes:nnnnNNnnN| this command will then see all handle
%    coordinates as its first four arguments:
%    \begin{macrocode}
  \exp_after:wN \coffin_align_boxes:nnnnNNnnN \l_coffin_tmpa_tl 
                                              #1 #5 {#3} {#4} #7
}
%    \end{macrocode}
%  \end{macro}




%  \begin{macro}{\coffin_align_clip_save:NnNnnnN}
%    
%    This commmand aligns two coffins at their handles with a certain offset
%    inbetween. The result is stored in a third coffin (with handles
%    from both coffins added as \texttt{\meta{box}-\meta{handle}}). Note that
%    the arguments are ordered differently compared to the internal helper
%    commands for coffin alignment
%
%    The resulting bounding box is clipped to the dimensions of the first
%    coffin (box-A), that is the second coffin may overlap surrounding text.
%
%    Arguments:
%    \begin{Arglist}
%    \Argitem{1} box register reference for box-A (single token)
%    \Argitem{2} handle of box-A to align with
%    \Argitem{3} box register reference for box-B (single token)
%    \Argitem{4} handle of box-B to align with
%    \Argitem{5} x-offset between handles
%    \Argitem{6} y-offset between handles
%    \Argitem{7} target box register for saving
%    \end{Arglist}
%
%    \begin{macrocode}
\cs_new:Npn\coffin_align_clip_save:NnNnnnN #1#2#3#4#5#6#7{%
%    \end{macrocode}
%    First we call the helper command to align the coffins (note the argument
%    order change).
%    \begin{macrocode}
  \coffin_align_two_coffins:NnnnNnN #1{#2} {#5}{#6} #3{#4} #7
%    \end{macrocode}
%    Then we correct the bounding box data, restricting it to the values from
%    box-A.\footnote{Issue: l3box doesn't have commands for setting box
%    dimensions, so for now we go low-level}.
%    \begin{macrocode}
  \box_ht:N #7 \box_ht:N #1
  \box_wd:N #7 \box_wd:N #1
  \box_dp:N #7 \box_dp:N #1
%    \end{macrocode}
%    Finally we also make the handles from the original coffins available: they
%    can be accessed using ``\meta{box-reference}-\meta{handle}'', for
%    example, |\aaa-Tl| if |\aaa| is the reference for one of the
%    coffins.
%
%    For this we have to shift the handle values by the offset used in the
%    alignment (stored by |\coffin_align_two_coffins:NnnnNnN| in the two dimen
%    variables). We also change any formula used into real values, so that we
%    can free up the coffin content afterwards.
%    \begin{macrocode}
   \coffin_save_handle_values_with_offset:NnnN #1 {0pt}{0pt} #7
   \coffin_save_handle_values_with_offset:NnnN #3 
                                               \l_coffin_offset_x_dim
                                               \l_coffin_offset_y_dim
                                               #7
%    \end{macrocode}
%    At this point  we could free up the coffin/box content of box-B (not done
%    yet).\footnote{Issue?}
%    \begin{macrocode}
%    \end{macrocode}
%    Finally show the resulting handles when tracing:
%    \begin{macrocode}
%<*trace>
   \coffin_show_handles:N #7
%</trace>
}
%    \end{macrocode}
%  \end{macro}
%
%
%  \begin{macro}{\coffin_align_save:NnNnnnN}
%    
%    This commmand aligns two coffins at their handles with a certain offset
%    inbetween. The result is stored in a third coffin (with handles
%    from both coffins added as \texttt{\meta{box}-\meta{handle}}). Note that
%    the arguments are ordered differently compared to the internal helper
%    commands for coffin alignment
%
%    The resulting bounding box is clipped to the dimensions of the first
%    coffin (box-A), that is the second coffin may overlap surrounding text.
%
%    Arguments:
%    \begin{Arglist}
%    \Argitem{1} box register reference for box-A (single token)
%    \Argitem{2} handle of box-A to align with
%    \Argitem{3} box register reference for box-B (single token)
%    \Argitem{4} handle of box-B to align with
%    \Argitem{5} x-offset between handles
%    \Argitem{6} y-offset between handles
%    \Argitem{7} target box register for saving
%    \end{Arglist}
%
%    \begin{macrocode}
\cs_new:Npn\coffin_align_save:NnNnnnN #1#2#3#4#5#6#7{
%    \end{macrocode}
%    First we call the helper command to align the coffins (note the argument
%    order change).
%    \begin{macrocode}
  \coffin_align_two_coffins:NnnnNnN #1{#2} {#5}{#6} #3{#4} #7 
%    \end{macrocode}
%    Then we have to do a bit more than just changing the box dimensions: we
%    actually have to build a new box with additional kerns to the left and/or
%    right of, at least if we have to move the
%    reference point of the result box to the left of the reference point of
%    box-A (which happens if box-B sticks out to the left of box-A).
%    \begin{macrocode}
   \hbox_set:Nn #7 {
    \dim_compare:nNnT \l_coffin_offset_x_dim < \c_zero_dim
%    \end{macrocode}
%    Okay, so if |\l_coffin_offset_x_dim| is negative the reference point of
%    box-B is to the left of box-A. Thus by starting our box with a horizontal
%    shift of |-\l_coffin_offset_x_dim| we  effectively start with the
%    reference point at the left edge.
%    \begin{macrocode}
         { \tex_kern:D -\l_coffin_offset_x_dim }
%    \end{macrocode}
%    Then we unpack the box holding the aligned coffins (we can use unpacking
%    as that will not change the sizes but avoids one unnecessay box level).
%    \begin{macrocode}
    \hbox_unpack_clear:N #7
%    \end{macrocode}
%    To get the right side of the box correct we also may have to add some
%    kern. Right now our box ends at the right side of box-B. Thus, if box-A
%    extends further to the right we have to account for that. This can be
%    achieved by adding to |\l_coffin_offset_x_dim| the width of box-B (which
%    gives us the horizontal size of box |#7|) and substract the width of
%    box-A. If the result is negative this means that box-A sticks out  to the
%    right by that amount. Therefore we have to add a corresponding kern in
%    that case. Deep breath!
%    \begin{macrocode}
    \dim_set:Nn \l_coffin_tmpa_dim { \l_coffin_offset_x_dim 
                                      + \box_wd:N #3 - \box_wd:N #1 }
    \dim_compare:nNnT \l_coffin_tmpa_dim < \c_zero_dim
                      { \tex_kern:D -\l_coffin_tmpa_dim }
  }
%    \end{macrocode}
%    What remains to be done is to add the explicit handles to the inner
%    boxes. Now that we know whether or not the reference point of the result
%    box got moved or not we are ready to go. We just need to check again if
%    |\l_coffin_offset_x_dim| is negative. (It isn't possible to use the test
%    earlier inside the box construction as that would mean the handle updates
%    would only live until the end of the box contruction.)
%    \begin{macrocode}
  \dim_compare:nNnTF \l_coffin_offset_x_dim < \c_zero_dim
%    \end{macrocode}
%    Here the reference point got moved so we need to shift things to the
%    left:
%    \begin{macrocode}
         { 
           \coffin_save_handle_values_with_offset:NnnN
                  #1 {-\l_coffin_offset_x_dim} {0pt} #7
           \coffin_save_handle_values_with_offset:NnnN
                  #3 {0pt} \l_coffin_offset_y_dim    #7
         }
%    \end{macrocode}
%    And if the reference point for the result box doesn't change then we have
%    the following offsets to use:
%    \begin{macrocode}
         {
           \coffin_save_handle_values_with_offset:NnnN
                  #1 {0pt}{0pt} #7
           \coffin_save_handle_values_with_offset:NnnN
                  #3 \l_coffin_offset_x_dim
    		     \l_coffin_offset_y_dim #7
         }
%    \end{macrocode}
%    At this point  we could free up the coffin/box content of box-B (not done
%    yet).\footnote{Issue?}
%    \begin{macrocode}
%    \end{macrocode}
%    Finally show the resulting handles when tracing:
%    \begin{macrocode}
%<*trace>
   \coffin_show_handles:N #7
%</trace>
}
%    \end{macrocode}
%  \end{macro}
%
%
%  \begin{macro}{\coffin_align_clip:NnNnnn}
%    
%    This commmand aligns two coffins at their handles with a certain offset
%    inbetween. The result is stored again in the first coffin (with handles
%    from both coffins added as \texttt{\meta{box}-\meta{handle}}).
%
%    The resulting bounding box is clipped to the dimensions of the first
%    coffin (box-A).
%
%    Arguments:
%    \begin{Arglist}
%    \Argitem{1} box register reference for box-A (single token)
%    \Argitem{2} handle of box-A to align with
%    \Argitem{3} box register reference for box-B (single token)
%    \Argitem{4} handle of box-B to align with
%    \Argitem{5} x-offset between handles
%    \Argitem{6} y-offset between handles
%    \end{Arglist}
%
%    Note that the arguments are ordered differently compared to the internal
%    helper commands for coffin alignment.
%
%    \begin{macrocode}
\cs_new:Npn \coffin_align_clip:NnNnnn #1#2#3#4#5#6{%
%    \end{macrocode}
%    First we align the coffins and save them in a scratch coffin.
%    \begin{macrocode}
  \coffin_align_clip_save:NnNnnnN  #1{#2} #3{#4} {#5}{#6} 
                                   \l_coffin_aligned_coffin
%    \end{macrocode}
%    Then we copy the scratch coffin back into box-A:
%    \begin{macrocode}
  \coffin_set_eq_clear:NN #1 \l_coffin_aligned_coffin
}
%    \end{macrocode}
%  \end{macro}
%
%
%
%  \begin{macro}{\coffin_align:NnNnnn}
%    
%    This commmand aligns two coffins at their handles with a certain offset
%    inbetween. The result is stored again in the first coffin (with handles
%    from both coffins added as \texttt{\meta{box}-\meta{handle}}).
%
%    The resulting bounding box is the enclosing box around both coffins.
%
%    Arguments:
%    \begin{Arglist}
%    \Argitem{1} box register reference for box-A (single token)
%    \Argitem{2} handle of box-A to align with
%    \Argitem{3} box register reference for box-B (single token)
%    \Argitem{4} handle of box-B to align with
%    \Argitem{5} x-offset between handles
%    \Argitem{6} y-offset between handles
%    \end{Arglist}
%
%    Note that the arguments are ordered differently compared to the internal
%    helper commands for coffin alignment.
%
%    \begin{macrocode}
\cs_new:Npn \coffin_align:NnNnnn #1#2#3#4#5#6{
%    \end{macrocode}
%    First we align the coffins and save them in a scratch coffin. This time
%    the version that doesn't clip is being used.
%    \begin{macrocode}
  \coffin_align_save:NnNnnnN  #1{#2} #3{#4} {#5}{#6}
                              \l_coffin_aligned_coffin 
%    \end{macrocode}
%    Then we copy the scratch coffin back into box-A:
%    \begin{macrocode}
  \coffin_set_eq_clear:NN #1 \l_coffin_aligned_coffin
}
%    \end{macrocode}
%  \end{macro}
%
%
%
%
%
% \subsection{Typesetting coffins}
%
%
%  \begin{macro}{\c_empty_coffin}
%    A permanently empty hbox coffin used in placing other coffins.
%    \begin{macrocode}
\coffin_new:N \c_empty_h_coffin
\hbox_set:Nn  \c_empty_h_coffin {} 
%    \end{macrocode}
%  \end{macro}
%

%  \begin{macro}{\coffin_typeset:Nnnn}
%    This command typeset a coffin aligning one handle of it with the current reference
%    point on the page with a certain x/y-offset. 
%    
%    Arguments:
%    \begin{Arglist}
%    \Argitem{1} box register reference (single token)
%    \Argitem{2} handle of box to align with current reference point
%    \Argitem{3} x-offset to handle
%    \Argitem{4} y-offset to handle
%    \end{Arglist}
%
%    \begin{macrocode}
\cs_new:Npn\coffin_typeset:Nnnn #1#2#3#4{
%    \end{macrocode}
%    We implement this by aligning the box with an permanently empty coffin
%    which is of zero size in all directions, i.e., all its reference points
%    would be at the current reference point on the page. That reduces the
%    problem to one of the commands already implemented:
%    \begin{macrocode}
  \coffin_align_save:NnNnnnN \c_empty_h_coffin {Hl} #1{#2} {#3}{#4} 
                             \l_coffin_aligned_coffin 
%    \end{macrocode}
%    Of course this command does a bit too much: |\l_coffin_aligned_coffin|
%    will now unnecessarily contain all kind of handles which are never going
%    be to be used since we typeset the beast directly.
%    \begin{macrocode}
  \box_use_clear:N \l_coffin_aligned_coffin
}
%    \end{macrocode}
%  \end{macro}
%
%
%
%
%
%  \begin{macro}{\coffin_typeset_clip:Nnnn}
%    
%    This command typeset a coffin aligning one handle of it with the current reference
%    point on the page with a certain x/y-offset. 
%    
%    The reference point will not be changed so all material will overlap with
%    surrounding text.
%    
%    Arguments:
%    \begin{Arglist}
%    \Argitem{1} box register reference (single token)
%    \Argitem{2} handle of box to align with current reference point
%    \Argitem{3} x-offset to handle
%    \Argitem{4} y-offset to handle
%    \end{Arglist}
%
%    \begin{macrocode}
\cs_new:Npn \coffin_typeset_clip:Nnnn #1#2#3#4{%
    \coffin_align_clip_save:NnNnnnN \c_empty_h_coffin {Hl} 
                                    #1 {#2} 
                                    {#3}{#4}
                                    \l_coffin_aligned_coffin 
  \box_use_clear:N \l_coffin_aligned_coffin
}
%    \end{macrocode}
%  \end{macro}
%
%
%
%
%
%  \begin{macro}{\coffin_typeset_clip_left:Nnnn}
%    
%    This command typeset a coffin aligning one handle of it with the current reference
%    point on the page with a certain x/y-offset. 
%
%    Here we use a different clipping strategy: we only clip away anthing to
%    the left of the current reference point. This seems to be the most
%    natural behavior to me, e.g., if I ask for
%\begin{verbatim}    
%   \coffin_typeset:Nnnn \aaa {cc}{0pt}{0pt}
%\end{verbatim}
%    I'm asking for the middle of the box being aligned with the current
%    reference point and not for its left edge, i.e.,
%\begin{verbatim}    
%   \coffin_typeset:Nnnn \aaa {cl}{0pt}{0pt}
%\end{verbatim}
%    which is what would happen with the implementation of |\coffin_typeset:Nnnn|.
%    
%    Arguments:
%    \begin{Arglist}
%    \Argitem{1} box register reference (single token)
%    \Argitem{2} handle of box to align with current reference point
%    \Argitem{3} x-offset to handle
%    \Argitem{4} y-offset to handle
%    \end{Arglist}
%
%    \begin{macrocode}
\cs_new:Npn \coffin_typeset_clip_left:Nnnn #1#2#3#4{%
    \coffin_align_two_coffins:NnnnNnN \c_empty_h_coffin {Hl} 
                                    {#3}{#4}
                                    #1 {#2} 
                                    \l_coffin_aligned_coffin 
  \box_use_clear:N \l_coffin_aligned_coffin
}
%    \end{macrocode}
%  \end{macro}
%
%
% \subsection{Some variants and additional commands}
% 
% We need a few variants and commands not in l3in2e.
%
% Looks like |\vtop| and friends are not set up at all so far.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \vbox_top:n {\tex_vtop:D \scan_stop:}
\cs_new_protected:Npn \vbox_set_top:Nn #1 { \tex_setbox:D #1 \tex_vtop:D }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_generate_variant:Nn \prop_put:Nnn { cnV, cVV }
%    \end{macrocode}
%
%    \begin{macrocode}
\endinput
%</package>
%    \end{macrocode}
%
% \Finale
%

\endinput
