% \iffalse
%%
%% (C) Copyright 1999 Frank Mittelbach
%% All rights reserved.
%%
%% Not for general distribution. In its present form it is not allowed
%% to put this package onto CD or an archive without consulting the
%% the authors.
%% 
%    \begin{macrocode}
\def\next#1: #2.dtx,v #3 #4 #5 #6 #7$#8{
%<*dtx>
  \ProvidesFile{#2.dtx}
%</dtx>
%<package>\ProvidesPackage{#2}
%<driver>\ProvidesFile{#2.drv}
  [#4 #3 #8 (#6)]}
\next$Id$
       {quarks from ltx3 kernel}
%    \end{macrocode}
%
%<*driver>
 \documentclass{ltxdoc}
%
 \begin{document}
 \DocInput{xquarks.dtx}
 \end{document}
%</driver>
%
% \fi
%
%
% \GetFileInfo{xquarks.dtx}
%
% \title{The \textsf{xquarks} package\thanks{This file
%         has version number \fileversion, last
%         revised \filedate.}}
% \author{FMi}
% \date{\filedate}
%
%  \maketitle
%
% \tableofcontents
%
% \section {Quarks}
%
% A quark is a control sequence that expands into itself@ |\def|
% |\foo{\foo}|.  Quarks provide a cheap way of generating distinct
% constants.  Also, they permit the following ingenious trick: when
% you pick up a token in a temporary, and you want to know whether you
% have picked up a particular quark, all you have to do is compare the
% temporary to the quark using |\ifx|.
%
% \begin{macro}{\quark@new@N}
%    Allocate a new quark.
%    \begin{macrocode}
\def \quark@new@N #1{\def #1{#1}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\q@stop}
% \begin{macro}{\q@no@value}
% \begin{macro}{\q@nil}
%    |\q@stop| is often used as a marker in parameter text,
%    |\q@no@value| is the canonical missing value, and |\q@nil|
%    represents a nil pointer in some data structures.
%    \begin{macrocode}
\quark@new@N \q@stop
\quark@new@N \q@no@value
\quark@new@N \q@nil
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\q@error}
% \begin{macro}{\q@mark}
%    We need two additional quarks.  |\q@error| delimits the end of
%    the computation for purposes of error recovery.  |\q@mark| is
%    used in parameter text when we need a scanning boundary that is
%    distinct from |\q@stop|.
%    \begin{macrocode}
\quark@new@N\q@error
\quark@new@N\q@mark
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% \begin{macro}{\quark@if@no@value@NTF}
% \begin{macro}{\quark@if@no@value@NF}
% \begin{macro}{\quark@if@no@value@nTF}
% \begin{macro}{\quark@if@no@value@nT}
% \begin{macro}{\quark@if@no@value@nF}
%    Here we test if we found a special quark as the first argument.
%    The argument might contain an arbitrary list of tokens, therefore
%    we have to wrap it up in a token list pointer.
%    \begin{macrocode}
\def \quark@if@no@value@NTF #1{
%    \end{macrocode}
%    We better start with |\q@no@value| as the first argument since
%    the whole thing may otherwise loop if |#1| is wrongly given
%    a string like |aabc| instead of a single token.\footnote{It may
%    still loop in special circumstances however!}
%    \begin{macrocode}
     \ifx\q@no@value#1
          \expandafter\@firstoftwo
     \else \expandafter\@secondoftwo \fi}
%    \end{macrocode}
%    It would be possible to speed up the following commands by
%    providing individual implementations similar to the one above.
%    Should perhaps be done if they are used often!
%    \begin{macrocode}
\def \quark@if@no@value@NF #1{\quark@if@no@value@NTF {#1}\@empty}
\def \quark@if@no@value@nTF #1{\gdef \@gtempa {#1}
    \quark@if@no@value@NTF\@gtempa}
\def \quark@if@no@value@nF #1{\quark@if@no@value@nTF {#1}\@empty}
\def \quark@if@no@value@nT #1#2{\quark@if@no@value@nTF {#1}
        {#2}\@empty}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\quark@if@nil@NTF}
%    A function to check for the presence of |\q@nil|.
%    \begin{macrocode}
\def\quark@if@nil@NTF#1{
  \ifx#1\q@nil
    \expandafter\@firstoftwo
  \else
    \expandafter\@secondoftwo\fi}
%    \end{macrocode}
% \end{macro}
%
%
% \Finale
%
\endinput
%
% $Log$
% Revision 1.3  2000/06/15 09:15:36  latex3
% *** empty log message ***
%
