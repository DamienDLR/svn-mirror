This is a generated file for the LaTeX (2e + expl3) validation system.
Don't change this file in any respect.
%% \CharacterTable
%%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%%   Digits        \0\1\2\3\4\5\6\7\8\9
%%   Exclamation   \!     Double quote  \"     Hash (number) \#
%%   Dollar        \$     Percent       \%     Ampersand     \&
%%   Acute accent  \'     Left paren    \(     Right paren   \)
%%   Asterisk      \*     Plus          \+     Comma         \,
%%   Minus         \-     Point         \.     Solidus       \/
%%   Colon         \:     Semicolon     \;     Less than     \<
%%   Equals        \=     Greater than  \>     Question mark \?
%%   Commercial at \@     Left bracket  \[     Backslash     \\
%%   Right bracket \]     Circumflex    \^     Underscore    \_
%%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%%   Right brace   \}     Tilde         \~}
%%
Author: Joseph Wright
============================================================
TEST 1: Basic definitions with valid arguments (types s, o m)
============================================================
(a)(b)(c)
(text)(t)(text)
(d)(e)
<<par>>
(text)(text)
()
(stuff)(f)(g)
(\NoValue )(f)(g)
()(f)(g)
(h)(opt)(i)
(h)(opt)(i)
(h)(\NoValue )(i)
(j)(k)(opt)
(j)(k)(\NoValue )
(j)(k)(\NoValue )
(\BooleanFalse )(\NoValue )(l)
(\BooleanTrue )(\NoValue )(l)
(\BooleanFalse )(opt)(m)
(\BooleanTrue )(opt)(m)
(\BooleanFalse )(\NoValue )
(l)
(\BooleanTrue )(\NoValue )
(l)
(\BooleanFalse )(opt)
(m)
Runaway argument?
{(\BooleanTrue )(
! Paragraph ended before \TYPE was complete.
<to be read again> 
                   \par 
l.57 }
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
! Extra }, or forgotten \endgroup.
\\foo #1#2#3->\TYPE {(#1)(#2)}
                              \TYPELONG {#3}
l.57 }
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.
(m)
============================================================
============================================================
TEST 2: Nesting optional arguments
============================================================
(option)(text)
([option])(text)
({[option]})(text)
============================================================
============================================================
TEST 3: Invalid arguments(types s, o m)
============================================================
Runaway argument?
! Paragraph ended before \foo was complete.
<to be read again> 
                   \par 
l.75 }
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
Runaway argument?
! Paragraph ended before \xparse_grab_arg:w was complete.
<to be read again> 
                   \par 
l.75 }
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
Runaway argument?
ab
! Paragraph ended before \xparse_grab_arg_aux_ii:w was complete.
<to be read again> 
                   \par 
l.75 }
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
Runaway argument?
b
! Paragraph ended before \xparse_grab_arg_aux_ii:w was complete.
<to be read again> 
                   \par 
l.75 }
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
============================================================
============================================================
TEST 4: More variation of type with valid arguments
============================================================
(\NoValue )(\NoValue )(a)
(text)(\NoValue )(b)
(text)(opt)(text)
(d)(e)(default)
(d)(e)(text)
(d)(e)(default)
(\l_xparse_args_toks )(h)(i)
(j)(h)(e)
()(h)(e)
============================================================
============================================================
TEST 5: Variation of type with invalid arguments
============================================================
Runaway argument?
{
! Paragraph ended before \xparse_grab_arg:w was complete.
<to be read again> 
                   \par 
l.106 }
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
! Extra }, or forgotten \endgroup.
<argument> ...\TYPE {(##1)(##2)(##3)}}\foo {\par }
                                                  bc\DeclareDocumentCommand ...
l.106 }
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.
Runaway argument?
{
! Paragraph ended before \xparse_grab_arg:w was complete.
<to be read again> 
                   \par 
l.106 }
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
! Extra }, or forgotten \endgroup.
<argument> ...YPE {(##1)(##2)(##3)}}\foo de{\par }
                                                  \DeclareDocumentCommand \f...
l.106 }
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.
Runaway argument?
g hi
! Paragraph ended before \xparse_grab_arg:w was complete.
<to be read again> 
                   \par 
l.106 }
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
Runaway argument?
j
! Paragraph ended before \xparse_grab_arg:w was complete.
<to be read again> 
                   \par 
l.106 }
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
============================================================
============================================================
TEST 6: Optional argument tests (expect paired TRUEs and FALSEs)
============================================================
TRUE
TRUE
FALSE
FALSE
FALSE
FALSE
FALSE
FALSE
FALSE
FALSE
FALSE
FALSE
TRUE
TRUE
FALSE
FALSE
TRUE
TRUE
FALSE
FALSE
FALSE
FALSE
============================================================
============================================================
TEST 7: Awkward `NoValue' checks (expect T/F/F/F/F/F/T)
============================================================
TRUE
FALSE
FALSE
FALSE
FALSE
FALSE
TRUE
============================================================
============================================================
TEST 8: Processing arguments
============================================================
1,2
\NoValue 
3,\NoValue 
1,2
0,0
3,\NoValue 
============================================================
============================================================
TEST 9: Optional argument tests expand (expect T/F/F/F/T)
============================================================
> \test=macro:
->TRUE.
<argument> \test 
l.179 }
> \test=macro:
->FALSE.
<argument> \test 
l.179 }
> \test=macro:
->FALSE.
<argument> \test 
l.179 }
> \test=macro:
->FALSE.
<argument> \test 
l.179 }
> \test=macro:
->TRUE.
<argument> \test 
l.179 }
============================================================
============================================================
TEST 10: Fully expandable functions
============================================================
(a)(b)
(\NoValue )(c)
(\BooleanFalse )(\NoValue )(##2)a]{b}
(\BooleanFalse )(\NoValue )(##2)
(\BooleanTrue )(a)(b)
(\BooleanTrue )(\NoValue )(c)
============================================================
