% \iffalse
%% File l3coffins.dtx (C) Copyright 2010 LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the ``xcoffins bundle'' (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
%<*driver>
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
\input docstrip.tex
\askforoverwritefalse
\preamble


EXPERIMENTAL CODE

Do not distribute this file without also distributing the
source files specified above.

Do not distribute a modified version of this file.


\endpreamble
% stop docstrip adding \endinput
\postamble
\endpostamble
\generate{\file{l3hooks.sty}{\from{l3hooks.dtx}{package}}}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</driver>
%
%<*driver|package>
\RequirePackage{expl3}
\RequirePackage{trace}
\GetIdInfo$Id$
          {Hooks}
%</driver|package>
%<*driver>
%\fi
\ProvidesFile{\filename.\filenameext}
  [\filedate\space v\fileversion\space\filedescription]
%\iffalse
\documentclass{l3doc}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
%\fi
%
% \title{^^A
%  The \LaTeX3 kernel: hooks\thanks{^^A
%    This file describes v\fileversion, last revised \filedate.^^A
%  }^^A
% }
% \author{\Team}
%
% \date{Released \filedate}
%
% \maketitle
%
% \begin{abstract}
% Provides author-level commands to access internal token registers
% such as \cs{everymath}
% \end{abstract}
%
% \tableofcontents
%
% \begin{documentation}
%
% \section{Introduction}
%
% This module is a translation of Steve Checkoway's \pkg{everyhook}
% package, with his permission. If/when this code is brought into
% the main `\LaTeX3' family his package will be re-worked to provide
% a thin wrapper to sit on top of the functions provided herein.
%
% \section{Hooks}
%
% \begin{function}{\everypar,\everymath,\everydisplay,
%                  \everyhbox,\everyvbox,\evercr}
% \begin{syntax}
% "\everypar"\Arg{material}
% \end{syntax}
% These commands are used to alter/replace the main hooks into these
% elements. It is \emph{not recommended} that you use these since older
% package authors may override any changes you make here.
% \end{function}
%
% \begin{table}
% \centering
% \begin{tabular}{@{}>{\sffamily}rl@{}}
% \toprule
% par & Paragraph \\
% math & Inline maths \\
% display & Display maths \\
% hbox & Horizontal box \\
% vbox & Vertical box \\
% cr & Tabular item \\
% \bottomrule
% \end{tabular}
% \caption{Hooks.}
% \label{tab:hooks}
% \end{table}
%
% \section{Functions}
%
% \begin{function}{\hook_pre_push:nn,\hook_post_push:nn}
% \begin{syntax}
% "\hook_pre_push:nn" \Arg{hook name} \Arg{material}
% \end{syntax}
% Adds <material> either before or after the main hook for an element.
% You should not assume the order in which pushed material is finally
% executed in the hook.
%
% See Table~\ref{tab:hooks} for the hooks provided.
% \end{function}
%
% \begin{function}{\hook_pre_pop:n,\hook_post_pop:n}
% \begin{syntax}
% "\hook_pre_push:nn" \Arg{hook name}
% "\hook_post_push:nn" \Arg{hook name}
% \end{syntax}
% Removes the last <material> added to a hook.
% \end{function}
%
% \begin{function}{\hook_pre_once:nn,\hook_post_once:nn}
% \begin{syntax}
% "\hook_pre_once:nn" \Arg{hook name} \Arg{material}
% \end{syntax}
% Adds <material> to the hook to only the next occurance of the element
% (i.e., after executing the hook once it automatically pops itself).
% \end{function}
%
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{Implementation}
%
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
%    \begin{macrocode}
\ProvidesExplPackage
  {\filename}{\filedate}{\fileversion}{\filedescription}
%    \end{macrocode}
%
% \pkg{expl3} additions:
%    \begin{macrocode}
\cs_new_protected:Npn \seq_use:N #1 { \seq_map_function:NN #1 \use:n }
\cs_generate_variant:Nn \seq_use:N {c}
\cs_generate_variant:Nn \toks_set:Nn {Nc}
%    \end{macrocode}
%
% \begin{macro}[aux]{\_hook_new:nN}
% The hook-generator function.
% The primitive hook is replaced by \cs{<name>_hook:D}, where <name> is
% one of the hook names in Table~\ref{tab:hooks}.
% This primitive hook is then given a pre-, main-, and post- hook for access
% by authors.
%    \begin{macrocode}
\cs_new:Nn \_hook_new:nN {
  \cs_set_eq:cN {hook_#1:D} #2
  \cs_gundefine:N #2
  \toks_new:N #2
  \toks_set:Nc #2 {hook_#1:D}
  \seq_new:c {g_hook_pre_#1_seq}
  \seq_new:c {g_hook_post_#1_seq}
  \toks_set:cx {hook_#1:D}
  {
    \seq_use:N
    \exp_not:c {g_hook_pre_#1_seq}
    \exp_not:n {\toks_use:N #2}
    \seq_use:N
    \exp_not:c {g_hook_post_#1_seq}
  }
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\hook_pre_push:nn,\hook_post_push:nn,
%               \hook_pre_pop:n,\hook_post_pop:n}
% These functions are used to add/remove material from a hook, in
% addition to the main "\everyxyz" interface. Using push/pop is more
% reliable since you never know when a dastardly package author overrides
% anything you might do with "\everyxyz".
%    \begin{macrocode}
\cs_new:Nn \hook_pre_push:nn  { \seq_gpush:cn {g_hook_pre_#1_seq}  {#2} }
\cs_new:Nn \hook_post_push:nn { \seq_gpush:cn {g_hook_post_#1_seq} {#2} }
\cs_new:Nn \hook_pre_pop:n  { \seq_gpop:cN {g_hook_pre_#1_seq}  \l_tmpa_tl }
\cs_new:Nn \hook_post_pop:n { \seq_gpop:cN {g_hook_post_#1_seq} \l_tmpa_tl }
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\hook_pre_once:nn,\hook_post_once:nn}
% Experimental functions to only execute after the next hook.
%    \begin{macrocode}
\cs_new:Nn \hook_pre_once:nn {
  \hook_pre_push:nn {#1} {#2 \hook_pre_pop:n {#1} }
}
\cs_new:Nn \hook_post_once:nn {
  \hook_post_push:nn {#1} {#2 \hook_post_pop:n {#1} }
}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Generating the hooks}
% Don't bother with \cs{everyjob}.
%
% In format mode, the user-level "\everyxyz" functions are \emph{not}
% provided as hooks.
%    \begin{macrocode}
%<*initex>
\_hook_new:nN {math}    \tex_everymath:D
\_hook_new:nN {display} \tex_everydisplay:D
\_hook_new:nN {par}     \tex_everypar:D
\_hook_new:nN {hbox}    \tex_everyhbox:D
\_hook_new:nN {vbox}    \tex_everyvbox:D
\_hook_new:nN {cr}      \tex_everycr:D
%</initex>
%    \end{macrocode}
%
% In \LaTeXe, we want to replace the user-level "\everyxyz" functions.
% This provides backwards compatibility for existing code.
%    \begin{macrocode}
%<*!initex>
\makeatletter
\_hook_new:nN {math}    \frozen@everymath
\_hook_new:nN {display} \frozen@everydisplay
\makeatother
\_hook_new:nN {par}     \everypar
\_hook_new:nN {hbox}    \everyhbox
\_hook_new:nN {vbox}    \everyvbox
\_hook_new:nN {cr}      \everycr
%</!initex>
%    \end{macrocode}
%
% Clean-up: (this function is never to be used again)
%    \begin{macrocode}
\cs_gundefine:N \_hook_new:nN
%    \end{macrocode}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \end{implementation}
%