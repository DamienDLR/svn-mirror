% \iffalse
%% File xo-here.dtx (C) Copyright 1999-2000 Frank Mittelbach, David Carlisle, Chris Rowley
%%                  (C) Copyright 2004-2007 Frank Mittelbach, LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the ``xor bundle'' (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/cgi-bin/cvsweb.cgi/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
\RequirePackage{l3names}
\GetIdInfo $Id$
          {xo-here (part of xor)}
\ProvidesExplPackage{\filename}
  {\filedate}{\fileversion}{\filedescription}
% \fi
%
%
% Most of the code in this file is temporary in the sense that the
% interfaces are not fixed or the intended functionality is not fully
% implemented. It is sort of the proof of concept stuff.
%
%
%
% \begin{macro}{\requirespace}
%    The |\requirespace| command is an interface function for other
%    parts of a class file. It issues a here point which ensures
%    that there is at least |#1| amount of space still available in
%    the current column. If not it results in carrying the here point,
%    including the previous line(s), to the next column. This could,
%    for example, be used by a heading to ensure that there is a
%    certain amount of minimal space following it.
%
%    The precise (?) definition of ``previous line(s)'' is as follows:
%    the internal algorithm will split the so far collected column material
%    trying reach the latest possible break point before the here
%    point. It is theoretically possible to construct examples where
%    \TeX{} decides to take an earlier split point but it is
%    guaranteed the the here point is not losing contact with the
%    material directly preceeding it (unless a legal breakpoint was
%    added in front of it).
%    If the here point was added via |\vadjust| in horizontal mode,
%    this means that the line immediately before it will be after the
%    split (since there will be no other legal break point inbetween).
%    \begin{macrocode}
\def_new:Npn \requirespace #1 {
  \mode_horizontal:T { \@bsphack }
  \xor_gpop_float:NNTF \g_xor_floats_free_seq \g_xor_curr_float_box_tlp 
%    \end{macrocode}
%    If there is no here object left the algorithm we don't have enough float
%    objects, neds handling one day
%    \begin{macrocode}
      {} \ERRORnotenoughfloatobjects
%    \end{macrocode}
%    We are only interested in the type really:
%    \begin{macrocode}
  \global\toks\g_xor_curr_float_box_tlp{{}{}
                        {}
                        {}
                        {}
                        {rspace}
                        {}
  }
  \xor_add_here_point:Nn\g_xor_curr_float_box_tlp{#1}
  \@ignorefalse
  \@esphack
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\marginpar}
%    The current implementation of the document command |\marginpar|
%    is only a proof of concept draft. It doesn't cover the full
%    flexibility of the \LaTeXe{} version yet (and perhaps one wants
%    even an extension of that).
%    \begin{macrocode}
\def:Npn \marginpar #1 {
  \mode_horizontal:T \@bsphack
  \xor_gpop_float:NNTF \g_xor_floats_free_seq \g_xor_curr_float_box_tlp
%    \end{macrocode}
%    If there is no here object left the algorithm we don't have enough float
%    objects, neds handling one day
%    \begin{macrocode}
      {} \ERRORnotenoughfloatobjects
  \@savemarbox\g_xor_curr_float_box_tlp{#1}
%    \end{macrocode}
%    We are only interested in the type really:
%    \begin{macrocode}
  \global\toks\g_xor_curr_float_box_tlp{{}{}
                        {}
                        {}
                        {}
                        {mpar}
                        {}
  }
%    \end{macrocode}
%    How far is a marginpar allowed to move past the bottom of the
%    text area? Or say it differently: how much space does a marginpar
%    need to reserve on the page?
%
%    The code below works differently than the \LaTeXe{} one: it will
%    move the marginpar including the line it was issued on to the
%    next column if its text will otherwise fall more than a
%    baselineskip below the page bottom.
%    \begin{macrocode}
  \dim_set:Nn \l_tmpa_dim {   \box_ht:N\g_xor_curr_float_box_tlp
                            + \box_dp:N\g_xor_curr_float_box_tlp - \baselineskip }
 % allow to run long
  \dim_compare:nNnT \l_tmpa_dim < \c_zero_dim  { \dim_zero:N \l_tmpa_dim }
  \xor_add_here_point:Nn\g_xor_curr_float_box_tlp{\dim_use:N \l_tmpa_dim}
  \@ignorefalse
  \@esphack
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%
%
%
%
% \begin{macro}{\xor_typeset_a_marginpar:}
%    The |\xor_typeset_a_marginpar:| code is called when a marginpar is
%    finally added to the current page (either in a trial or in the
%    final run).
%
%    It should be templated!
%
%    Current code is only working for two column setup (!) and lacks
%    any modification possibilities depending on the final position
%    for the marginpar.
%
%    Also the attachment is not correct (as |\pagedepth| is not having the
%    actual value of the last line we want to attach to, so ...\footnote{fix}
%
%    \begin{macrocode}
\def_new:Npn \xor_typeset_a_marginpar:{
%<*trace>
  \trace_push:n{xor_typeset_a_marginpar:}
%</trace>
  \kern-\pagedepth
  \vtop to\pagedepth{\baselineskip\pagedepth
     \dim_zero:N \lineskip
     \vss
     \dim_set:Nn \l_tmpa_dim {\box_dp:N\g_xor_curr_float_box_tlp}
  \int_compare:nNnTF \g_xor_curr_col_int = \c_one
  {
%    \end{macrocode}
%    Since this perhaps only a trial setting we have to |\box_use:N| and
%    not to |\box_use_clear:N|!\footnote{FIX: Should clear those boxes somewhere
%    else to save space!}
%    \begin{macrocode}
%<*trace>
  \trace:n{in~ first~ column}
%</trace>
     \llap{\box_use:N\g_xor_curr_float_box_tlp\kern\marginparsep}
  }
  {
    \int_compare:nNnTF \g_xor_curr_col_int = \g_xor_cols_int
       { 
%<*trace>
         \trace:n{in~ last~ column}
%</trace>
         \rlap {\kern\columnwidth \kern\marginparsep
                \box_use:N\g_xor_curr_float_box_tlp}  }
       { \ERROR-NOT-SUPPORTED }
  }
  \kern-\l_tmpa_dim
  \null}
%<*trace>
  \trace_pop:n{xor_typeset_a_marginpar:}
%</trace>
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%
% \begin{macro}{\xor_check_and_typeset_a_here_float:}
%
%    When we reach |\xor_check_and_typeset_a_here_float:| we are trying to
%    place a float from the active list into some area and have
%    encountered a here point while grabbing the column text for this
%    trial placement. In |\xor_check_and_typeset_a_here_float:| we check if
%    the type of the here point is the same as the current float and
%    if so whether or not it would conflict with that trial
%    placement. This is the case if
%    \begin{itemize}
%    \item
%      the here float and the float under trial have the same type
%    \item
%      and their ordering gets out of sync.
%    \end{itemize}
%    \begin{macrocode}
\def_new:Npn \xor_check_and_typeset_a_here_float:{
%<*trace>
  \trace_push:n{xor_check_and_typeset_a_here_float:}
%</trace>
%    \end{macrocode}
%    If we don't run with floats then no check are necessary (in fact,
%    the checks would produce incorrect results), so we skip them and
%    immediately typeset the here float.
%    \begin{macrocode}
  \bool_if:NT \g_xor_trial_with_floats_bool
  {
%    \end{macrocode}
%    If the current float under trial has the same sequence class as the here
%    object we have to look at the spatial relationship in more detail.
%    \begin{macrocode}
    \tlp_if_eq:NNT \g_xor_here_class_tlp\g_xor_this_class_tlp
    {
%<*trace>
      \trace:n{here:~ g_xor_here_class_tlp~ =~ this@class~ =~ \g_xor_this_class_tlp}
%</trace>
%    \end{macrocode}
%    If the float under trial has a larger sequence number than the
%    here float we have to ensure that the area we place it in follows
%    the here point, i.e., is either a later column or if it is in the
%    same column comes at the bottom.
%    \begin{macrocode}
      \int_compare:nNnTF \g_xor_this_flseq_num > \g_xor_here_flseq_tlp
      {
%<*trace>
        \trace:n{here:~ target~ area~ should~ be~ after~ here~ point!}
%</trace>
%    \end{macrocode}
%    Like in the case of checking call-out relations we use the column
%    number returned in |\l_xor_returned_float_col_num| by
%    |\xor_calculate_float_col:| rather than always using the start
%    column of the area.
%    \begin{macrocode}
        \xor_calculate_float_col:
        \int_compare:nNnTF \l_xor_returned_float_col_num > \g_xor_curr_col_int
        {
%<*trace>
          \trace:n{OK:~ target~ area column~ later}
%</trace>
        }
        {
          \int_compare:nNnTF \l_xor_returned_float_col_num = \g_xor_curr_col_int
          {
%<*trace>
            \trace:n{??:~ target~ area~ target~ column~ identical}
%</trace>
%    \end{macrocode}
%    So in case we are in the same column at the top we fail the trial.
%    \begin{macrocode}
            \if:w t \g_xor_this_area_type_tlp
%<*trace>
              \trace:n{Fail:~ target~ area~ is~ before~ here~ point}
%</trace>
              \bool_gset_true:N \g_xor_trial_failed_bool
%<*trace>
            \else:
              \trace:n{OK:~ target~ area~ is~ after~ here~ point}
%</trace>
            \fi:
          }
          {
%    \end{macrocode}
%    And we fail the trial if we tried to place the float into an
%    earlier column.
%    \begin{macrocode}
%<*trace>
            \trace:n{Fail:~ target~ area~  column~ earlier~
                   (\num_use:N \l_xor_returned_float_col_num 
                    < \int_use:N\g_xor_curr_col_int)}
%</trace>
            \bool_gset_true:N \g_xor_trial_failed_bool
          }
        }
      }
      {
%    \end{macrocode}
%    If the float sequence number of the current float is smaller than
%    the one of the here float then we should always handle it via
%    flushing the float out. So the |\else| case is really only there
%    for debugging
%    \begin{macrocode}
%<*debug>
        \trace:n{here:~ target~ area~ should~ be~ before~ here~ point!}
        \int_compare:nNnTF \g_xor_this_area_col_tlp > \g_xor_curr_col_int
        {
          \trace:n{Problem:~ target~ area~  column~ after~ here~ point
                 (\g_xor_this_area_col_tlp > \int_use:N\g_xor_curr_col_int)}
        }
        {
          \int_compare:nNnTF \g_xor_this_area_col_tlp = \g_xor_curr_col_int
          {
            \trace:n{??:~ target~ area~ target~ column~ identical}
            \if:w t \g_xor_this_area_type_tlp
              \trace:n{OK:~ target~ area~ is~ before~ here~ point}
            \else:
              \trace:n{Problem:~ target~ area~ is~ after~ here~ point}
            \fi:
          }
          {
            \trace:n{OK:~ target~ area~ is~ before~ here~ point}
          }
        }
%</debug>
      }
    }
  }
  \bool_if:NTF \g_xor_trial_failed_bool
  {
%    \end{macrocode}
%    If the test above failed we report progress claiming that the
%    reason is due to the current float being placed before the here
%    float. As mentioned above this should be the only possibility why
%    things fail.
%    \begin{macrocode}
%<*progress>
    \xor_progress_failed:n{\g_xor_this_area_name_tlp \space before~here~float~
                 (\g_xor_here_type_tlp\space \g_xor_here_flseq_tlp)~
                 in~ column~ \int_use:N \g_xor_curr_col_int}
%</progress>
    \int_gset:Nn \g_xor_curr_col_int \g_xor_cols_int
%<*trace>
    \trace:n{Failed:~ here~ float~ out~ of~ sync}
%</trace>
  }
  { \xor_typeset_a_here_float: }
%<*trace>
  \trace_pop:n{xor_check_and_typeset_a_here_float:}
%</trace>
}
%    \end{macrocode}
% \end{macro}
%
%
%
% \begin{macro}{\xor_typeset_a_here_float:}
%    The |\xor_typeset_a_here_float:| is called when a here float is
%    finally added to the current page (either in a trial or in the
%    final run).
%
%    The caption is attached by the usual method where the here
%    area is denoted by |h|\meta{col}|1|. This allows to have
%    different caption placements depending, for example, on the
%    column being near the one of outer margins.
%
%    The float is separated from preceding and following text by the
%    current value of |\g_xor_float_inline_skip| as defined in the
%    page setup template plus or minus a certain amount to allow
%    grid-based typesetting  if desired.
%    \begin{macrocode}
\def_new:Npn \xor_typeset_a_here_float:{
%<*trace>
  \trace_push:n{xor_typeset_a_here_float:}
%</trace>
%    \end{macrocode}
%    Attach the caption to the float body and store the result in
%    |\g_xor_this_captioned_float_box|.
%    \begin{macrocode}
  \xor_append_here_caption_to_float:
%    \end{macrocode}
%    If we are not doing grid typesetting we simply put
%    |\g_xor_float_inline_skip| before and after the formatted
%    float.
%    \begin{macrocode}
  \dim_compare:nNnTF \pagesetup@grid@point@sep = \c_zero_dim
  {
    \skip_set:Nn \l_tmpa_skip \g_xor_float_inline_skip
  }
  {
%    \end{macrocode}
%    Otherwise we have to work a little harder since now we need to
%    put exactly the right amount of space before and after the float
%    to stay within the grid. So we measure the size of the formatted
%    float and store the value in |\l_tmpa_dim|.
%    \begin{macrocode}
    \dim_set:Nn \l_tmpa_dim {
      \box_ht:N \g_xor_this_captioned_float_box +
      \box_dp:N \g_xor_this_captioned_float_box
%    \end{macrocode}
%    To this we add twice |\g_xor_float_inline_skip| which gives us
%    the target size for whole object including surrounding space.
%    \begin{macrocode}
      + \c_two\g_xor_float_inline_skip
    }
%    \end{macrocode}
%    Calculate the difference to the nearest grid point\ldots
%    \begin{macrocode}
    \xor_snap_to_grid:nn \l_tmpa_dim \pagesetup@grid@point@sep
%    \end{macrocode}
%    \ldots and decide which grid point is closest. If the smaller one
%    is closer use it if we are allowed to shrink the white space by
%    the necessary amount.
%    \begin{macrocode}
    \dim_compare:nNnT \g_xor_returned_lower_delta_size_tlp < \g_xor_returned_delta_size_tlp
    {
      \dim_compare:nNnT \g_xor_returned_lower_delta_size_tlp 
                        < {2\g_xor_float_inline_shrink_dim}
      {
%    \end{macrocode}
%    Note that for the lower delta size we have to use the
%    negation since we want to backup by this amount and delta sizes
%    are always given in absolute values.
%    \begin{macrocode}
        \tlp_gset:Nx \g_xor_returned_delta_size_tlp {-\g_xor_returned_lower_delta_size_tlp }
      }
    }
%    \end{macrocode}
%    Now set up the amount of white space we need around the float by
%    starting with the |\g_xor_returned_delta_size_tlp| divided by two (i.e.,
%    equal amount contributed to both sides of the float and then add
%    |\g_xor_float_inline_skip|). Notice, that we used a skip
%    register for the calculation so that any minus or plus parts will
%    survive. This is useful in case we are not doing grid typesetting
%    and want to allow for some flexibility.\footnote{This needs perhaps
%    rethinking it the light of extended grid implementation concept!}
%    \begin{macrocode}
   \skip_set:Nn \l_tmpa_skip { \skip_eval:n {
        \g_xor_returned_delta_size_tlp / \c_two + \g_xor_float_inline_skip } }
%<*trace>
   \trace:n{GRID:~ here~float:~ use~ \skip_use:N \l_tmpa_skip \space above~ and~ below}
%</trace>
  }
%    \end{macrocode}
%    Finally typeset the float and its surrounding space which is by
%    now stored in |\l_tmpa_skip|.\footnote{Perhaps make the space
%    above and below specifiable individually. One day, perhaps!}
%    \begin{macrocode}
  \tex_vskip:D \l_tmpa_skip
%    \end{macrocode}
%    Actually we now have to substract the depth of the float again
%    since that will be taken into account when the next baseline skip
%    is calculated (otherwise the grid is messed
%    up). Perhaps better to make the depth zero or use a
%    suitable |\prevdepth| setting instead?\footnote{Check/fix}
%    \begin{macrocode}
  \skip_sub:Nn \l_tmpa_skip {\box_dp:N\g_xor_this_captioned_float_box}
  \box_use_clear:N \g_xor_this_captioned_float_box
  \tex_vskip:D \l_tmpa_skip
%<*trace>
  \trace_pop:n{xor_typeset_a_here_float:}
%</trace>
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\xor_setup_here_float:}
%    Absolutely temp!!!!!\footnote{FIX!!!!}
%    \begin{macrocode}
\def_new:Npn \xor_setup_here_float: {
%<*trace>
  \trace_push:n{xor_setup_here_float:}
%</trace>
 \skip_set:Nn \l_tmpa_skip {2\g_xor_float_inline_skip}    %FMi arbitrary value TMP
 \skip_add:Nn \l_tmpa_skip {\box_ht:N\g_xor_curr_float_box_tlp} %FMi arbitrary value TMP
 \skip_add:Nn \l_tmpa_skip {\box_dp:N\g_xor_curr_float_box_tlp} %FMi arbitrary value TMP
 \skip_add:Nn \l_tmpa_skip {5\baselineskip}               %FMi arbitrary value TMP
 \xor_add_here_point:Nn \g_xor_curr_float_box_tlp {\skip_use:N \l_tmpa_skip}
%<*trace>
  \trace_pop:n{xor_setup_here_float:}
%</trace>
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
% \endinput
\endinput
%
% $Log$
% Revision 1.11  2005/03/01 22:53:05  morten
% Small updates, more expl3 conversion
%
% Revision 1.9  2004/12/06 23:01:23  mittelba
% fix for here float not aligning to grid
%
% Revision 1.8  2004/11/13 10:04:06  mittelba
% new license (LPPL)
%
% Revision 1.7  2004/10/30 18:45:59  mittelba
% further cleanup using expl3 concepts
% first attempt at balancing (unfinished)
%
% Revision 1.6  2004/10/12 21:40:39  mittelba
% updates up to p29
%
% Revision 1.5  2004/10/03 22:44:22  mittelba
% more updates ... still not getting closer ...
%
% Revision 1.4  2004/10/03 15:35:56  mittelba
% more cleanup ... tedious ...
%
% Revision 1.3  2004/10/01 21:46:33  mittelba
% many further updates, still a lot to do
%
% Revision 1.2  2004/09/27 20:06:13  mittelba
% in the middle of normalizing to expl3 syntax
%
% Revision 1.1  2001/07/26 19:55:12  latex3
% original web distrib
%
% Revision 1.12  2000/08/11 07:14:21  latex3
% added header
%
% Revision 1.11  2000/08/04 10:19:09  latex3
% added init of here floats (temp version)
%
% Revision 1.10  2000/07/19 16:05:41  latex3
% introduced float sequence class concept
%
% Revision 1.9  2000/07/10 19:13:34  latex3
% template here floats and support grid typesetting for them.
%
% Revision 1.8  2000/06/29 17:18:44  latex3
% introduced \xor_this_area_setup:o
%
% Revision 1.7  2000/06/18 14:58:32  latex3
% use \xor_calculate_float_col: to determine the target column
% check if here float and current float are in sync
%
% Revision 1.6  2000/06/15 15:23:05  latex3
% untabify
%
% Revision 1.5  2000/06/13 20:45:47  latex3
% docu updates
%
% Revision 1.4  2000/05/03 18:58:56  latex3
% provide caption template support
%
% Revision 1.3  2000/04/27 19:51:45  latex3
% bug fix: need to copy boxes in trials :-)
% moved \check@and@typeset@a@here@float to this file
%
% Revision 1.2  2000/04/21 19:01:13  latex3
% added documentation
%
% Revision 1.1  2000/04/21 10:19:07  latex3
% Initial revision
%
