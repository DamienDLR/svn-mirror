% \iffalse meta-comment
% !TeX program = pdfLaTeX
%<*internal>
\iffalse
%</internal>
%<*readme>
----------------------------------------------------------------
The xgalley package --- Galley module
Maintained by the LaTeX3 Project
E-mail: latex-team@latex-project.org
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------

Installation
------------

The package is supplied in dtx format and as a pre-extracted zip
file, xgalley.tds.zip. The later is most convenient for most 
users: simply unzip this in your local texmf directory and run 
texhash to update the database of file locations. If you want to
unpack the dtx yourself, running 'tex xgalley.dtx' will extract
the package whereas 'latex xgalley.dtx will extract it and also 
typeset the documentation.

The package requires LaTeX3 support as provided in the expl3 
and xpackages bundles. Both of these are available on CTAN
(http://www.ctan.org/) as ready-to-install zip files. Suitable
versions are available in MiKTeX 2.8 and TeX Live 2009 
(updating the relevant packages online may be necessary). 
LaTeX3, and so siunitx, requires the e-TeX extensions: these 
are available on all modern TeX systems.

Typesetting the documentation requires a number of packages in
addition to those needed to use the package. This is mainly 
because of the number of demonstration items included in the 
text. To compile the documentation without error, you will 
need the packages:
%</readme>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
---------------------------------------------------------------
The xgalley package --- Galley module
Maintained by the LaTeX3 Project
E-mail: latex-team@latex-project.org
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
---------------------------------------------------------------

\endpreamble
\postamble

Copyright (C) 1999-2001, 2004-2009 Frank Mittelbach
          (C) 2010 LaTeX3 Project

It may be distributed and/or modified under the conditions of
the LaTeX Project Public License (LPPL), either version 1.3c of
this license or (at your option) any later version.  The latest
version of this license is in the file:

   http://www.latex-project.org/lppl.txt

This work is "maintained" (as per LPPL maintenance status) by
  The LaTeX3 Project.

This work consists of the file  xgalley.dtx
          and the derived files xgalley.pdf,
                                xgalley.sty and
                                xgalley.ins.

\endpostamble
\usedir{tex/latex/xpackages/xgalley}
\generate{
  \file{\jobname.sty}
    {
      \from{\jobname.dtx}{support,package}
      \from{\jobname.dtx}{objects}
      \from{\jobname.dtx}{interfaces}
      \from{\jobname.dtx}{code,package}
      \from{\jobname.dtx}{instances}
    }
}
%</install>
%<install>\endbatchfile
%<*internal>
\usedir{source/latex/xpackages/xgalley}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble
\usedir{doc/latex/xpackages/xgalley}
\generate{
  \file{README.txt}{\from{\jobname.dtx}{readme}}
}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
%<*driver|package>
\RequirePackage{expl3}
\GetIdInfo$Id$
  {Galley module}
%</driver|package>
%<*driver>
%\fi
\ProvidesFile{\filename.\filenameext}
  [\filedate\space \fileversion\space\filedescription]
%\iffalse
\documentclass[full]{l3doc}
\usepackage{xgalley}
%\DisableImplementation
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
% 
%\title{^^A
%  \textsf{xgalley} --- Galley module\thanks{^^A
%    This file describes v\fileversion, last revised \filedate.^^A
%  }^^A
%}
%\author{\Team}
%\date{Released \filedate}
%
%\maketitle
%
%\begin{abstract}
%
% This module provides templates and instances for both high- and
% low-level manipulation of galley objects in \LaTeX3. The
% higher-level interfaces are intended for general use by designers,
% while the lower-level material is mainly used to implement the 
% higher-level systems.
%
%\end{abstract}
%
%\tableofcontents
%
%\begin{documentation}
%
%\section{Introduction}
%
% In \LaTeX3 terminology a galley is a rectangular area which receives
% text and other material filling it from top. The vertically extend of 
% a galley is normally not restricted: instead certain chunks are taken 
% off the top of an already partially filled galley to form columns or 
% similar areas on a page. This process is typically asynchronous but 
% there are ways to control or change its behaviour.
%
% Examples for galleys are `the main galley', where the continuous
% document data gets formatted into  and from which columns and pages are
% constructed, and  `vbox galley's, such as the body of a minipage
% environment. The latter galleys are typically not split after
% formatting, though there can be exceptions.
%
%\section{Formatting layers}
%
% The present module is mainly concerned with the formatting of text
% in galleys. The mechanism by which this is achieved uses four 
% (somewhat) distinct layers, some of which can be addressed using the
% templates provided here. 
% 
%\subsection{Layer one: external dimensions}
%
% The bottom layer of the system is the external dimensions of the
% galley. Normally only the horizontal dimension is fixed externally,
% while the vertical (filling) dimension is unspecified. The external
% dimensions are fixed when starting a new galley, and are therefore
% not modifiable within the galley. 
%
% There are no templates for setting this layer directly, although the
% external values are influenced by other parts of the system (for 
% example when creating minipage environments).
% 
%\subsection{Layer two: internal dimensions}
%
% The second layer is the internal dimensions of the galley: the
% \emph{measure} used for paragraph text and the position of the 
% paragraph relative to the edges of the galley.
% 
% This layer is normally accessed by higher-level templates
% \emph{via} the object type \texttt{measure}. Changes made using
% level two templates will often extend for large parts of a document
% (up to and including the entire document).
% 
%\subsection{Layer three: paragraph shape}
%
% The third layer defines the paragraph shape within the measure as
% provided by the second layer. In the absence of any specification
% for that layer the paragraph shape used will be that of a
% rectangular area of the width of the current measure.
% 
% For this layer we are restricted by the mechanisms offered by \TeX. 
% This means that it is possible to define particular paragraph shapes 
% such as cutouts only from the top of a paragraph but not relative to 
% its bottom.
% 
% Currently, changes to the paragraph shape apply only to a single
% paragraph.
% 
%\subsection{Layer four: formatting inside the paragraph}
%
% The forth layer deals with  the paragraph formatting aspects such as 
% hyphenation and justification within the paragraph (this is sometimes
% referred to as `\texttt{h\&j}' or `\texttt{hj}').
% 
%\section{Templates and instances}
%
% The code which creates the objects, templates and instances provided
% by \pkg{xgalley} is presented here along with explanation of the 
% keys and settings as appropriate. In this way the code itself is
% `self-documenting'. 
%
%\subsection{Layer two: internal dimensions}
%
% There is a single object type for level two. This takes as its only
% argument the length of the left margin to be used, if the default
% value provided by the instance is being overridden.
%    \begin{macrocode}
%<*objects>    
\DeclareObjectType { measure } { 1 }
%</objects>
%    \end{macrocode}
%    
% There are two templates for galley measures: absolute and relative.
% Both use the same interface.   
%    \begin{macrocode}
%<*interfaces>    
\DeclareTemplateInterface { measure } { absolute } { 1 } {
  left-margin  : length ,
  right-margin : length
}
\DeclareTemplateInterface { measure } { relative } { 1 } {
  left-margin  : length ,
  right-margin : length
}
%</interfaces> 
%    \end{macrocode}
% The \texttt{absolute} template alters the width of the current galley
% relative to the (level one) container. This means that it will ignore
% any existing indentation. On the other hand, the \texttt{relative}
% template applies in an additive fashion, with each successive
% application of the template applying in addition to the margins
% already set. In both cases the `margins' may take negative values, 
% in which case the galley may become wider than its `container'.
%    
%\subsection{Layer three: paragraph shape}
%
% The object type \texttt{parshape} is a somewhat extended interface
% to the \TeX\ \cs{parshape} primitive. As such, there are no
% arguments.
%    \begin{macrocode}
%<*objects>    
\DeclareObjectType { parshape } { 0 }
%</objects>
%    \end{macrocode}
%    
% Currently, there is a single template for paragraph shape, the 
% \texttt{cutout} template.
%    \begin{macrocode}
%<*interfaces>    
\DeclareTemplateInterface { parshape } { cutout } { 0 } {
  forbid-page-break   : boolean   = false ,
  number-normal-lines : integer   = 0     ,
  on-left-side        : boolean   = true  ,
  parshape-list       : commalist
}
%</interfaces> 
%    \end{macrocode}
% This template is used to create a paragraph in which one or more
% lines are foreshortened to create a cut out section. Here, 
% \texttt{number-normal-lines} of full-width material are included
% before the cutout begins. The cutout may be on either the left or
% right of the paragraph, as indicated by the \texttt{on-left-side}
% switch. The cutout itself is detailed by the \texttt{parshape-list}
% key, which contains one (indent) length for each line of the
% cutout. It is often desirable to keep an entire shaped paragraph on
% a single page, and this is achieved using the 
% \texttt{forbid-page-break} switch.
%    
% It may be useful to have a `do nothing' cutout, which can be
% achieved using an empty \texttt{parshape-list}.
%    \begin{macrocode}
%<*instances> 
\DeclareInstance { parshape } { plain } { cutout } {
   forbid-page-break   = false ,
   number-normal-lines = 0     ,
   parshape-list       = 
}
%</instances>
%    \end{macrocode}
%    
% The nature of other instances needed will depend upon the type of
% cutout being generated. For example, a small rectangular space
% could be left in the top right of a paragraph by an instance such as
%\begin{verbatim}
%\DeclareInstance { parshape } { small-rectangle } { cutout } {
%   parshape-list = { 60 pt , 60 pt , 60 pt }
%}
%\end{verbatim}
% with the other settings inherited from the template.
%    
%\subsection{Layer four: formatting inside the paragraph}
%
% The first type of object within a paragraph is the hyphenation. This
% object needs no arguments.
%    \begin{macrocode}
%<*objects>    
\DeclareObjectType { hyphenation } { 0 }
%</objects>
%    \end{macrocode}
%
% There is only hyphenation template as standard. This provides a 
% semi-flexible interface to the underlying \TeX\ methods. (The detail
% is therefore hidden within the implementation phase.)
%    \begin{macrocode}
%<*interfaces>    
\DeclareTemplateInterface { hyphenation } { std } { 0 } {
  enable                  : boolean                        ,
  enable-upper-case       : boolean                        ,
  min-chars-after-hyphen  : integer = 3                    ,
  min-chars-before-hyphen : integer = 2                    ,
  penalty                 : choice { low , medium , high } ,
}
%</interfaces> 
%    \end{macrocode}
% Hyphenation can be turned on or off using the \texttt{enable} setting,
% while words containing upper case letters are also subject to the
% \texttt{enable-upper-case} setting (\emph{i.e}.~words containing
% capital letters are only hyphenated if both \texttt{enable} and 
% \texttt{enable-upper-case} are \texttt{true}). 
% 
% When a word is considered for hyphenation, the number of characters
% which have to occur before and after the hyphen can be controlled
% using the two \texttt{min-chars-\ldots} settings. These can be used
% to insist that only larger word fragments are considered as valid 
% when hyphenating. 
% 
% The \texttt{penalty} setting alters how undesirable hyphenation is
% considered, while still being allowed. The settings \texttt{low},
% \texttt{medium} and \texttt{high} describe the degree to which 
% hyphenation is disfavoured.
%
% The second level four object is the justification, which again 
% takes no arguments.
%    \begin{macrocode}
%<*objects>    
\DeclareObjectType { justification } { 0 }
%</objects>
%    \end{macrocode}
%    
% The \texttt{standard} template essentially sets the normal \TeX\
% parameters. The \texttt{single} template uses the same interface but
% works differently. The \texttt{standard} template applies to all 
% subsequent paragraphs, while the \texttt{single} template is used to 
% alter only the next paragraph shape.
%    \begin{macrocode}
%<*interfaces>  
\DeclareTemplateInterface { justification } { std } { 0 } {
  fill-skip     : skip   = 0 pt plus 1 fill ,
  indent-width  : length = 15 pt            ,
  left-skip     : skip   = 0 pt             ,
  right-skip    : skip   = 0 pt             ,
  space-skip    : skip   = 0 pt             ,
  start-skip    : skip                      ,
  xspace-skip   : skip   = 0 pt
}
\DeclareTemplateInterface { justification } { single } { 0 } {
  fill-skip     : skip   = 0 pt plus 1 fill ,
  indent-width  : length = 15 pt            ,
  left-skip     : skip   = 0 pt             ,
  right-skip    : skip   = 0 pt             ,
  space-skip    : skip   = 0 pt             ,
  start-skip    : skip                      ,
  xspace-skip   : skip   = 0 pt
}
%</interfaces> 
%    \end{macrocode}
% Most of the keys here should be readily understood. The \texttt{left-}
% and \texttt{right-skip} values are added to the appropriate end of 
% every line of the paragraph. \texttt{fill-skip} is added to the last
% line of the paragraph (in addition to \texttt{right-skip}) in order
% to fill up the foreshortened line. The \texttt{(x)space-skip} values
% are used for inter-word spaces: \texttt{space-skip} between normal
% words and \texttt{xspace-skip} after periods, \emph{etc}.
% 
% (When used as a package, the code will detect the value of
% \cs{parindent} at the start of the document and adjust the 
% above default setting for \texttt{indent-width} to match.)
%   
% Some instances of justification: the basics. 
%    \begin{macrocode}
%<*instances>
\DeclareInstance { justification } { default } { std } { }
%    \end{macrocode}
% The \texttt{standard} instance uses the default values from the 
% template. This results in the normal \TeX\ behaviour.   
%    \begin{macrocode}
\DeclareInstance { justification } { center } { std }
   {
     fill-skip    = 0 pt             ,
     indent-width = 0 pt             ,
     left-skip    = 0 pt plus 1 fill ,
     right-skip   = 0 pt plus 1 fill ,
     start-skip   = 0 pt        
  }
%    \end{macrocode}
% The \texttt{center} instance will place all of the lines of the 
% paragraph centered between the margins.
%    \begin{macrocode}
\DeclareInstance { justification } { center-middle } { std }
   {
     fill-skip    = -36 pt plus -1 fill ,
     indent-width =   0 pt              ,
     left-skip    =  36 pt plus  1 fill ,
     right-skip   =  36 pt plus  1 fill ,
     start-skip   = -36 pt plus -1 fill 
  }
%    \end{macrocode}
% The \texttt{center-middle} instance centers all lines except the 
% first and last. The first line is left aligned and the last line
% is right aligned.
%    \begin{macrocode}
\DeclareInstance { justification } { flush-left } { std }
  {
    fill-skip    = 0 pt plus 1 fill ,
    indent-width = 0 pt             ,
    left-skip    = 0 pt             ,
    right-skip   = 0 pt plus 1 fill ,
    start-skip   = 0 pt
  }
\DeclareInstance { justification } { flush-right } { std }
  {
    fill-skip    = 0 pt             ,
    left-skip    = 0 pt plus 1 fill ,
    right-skip   = 0 pt             ,
    start-skip   = 0 pt
  }
%    \end{macrocode}
% The \texttt{flush-\ldots} templates make the specified edge flush,
% and avoid hyphenation. This is achieved by filling the spaces on the
% non-flush edge as appropriate.
%    \begin{macrocode}
\DeclareInstance { justification } { ragged-left } { std }
  {
    fill-skip   = 0 pt           ,
    left-skip   = 0 pt plus 2 em ,
    right-skip  = 0 pt           ,
    space-skip  = \FontDimension { space } ,
    start-skip  = 0pt            ,
    xspace-skip = 
      \FontDimension { space } + \FontDimension { extraspace }
  }
\DeclareInstance { justification } { ragged-right } { std }
  {
    fill-skip   = 0 pt plus 1 fill ,
    left-skip   = 0 pt             ,
    right-skip  = 0 pt plus 2 em   ,
    space-skip  = \FontDimension { space } ,
    start-skip  = 0 pt             ,
    xspace-skip = 
      \FontDimension { space } + \FontDimension { extraspace }
  }
%</instances>
%    \end{macrocode}
% In contrast to the \texttt{flush-\ldots} instances, the 
% \texttt{ragged-\ldots} versions will lead to hyphenation but fix
% the inter-word space to a non-flexible value.
%
% The third template for justification is \texttt{complex}, which
% requires two instances of normal justification. The instance
% for the \texttt{first-paragraph} key should be derived from the
% \texttt{single} template so that it applies only to one 
% paragraph!
%    \begin{macrocode}
%<*interfaces>  
\DeclareTemplateInterface { justification } { complex } { 0 } {
  first-paragraph       : instance { justification } ,
  subsequent-paragraphs : instance { justification } 
}
%</interfaces> 
%    \end{macrocode}
%
% The last object type inside a paragraph is the \texttt{linebreak}.
% This is very much an excercise in renaming the \TeX\ primitive
% values.
%    \begin{macrocode}
%<*objects>    
\DeclareObjectType { linebreak } { 0 }
%</objects>
%    \end{macrocode}
% 
% For the moment, look at \emph{The TeXbook} or \emph{TeX by Topic}
% for details of these values, as they are just the primitives. At some
% stage perhaps they need renaming, or a better interface. On the other
% hand, perhaps not as the detail is likely to be needed here.  
%    \begin{macrocode}
%<*interfaces>  
\DeclareTemplateInterface { linebreak } { std } { 0 } {
  pretolerance         : integer = 100    ,
  tolerance            : integer = 200    ,
  linepenalty          : integer = 10     ,
  binoppenalty         : integer = 700    ,
  relpenalty           : integer = 500    ,
  hbadness             : integer = 1000   ,
  adjdemerits          : integer = 10000  ,
  doublehyphendemerits : integer = 10000  ,
  finalhyphendemerits  : integer = 5000   ,
  hfuzz                : length  = 0.1 pt ,
  emergencystretch     : length  = 0 pt   ,
}
%</interfaces> 
%    \end{macrocode}
%
%\end{documentation}
%
%\begin{implementation}
%
%\section{Implementation}
%
% \pkg{xgalley} is built on \pkg{xtemplate}, which is loaded for the
% package. This is not necessary for the format: the code from 
% \pkg{xtemplate} loads first. Remember that the code here is 
% `out of order' compared to the template information given above.
% When extracted from the source the \texttt{support} section comes
% first of all, with the \texttt{code} blocks between the 
% \texttt{interface} declarations and the \texttt{instance}
% part, otherwise things would not work!
%    \begin{macrocode}
%<*support>
%<*package>
\ProvidesExplPackage
  {\filename}{\filedate}{\fileversion}{\filedescription}
\RequirePackage { xtemplate }
%</package>
%    \end{macrocode}  
%    
%\subsection{Support functions: layer one (external dimensions)}
%
%\begin{macro}{\l_xgalley_total_width_dim}
% The external size of a galley is the stored in the \TeX\ primitive
% \cs{hsize}, which is renamed.
%    \begin{macrocode}
\cs_set_eq:NN \l_xgalley_total_width_dim \tex_hsize:D
%    \end{macrocode}
%\end{macro}
%
%\subsection{Support functions: layer two (internal dimensions)}
%
%\begin{macro}{\l_xgalley_margin_width_dim}
%\begin{macro}{\l_xgalley_text_width_dim}
%\begin{macro}{\l_xgalley_left_margin_dim}
%\begin{macro}{\l_xgalley_right_margin_dim}
% The two internal galley dimensions are the width of the text and the
% indent from the left margin.
%    \begin{macrocode}
%<*initex>
\dim_new:N \l_xgalley_margin_width_dim
\dim_new:N \l_xgalley_text_width_dim
\dim_new:N \l_xgalley_left_margin_dim
\dim_new:N \l_xgalley_right_margin_dim
%</initex>
%<*package>
\cs_new_eq:NN \l_xgalley_margin_width_dim \@totalleftmargin
\cs_new_eq:NN \l_xgalley_text_width_dim   \linewidth
\cs_new_eq:NN \l_xgalley_left_margin_dim  \leftmargin
\cs_new_eq:NN \l_xgalley_right_margin_dim \rightmargin
%</package>
%    \end{macrocode}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%
%\begin{macro}{\l_xgalley_par_shape_tl}
% The master paragraph shape in use is stored as a token list, as the
% format needed by \TeX\ is somewhat odd.
%    \begin{macrocode}
\tl_new:Nn \l_xgalley_par_shape_tl { \c_zero }
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\xgalley_measure_adjust_parshape:}
% Whenever adjusting a \texttt{measure} template, the
% paragraph shape token list is reset to reflect the new values for
% the margin dimensions. This is common to a couple of templates, so
% is best set up as an independent function. The \cs{par} primitive is
% placed inside a group so that the paragraph shape survives.
%    \begin{macrocode}
\cs_new_nopar:Npn \xgalley_measure_adjust_parshape: {
  \tl_set:Nx \l_xgalley_par_shape_tl
    {
      \c_one \c_space_tl
      \dim_use:N \l_xgalley_margin_width_dim \c_space_tl
      \dim_use:N \l_xgalley_text_width_dim 
    }  
  \tex_parshape:D \l_xgalley_par_shape_tl
  \cs_set_protected_nopar:Npn \par { { \tex_par:D } }  
%<*package>
  \cs_set_nopar:Npn \@par { { \tex_par:D } }  
%</package>
%<*initex>
  \tl_set:Nn \l_xgalley_par_tl { { \tex_par:D } }  
%</initex>
}
%    \end{macrocode}
%\end{macro}
%
%\subsection{Support functions: layer three (paragraph shape)}
%
%\begin{macro}{\l_xgalley_parshape_normal_lines_int}
%\begin{macro}{\l_xgalley_parshape_line_int}
% The number of `normal' lines and the total lines to parshape are
% both integer values.
%    \begin{macrocode}
\int_new:N \l_xgalley_parshape_normal_lines_int
\int_new:N \l_xgalley_parshape_line_int
%    \end{macrocode}
%\end{macro}
%\end{macro}
%
%\begin{macro}{\l_xgalley_parshape_current_tl}
% When a parshape is being calculated it is useful to have
% a storage token list to work in.
%    \begin{macrocode}
\tl_new:N \l_xgalley_parshape_current_tl
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\l_xgalley_parshape_clist}
% A comma list for the paragraph shape details.
%    \begin{macrocode}
\clist_new:N \l_xgalley_parshape_clist
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\l_xgalley_parshape_no_break_bool}
%\begin{macro}{\l_xgalley_parshape_on_left_bool}
% Two switches for level three templates: one to prevent page
% breaks, a second to indicate the material is to go on the left.
%    \begin{macrocode}
\bool_new:N \l_xgalley_parshape_no_break_bool
\bool_new:N \l_xgalley_parshape_on_left_bool
%    \end{macrocode}
%\end{macro}
%\end{macro}
%
%\begin{macro}{\l_xgalley_par_indent_dim}
%\begin{macro}{\l_xgalley_par_width_dim}
%    \begin{macrocode}
\dim_new:N \l_xgalley_par_indent_dim
\dim_new:N \l_xgalley_par_width_dim
%    \end{macrocode}
%\end{macro}
%\end{macro}
%
%\begin{macro}{\l_xgalley_par_first_indent_dim}
% Used to store the indent of the first line of a paragraph to make
% this data available outside of this routine.
%    \begin{macrocode}
\dim_new:N \l_xgalley_par_first_indent_dim
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\xgalley_parshape_set:N}
% Setting up a paragraph shape means building the appropriate
% list of tokens for the \cs{parshape} primitive. The first step is
% to construct the part of the shape for `normal' lines before the 
% shaped section. The shaped section is described by 
% \cs{l_xgalley_parshape_clist}, which is read through one item at a
% time. This is used to work out the total number of lines and also
% to set up the line length as needed (there are indents to work
% out). The final part of the token list for the \cs{parshape} is
% the `normal' shape again, to apply to the rest of the lines. With all
% of that done the shape can actually be set up.
%    \begin{macrocode}
\cs_new_nopar:Npn \xgalley_parshape_set:N #1 {
  \int_zero:N \l_xgalley_parshape_line_int
  \tl_clear:N \l_xgalley_parshape_current_tl
  \intexpr_while_do:nNnn
    { \l_xgalley_parshape_line_int } < 
    { \l_xgalley_parshape_normal_lines_int }
    {
      \tl_if_empty:NF \l_xgalley_parshape_current_tl
        { \tl_put_right:Nn \l_xgalley_parshape_current_tl { ~ } }
      \tl_put_right:Nx \l_xgalley_parshape_current_tl
        {
          \dim_use:N \l_xgalley_margin_width_dim
          \c_space_tl
          \dim_use:N \l_xgalley_text_width_dim
        }
      \int_incr:N \l_xgalley_parshape_line_int  
    }
  \tl_if_empty:NF \l_xgalley_parshape_current_tl
    { \tl_put_left:Nn \l_xgalley_parshape_current_tl { ~ } }  
  \clist_map_inline:Nn \l_xgalley_parshape_clist 
    { 
      \int_incr:N \l_xgalley_parshape_line_int
      \dim_set:Nn \l_xgalley_par_indent_dim
        { ##1 + \l_xgalley_margin_width_dim }
      \dim_set:Nn \l_xgalley_par_width_dim
        { 
            \l_xgalley_margin_width_dim
          + \l_xgalley_text_width_dim  
          - \l_xgalley_par_indent_dim
        }
      \intexpr_compare:nT { \l_xgalley_parshape_line_int = \c_one }
        {
          \dim_set:Nn \l_xgalley_par_first_indent_dim
            { \l_xgalley_par_indent_dim - \l_xgalley_margin_width_dim }
        }
      \dim_compare:nNnTF {#1} = { \c_zero_dim }
        {
          \tl_put_right:Nx \l_xgalley_parshape_current_tl
            { 
              \c_space_tl
              \dim_use:N \l_xgalley_margin_width_dim
              \c_space_tl 
              \dim_use:N \l_xgalley_par_width_dim 
            }
        } 
        {
          \tl_put_right:Nx \l_xgalley_parshape_current_tl
            { 
              \c_space_tl
              \dim_use:N #1
              \c_space_tl
              \dim_use:N \l_xgalley_par_width_dim 
            }
        }
    }
  \int_incr:N \l_xgalley_parshape_line_int
  \tl_set:Nx \l_xgalley_parshape_current_tl
    {
      \int_use:N \l_xgalley_parshape_line_int
      \l_xgalley_parshape_current_tl
      \c_space_tl
      \dim_use:N \l_xgalley_margin_width_dim
      \c_space_tl
      \dim_use:N \l_xgalley_text_width_dim
    }  
  \tex_parshape:D \l_xgalley_parshape_current_tl
  \cs_set_protected_nopar:Npn \par 
    { 
      { \tex_par:D }
      \tex_parshape:D \l_xgalley_par_shape_tl
    }  
%<*package>
  \cs_set_nopar:Npn \@par 
%</package>
%<*initex>
  \tl_set:Nn \l_xgalley_par_tl
%</initex>
    { 
      { \tex_par:D }
      \tex_parshape:D \l_xgalley_par_shape_tl
    }  
}
%    \end{macrocode}
%\end{macro}
%
%\subsection{Support functions: layer four (inside the paragraph)}
%
%\begin{macro}{\l_xgalley_hyphen_enable_bool}
%\begin{macro}{\l_xgalley_hyphen_uppercase_bool}
%\begin{macro}{\l_xgalley_hyphen_left_int}
% As the hyphenation system mainly sets low-level values only a few
% variables are needed here.
%    \begin{macrocode}
\bool_new:N \l_xgalley_hyphen_enable_bool    
\bool_new:N \l_xgalley_hyphen_uppercase_bool 
\int_new:N \l_xgalley_hyphen_left_int 
%    \end{macrocode}
%\end{macro}
%\end{macro}
%\end{macro}    
%
%\begin{macro}{\l_xgalley_indent_dim}
% One dimension for the fourth level: the \cs{parindent} primitive
% renamed.
%    \begin{macrocode}
\cs_new_eq:NN \l_xgalley_indent_dim \tex_parindent:D
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\l_xgalley_par_tl}
% This is used to store the `long term' version of \cs{par}: when
% running as a package, \cs{@par} does the same job.
%    \begin{macrocode}
%<*initex>
\tl_new:N \l_xgalley_par_tl
%</initex>
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\l_xgalley_fill_skip}
%\begin{macro}{\l_xgalley_left_skip}
%\begin{macro}{\l_xgalley_right_skip}
%\begin{macro}{\l_xgalley_space_skip}
%\begin{macro}{\l_xgalley_start_skip}
%\begin{macro}{\l_xgalley_xspace_skip}
% Quite a number of skips, most of which are primitives renamed.
%    \begin{macrocode}
\cs_new_eq:NN \l_xgalley_fill_skip \tex_parfillskip:D   
\cs_new_eq:NN \l_xgalley_left_skip \tex_leftskip:D
\cs_new_eq:NN \l_xgalley_right_skip \tex_rightskip:D   
\cs_new_eq:NN \l_xgalley_space_skip \tex_spaceskip:D
\skip_new:N \l_xgalley_start_skip 
\cs_new_eq:NN \l_xgalley_xspace_skip \tex_xspaceskip:D
%    \end{macrocode}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%
%\begin{macro}{\l_xgalley_fill_tl}
%\begin{macro}{\l_xgalley_indent_tl}
%\begin{macro}{\l_xgalley_left_tl}
%\begin{macro}{\l_xgalley_right_tl}
%\begin{macro}{\l_xgalley_space_tl}
%\begin{macro}{\l_xgalley_start_tl}
%\begin{macro}{\l_xgalley_xspace_tl}
% For storing the values of the paragraph-formatting skips and lengths.
%    \begin{macrocode}
\tl_new:N \l_xgalley_fill_tl
\tl_new:N \l_xgalley_indent_tl
\tl_new:N \l_xgalley_left_tl
\tl_new:N \l_xgalley_right_tl
\tl_new:N \l_xgalley_space_tl
\tl_new:N \l_xgalley_start_tl
\tl_new:N \l_xgalley_xspace_tl
%    \end{macrocode}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%
%\begin{macro}{\c_xgalley_parindent_dim}
% For the package version a place is needed to store \cs{parindent}.
%    \begin{macrocode}
%<*package>    
\dim_new:N \c_xgalley_parindent_dim 
%</package>
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\xgalley_justify_first:}
%\begin{macro}{\xgalley_justify_ongoing:}
% For storing the instances used when implementing a complex 
% justification scheme.
%    \begin{macrocode}
\cs_new_nopar:Npn \xgalley_justify_first: { }
\cs_new_nopar:Npn \xgalley_justify_ongoing: { }
%    \end{macrocode}
%\end{macro}
%\end{macro}
%
%\begin{macro}{\FontDimension}
%\begin{macro}{\c_xgalley_font_slant_int}
%\begin{macro}{\c_xgalley_font_space_int}
%\begin{macro}{\c_xgalley_font_spacestretch_int}
%\begin{macro}{\c_xgalley_font_spaceshrink_int}
%\begin{macro}{\c_xgalley_font_ex_int}
%\begin{macro}{\c_xgalley_font_em_int}
%\begin{macro}{\c_xgalley_font_extraspace_int}
% A mechanism to test the current dimensions of a font using the 
% design level interface.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \FontDimension #1 {
  \cs_if_exist:cTF { c_xgalley_font_ #1 _int }
     { 
       \exp_after:wN \tex_fontdimen:D 
         \cs:w c_xgalley_font_ #1 _int \cs_end: 
         \tex_font:D 
     }
     { \msg_error:nnx { xgalley } { unknown-font-dimension } {#1} }
}
\int_const:Nn \c_xgalley_font_slant_int        { \c_one }
\int_const:Nn \c_xgalley_font_space_int        { \c_two }
\int_const:Nn \c_xgalley_font_spacestretch_int { \c_three }
\int_const:Nn \c_xgalley_font_spaceshrink_int  { \c_four }
\int_const:Nn \c_xgalley_font_ex_int           { \c_five }
\int_const:Nn \c_xgalley_font_em_int           { \c_six }
\int_const:Nn \c_xgalley_font_extraspace_int   { \c_seven }
\msg_new:nnn { xgalley } { unknown-font-dimension }
  {The font dimension '#1' is not known.}
%    \end{macrocode}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%
%\begin{macro}{\everypar}
% At the moment, make the assumption that \cs{everypar} will be
% available in \LaTeX3 as well as \LaTeXe. This will probably
% change, but for testing it will do.
%    \begin{macrocode}
\toks_new:N \everypar
%<*package>
\AtBeginDocument 
%</package>
%<*initex>
\execute_at_text_begin:n 
%</initex>
  {
    \toks_set:Nn \tex_everypar:D
      {
        \toks_use:N \everypar
        \tex_hskip:D \l_xgalley_start_skip \scan_stop:
      }
  }
%    \end{macrocode}
%\end{macro}
%
% To ensure that odd things do not happen with \LaTeXe.
%    \begin{macrocode}
%<*package>
\cs_set_nopar:Npn \@parboxrestore {
  \@arrayparboxrestore
  \cs_set_eq:NN \\ \@normalcr
  \UseInstance { justification } { default }
}
%</package>
%</support>
%    \end{macrocode}
%
%\subsection{Templates: layer two (internal dimensions)}
%
% For the absolute template, any user-provided left margin is
% always relative to the current indent level.
%    \begin{macrocode}
%<*code>    
\DeclareTemplateCode { measure } { absolute } { 1 }
  {
    left-margin  = \l_xgalley_left_margin_dim ,
    right-margin = \l_xgalley_right_margin_dim 
  }
  {
    \AssignTemplateKeys
    \IfNoValueF {#1}
      { 
        \dim_set:Nn \l_xgalley_left_margin_dim 
          { \l_xgalley_margin_width_dim + #1 }
      }
    \dim_set:Nn \l_xgalley_margin_width_dim 
      { \l_xgalley_left_margin_dim }
    \dim_set:Nn \l_xgalley_text_width_dim 
      { 
          \l_xgalley_total_width_dim
        - \l_xgalley_left_margin_dim 
        - \l_xgalley_right_margin_dim 
      } 
    \xgalley_measure_adjust_parshape:
  }
%    \end{macrocode}
%    
% The relative measure is very similar, but is always additive. The
% calculations are therefore made by adjusting the current values.   
%    \begin{macrocode}
\DeclareTemplateCode { measure } { relative } { 1 }
  {
    left-margin  = \l_xgalley_left_margin_dim ,
    right-margin = \l_xgalley_right_margin_dim 
  }
  {
    \AssignTemplateKeys
    \IfNoValueF {#1}
      { 
        \dim_set:Nn \l_xgalley_left_margin_dim {#1}
      }
    \dim_set:Nn \l_xgalley_margin_width_dim 
      { 
          \l_xgalley_margin_width_dim
        + \l_xgalley_left_margin_dim 
      }
    \dim_set:Nn \l_xgalley_text_width_dim 
      { 
          \l_xgalley_text_width_dim
        - \l_xgalley_left_margin_dim 
        - \l_xgalley_right_margin_dim 
      } 
    \xgalley_measure_adjust_parshape:
  }
%    \end{macrocode}
%    
%\subsection{Templates: layer three (paragraph shape)}
%
%    \begin{macrocode}
\DeclareTemplateCode { parshape } { cutout } { 0 }
  {
    forbid-page-break   = \l_xgalley_parshape_no_break_bool    ,
    number-normal-lines = \l_xgalley_parshape_normal_lines_int ,
    on-left-side        = \l_xgalley_parshape_on_left_bool     ,
    parshape-list       = \l_xgalley_parshape_clist
  }
  {
    \AssignTemplateKeys
    \bool_if:NTF \l_xgalley_parshape_on_left_bool
      { \xgalley_parshape_set:N \l_xgalley_par_indent_dim }
      { \xgalley_parshape_set:N \c_zero_dim }
  }
%    \end{macrocode}
%    
%\subsection{Templates: layer four (inside the paragraph)}
%
% The implementation for hyphenation mainly sets low-level values.
% The minimum number of characters after a hyphen is set directly, 
% whereas the number before is not. This is so that 
% \cs{tex_lefthyphenmin:D} can also be used to completely prevent 
% hyphenation.
%    \begin{macrocode}
\DeclareTemplateCode { hyphenation } { std } { 0 } 
  {
    enable                  = \l_xgalley_hyphen_enable_bool    ,
    enable-upper-case       = \l_xgalley_hyphen_uppercase_bool ,
    min-chars-after-hyphen  = \l_xgalley_hyphen_left_int       ,
    min-chars-before-hyphen = \tex_righthyphenmin:D            ,
    penalty                 =
      {
        low    = 
          {
            \int_set:Nn \tex_exhyphenpenalty:D { 51 }
            \int_set:Nn \tex_hyphenpenalty:D   { 51 }
          } ,
        medium = 
          {
            \int_set:Nn \tex_exhyphenpenalty:D { 151 }
            \int_set:Nn \tex_hyphenpenalty:D   { 151 }
          } ,
        high   = 
          {
            \int_set:Nn \tex_exhyphenpenalty:D { 301 }
            \int_set:Nn \tex_hyphenpenalty:D   { 301 }
          } ,
      } ,
  }
  { 
    \AssignTemplateKeys
    \int_set:Nn \tex_lefthyphenmin:D
      { 
        \bool_if:NTF \l_xgalley_hyphen_enable_bool 
          { \l_xgalley_hyphen_left_int  } { -1 } 
      }
    \int_set:Nn \tex_uchyph:D
      { \bool_if:NTF \l_xgalley_hyphen_uppercase_bool { 1 } { 0 } }
  }
%    \end{macrocode}
%
% When working on top of \LaTeXe\ the default for the paragraph
% indent should be picked up from the document. The default itself
% can be swapped out immediately, with the value of the constant
% set up when it's available.
%    \begin{macrocode}
%<*package>    
\EditTemplateDefaults { justification } { std }
  { indent-width = \c_xgalley_parindent_dim  }
\EditTemplateDefaults { justification } { std }
  { indent-width = \c_xgalley_parindent_dim }
\AtBeginDocument {
  \dim_set:Nn \c_xgalley_parindent_dim { \parindent }
}
%</package>
%    \end{macrocode}
%
% The standard justification routine does very little other than set
% primitives renamed. A couple of bits of code are needed for \LaTeXe\
% as well.
%    \begin{macrocode}
\DeclareTemplateCode { justification } { std } { 0 } 
  {
    fill-skip     = \l_xgalley_fill_skip     ,
    indent-width  = \l_xgalley_indent_dim    ,
    left-skip     = \l_xgalley_left_skip     ,
    right-skip    = \l_xgalley_right_skip    ,
    space-skip    = \l_xgalley_space_skip    ,
    start-skip    = \l_xgalley_start_skip    ,
    xspace-skip   = \l_xgalley_xspace_skip
  }
  {
    \AssignTemplateKeys
%<*package>
    \skip_set:Nn \@rightskip { \l_xgalley_right_skip }
%</package>
   }
%    \end{macrocode}
%
% For a single paragraph, much the same but with a save and restore
% system in place.
%    \begin{macrocode}
\DeclareTemplateCode { justification } { single } { 0 } 
  {
    fill-skip     = \l_xgalley_fill_skip     ,
    indent-width  = \l_xgalley_indent_dim    ,
    left-skip     = \l_xgalley_left_skip     ,
    right-skip    = \l_xgalley_right_skip    ,
    space-skip    = \l_xgalley_space_skip    ,
    start-skip    = \l_xgalley_start_skip    ,
    xspace-skip   = \l_xgalley_xspace_skip
  }
  {
    \tl_set:NV \l_xgalley_fill_tl     \l_xgalley_fill_skip
    \tl_set:NV \l_xgalley_indent_tl   \l_xgalley_indent_dim
    \tl_set:NV \l_xgalley_left_tl     \l_xgalley_left_skip
    \tl_set:NV \l_xgalley_right_tl    \l_xgalley_right_skip
    \tl_set:NV \l_xgalley_space_tl    \l_xgalley_space_skip
    \tl_set:NV \l_xgalley_start_tl    \l_xgalley_start_skip
    \tl_set:NV \l_xgalley_xspace_tl   \l_xgalley_xspace_skip
    \AssignTemplateKeys
%<*package>
    \skip_set:Nn \@rightskip { \l_xgalley_right_skip }
%</package>
    \toks_put_right:Nn \everypar
      {
        \cs_set_protected_nopar:Npn \par
          {
            \scan_stop:
            \mode_if_horizontal:T
              {
%<*package>
                \@par
                \@restorepar
%</package>
%<*initex>
                \l_xgalley_par_tl
                \cs_set_protected_nopar:Npn \par { \l_xgalley_par_tl }
%</initex>
                \skip_set:Nn \l_xgalley_fill_skip 
                  { \l_xgalley_fill_tl }
                \dim_set:Nn \l_xgalley_indent_dim
                  { \l_xgalley_indent_tl }
                \skip_set:Nn \l_xgalley_left_skip 
                  { \l_xgalley_left_tl }
                \skip_set:Nn \l_xgalley_right_skip 
                  { \l_xgalley_right_tl }
                \skip_set:Nn \l_xgalley_space_skip 
                  { \l_xgalley_space_tl }
                \skip_set:Nn \l_xgalley_start_skip 
                  { \l_xgalley_start_tl }
                \skip_set:Nn \l_xgalley_xspace_skip   
                  { \l_xgalley_xspace_tl }
              }
          }
        \toks_clear:N \everypar    
      }
   }
%    \end{macrocode}
%
% Implementing the \texttt{complex} justification is actually pretty
% easy, as all of the work is really done elsewhere.
%    \begin{macrocode}
\DeclareTemplateCode { justification } { complex } { 0 } 
  {
    first-paragraph       = \xgalley_justify_first:  ,
    subsequent-paragraphs = \xgalley_justify_ongoing:
  }
  {
    \AssignTemplateKeys
    \xgalley_justify_ongoing:
    \xgalley_justify_first:
  }
%    \end{macrocode}
%    
%    \begin{macrocode}
\DeclareTemplateCode { linebreak }{ std } { 0 } {
  pretolerance         = \tex_pretolerance:D         ,
  tolerance            = \tex_tolerance:D            ,
  linepenalty          = \tex_linepenalty:D          ,
  binoppenalty         = \tex_binoppenalty:D         ,
  relpenalty           = \tex_relpenalty:D           ,
  hbadness             = \tex_hbadness:D             ,
  adjdemerits          = \tex_adjdemerits:D          ,
  doublehyphendemerits = \tex_doublehyphendemerits:D ,
  finalhyphendemerits  = \tex_finalhyphendemerits:D  ,
  hfuzz                = \tex_hfuzz:D                ,
  emergencystretch     = \tex_emergencystretch:D     ,
}
 { \AssignTemplateKeys }
%</code>
%    \end{macrocode}
%
%\end{implementation}