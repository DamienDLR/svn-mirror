% \iffalse
%% File xo-page.dtx (C) Copyright 1999-2000 Frank Mittelbach
%%                  (C) Copyright 2004 2006 Frank Mittelbach, LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the ``xcontents bundle'' (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/cgi-bin/cvsweb.cgi/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %% 
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
%<package>\RequirePackage{l3names}
%<*dtx>
%\fi
\def\GetIdInfo$Id: #1.dtx #2 #3-#4-#5 #6 #7$#8{%
  \def\fileversion{#2}%
  \def\filedate{#3/#4/#5}%
  \ProvidesFile{#1.dtx}[#3/#4/#5 v#2 #8]%
}
%\iffalse
%</dtx>
%\fi
\GetIdInfo$Id$
          {xcontents}
%
% \iffalse
%<*driver>
\documentclass{ltxdoc}
\usepackage{textcomp}
% \usepackage{xparse,xlists,xlists-samples}
% \usepackage{ldcdoc}

% next three definitions are big hacks to run the file
% without the above packages
%
\newcommand\NoValue{\texttt{\textbackslash NoValue}}

\newenvironment{TemplateInterfaceDescription}[1]
  {\subsection{The Template Type `#1'}%
   \begingroup\description
   \def\TemplateArgument##1##2{\item[Arg: ##1]##2\par}%
   \def\TemplateSemantics{\enddescription\endgroup
       \subsubsection*{Semantics}}%
  }
  {\par\bigskip}

\newenvironment{TemplateDescription}[2]
  {\subsection{The Template `#2' (type #1)}%
   \subsubsection*{Attributes}
   \begingroup\description
   \def\TemplateKey##1##2##3##4{\item[##1 (##2)]##3%
     \ifx\TemplateKey##4\TemplateKey\else
         \hskip0ptplus3em\penalty-500\hskip 0pt plus 1filll Default:~##4%
     \fi
     \par}%
   \def\TemplateSemantics{\enddescription\endgroup
       \subsubsection*{Comments}}%
  }
  {\par\bigskip}

 \begin{document}
 \DocInput{xcontents.dtx}
 \end{document}
%</driver>
% \fi
%
%
%
% \title{The \textsf{xcontents} package\thanks{This file
%         has version number \fileversion, last
%         revised \filedate.}}
% \author{FMi}
% \date{\filedate}
%
%  \maketitle
%
% \tableofcontents
%
% \newcommand\keyword[1]{\textsf{#1}}
% \newcommand\template[1]{\textsf{#1}}
% 
% \section{Structuring contents information}
%
% In \LaTeXe{} contents information as stored in files like
% |\jobname.toc|, |\jobname.lot|, etc.\@ is a mixture of structured
% data and unstructured data. For example, the line
%\begin{verbatim}
%\contentsline {section}{\numberline {2}Interfaces}{2}
%\end{verbatim}
% is comparably well-structured and thus allows customized processing
% within the table of contents generation. However, the fact that the
% section number appears as part of the heading text argument (even
% though flagged with the command |\numberline|) makes certain types
% of processing unnecessary difficult. Better would be to provide the
% number (if any) as a separate argument.
%
% In addition to |\contentsline| \LaTeXe{} also allows package writers
% (and in fact authors\footnote{Unfortunately this means that the
% author needs to understand how the structured parts of the contents
% files format their data.} via |\addtocontents|) to add arbitrary
% unstructured material to the contents file. In this way formatting
% of the contents data is spread across a large number of places,
% e.g., some heading commands like chapter add vertical space to the
% list of figure files this way.
%
% As an alternative one could think of sending all contents data to a
% single location and, depending on whether one formats a TOC or a LOF
% this data is analysed differently. As an advantage such a scheme
% would allow to provide some of this information in a single
% presentation, e.g., all figures and tables in a single list or even
% having them presented as part of the TOC.
%
% Another problem with the current data structure is its missing
% support for the preparation of partial TOCs, e.g., TOCs per chapter
% or summary TOCs. Of course this information can be extracted in
% theory from the |.toc| file (and there exist packages that provide
% this functionality) a better support from the start could be
% provided without much (or even any) overhead and should therefore be
% considered.
%
% \subsection{Proposal for a new structure}
%
% A toc like file in the new structure consists of code lines
% containing |\contentsobject|\footnote{To stay in sync with things
% like \texttt{\textbackslash ListItem} this command is probably
% better called \texttt{\textbackslash ContentsObject}.} calls (and
% probably nothing else). Each such |\contentsobject| command receives
% (currently) seven arguments which are the following:
% \begin{description}
% \item[sequence number]
%    Number that is incremented for every contents object being added
%   to the output file.\footnote{At the moment this is a single
%   counter! fix.}  This could be handy if you want to read in a toc
%   file to extract just all bits that refer to the current chapter
%   (there are other ways but this seems a nice one).
%
% \item[level]
%   This is the level of the hierarchy at which the the object lives
%   according to the template that generated it (e.g., if generated from
%   a heading template it would be the value of the keyword
%   \keyword{level-id}.
%
% \iffalse % no longer true!!!
% \item[object number on level]
%   This is the unformatted number of the counter of the generating
%   object, ie it denotes the number of objects already on this level.
%   --- in cases of unnumbered headings, say, where no counter is
%   stepped this shows the same number as before which is a little
%   weird. perhaps it should show \NoValue{} in that case. anyway,
%   right now this is not used but i thought it could be handy to
%   have.
% \fi
%
% \item[type]
%   This is the object type (a name) which is used to construct the
%   \template{contentsobject} template instance name when formatting
%   it. In many cases this will be the instance name, but in special
%   situation a \template{processcontents} instance can set up a
%   \keyword{collection-id} in which case the name will be the string
%   concatenation of both.
%
%   Note that on a given `level' there might be objects of a different
%   type requiring different handling.
%
% \item[object number]
%   This is the object number string as generated from |\the...| counter
%   representation or \NoValue{} if the object doesn't have a number
%   associated with it.
%
% \item[text]
%   The object text, e.g., the heading title.
%
% \item[extra text]
%   Extra text (such as the authors name in a multi-article
%   collection) or \NoValue{} (currently not used by the existing
%   templates).
%
% \item[page number]
%   The page number as generated from |\thepage|.
% \end{description}
%
% An example of this new structure would be the following:
%\begin{verbatim}
%\contentsobject {1}{1}{section}{1}{A first section}{}{1}
%\contentsobject {2}{2}{subsection}{1.1}{A first subsection}{}{1}
%\contentsobject {3}{2}{subsection}{1.2}{A second subsection with an
%   awful long title: some text or other to get us going right?}{}{1}
%\contentsobject {4}{3}{subsubsection}{1.2.1}{A direct subsubsection}{}{1}
%\contentsobject {5}{1}{section}{\NoValue }{Heading two as section}{}{1}
%\contentsobject {6}{2}{subsection}{1.3}{With a direct subsection}{}{1}
%\contentsobject {7}{3}{subsubsection}{1.3.1}{And some subsubsection}{}{1}
%\contentsobject {8}{4}{paragraph}{\NoValue }{A runin paragraph}{}{1}
%\contentsobject {9}{4}{paragraph}{\NoValue }{Another runin paragraph}{}{1}
%\contentsobject {10}{5}{subparagraph}{\NoValue }{Another runin 
%  subparagraph}{}{1}
%\contentsobject {11}{5}{subparagraph}{\NoValue }{Another runin
%  subparagraph number two}{}{1}
%\contentsobject {12}{5}{subparagraph}{\NoValue }{Another runin
%  subparagraph number three}{}{1}
%\contentsobject {13}{1}{section}{2}{And another section}{}{1}
%\contentsobject {14}{2}{subsection}{2.1}{that has a subsection}{}{1}
%\contentsobject {15}{1}{section}{3}{A test}{}{2}
%\contentsobject {16}{2}{subsection}{\NoValue }{with an unnumbered
%  subsection}{}{2}
%\end{verbatim}
% 
% \section{Interfaces}
%
% The \texttt{contentsobject} template type has the same arguments as
% the |\contentsobject| command in the above data structure except that
% the third argument (type) is missing since it is used to produce the
% instance name.\footnote{For clarity it might be better to make this
% the first argument of \texttt{\textbackslash contentsobject}!}
%
% \begin{TemplateInterfaceDescription}{contentsobject}
%
%   \TemplateArgument{1}
%       {The sequence number of this object in the data structure}
%
%   \TemplateArgument{2}
%       {Level of this contents object in the hierarchy}
%
%   \TemplateArgument{3}
%       {Object number in the document if present or \NoValue}
%
%   \TemplateArgument{4}
%       {Object text (e.g., heading title)}
%
%   \TemplateArgument{5}
%       {Additional info if present or \NoValue}
%
%   \TemplateArgument{6}
%       {Page Number}
%
%   \TemplateSemantics
%
%    Todays version has quite a mouthful of arguments but perhaps we
%    want even more or different ones. Passing on the level is useful
%    especially if we globally keep the previous level in a variable
%    for inspection. Thus an object can do different actions depending
%    on the level of the previous element.
%
%    The sequence number can be used to find an element fast, e.g., in
%    case one is interested only in all objects belonging to a certain
%    chapter.
%
% \end{TemplateInterfaceDescription}
%
%
% \begin{TemplateDescription}{contentsobject}{gobble}
%
%   \TemplateKey{--}{--}{This template has no keys}{}
%
%   \TemplateSemantics
%     This template is intended for those objects that should be
%     ignored in the current contents list (thus no keys).
%
% \end{TemplateDescription}
%
%
%
% \begin{TemplateDescription}{contentsobject}{std}
%
%   \TemplateKey{pre-v-action}{f0}
%      {What to do before typesetting the object (vertically)}
%      {\texttt{\textbackslash endgraf}}
%
%   \TemplateKey{object-decls}{f0}
%      {General declarations applicable to all or most parts of the
%      object formatting (e.g., font settings)}
%      {do nothing}
%
%   \TemplateKey{object-indent}{l}
%      {Indentation of whole object from left margin.}
%      {0pt}
%
%   \TemplateKey{number-width}{l}
%      {Width of the space reserved for the document object
%      number. Space is reserved regardless of whether or not the
%      number is present.}
%      {}
%
%   \TemplateKey{right-margin-sep}{l}
%      {Distance from right margin for all lines except the last}
%      {25pt}
%
%   \TemplateKey{pnum-width}{l}
%      {Width of the space reserved for the page number (thus defines
%       the maxium width of the last line of the object)}
%      {15pt}
%
%   \TemplateKey{number-format}{f1}
%      {How to format the document object number if present
%       (\texttt{object-decls} still
%       apply unless overwritten)}
%      {set flush left}
%
%   \TemplateKey{title-format}{f1}
%      {How to format the main text (\texttt{object-decls} still
%       apply unless overwritten)}
%      {identity}
%
%   \TemplateKey{pnum-format}{f1}
%      {How to format the page number (\texttt{object-decls} still
%       apply unless overwritten)}
%      {set flush right}
%
%   \TemplateKey{leaders-action}{f0}
%      {What to use as leaders}
%      {typeset `.'}
%
%   \TemplateKey{leaders-sep}{l}
%      {Separation between two `leaders' as defined by 
%       \texttt{leaders-action}}
%      {4pt}
%
%   \TemplateKey{post-v-action}{f0}
%      {What to do after typesetting the object (vertically)}
%      {\texttt{\textbackslash endgraf}}
%
%   \TemplateSemantics
%     This template is closely modelled after the
%     |\@dottedcontentsline| of \LaTeXe{}. It should most likely be
%     redesigned. Stuff like \texttt{leaders-action} should get
%     generalised to something like a \texttt{hmaterial} template
%     instance etc.
% \end{TemplateDescription}
%
%
% \begin{TemplateDescription}{contentsobject}{pnumfirst}
%
%   \TemplateKey{pre-v-action}{f0}
%      {What to do before typesetting the object (vertically)}
%      {\texttt{\textbackslash endgraf}}
%
%   \TemplateKey{object-width}{l}
%      {Width to format the object into.}
%      {\texttt{\textbackslash GalleyTextWidth}}
%
%   \TemplateKey{object-indent}{l}
%      {Indentation of whole object from left margin.}
%      {0pt}
%
%   \TemplateKey{object-decls}{f0}
%      {General declarations applicable to all or most parts of the
%      object formatting (e.g., font settings)}
%      {do nothing}
%
%   \TemplateKey{pnum-width}{l}
%      {Width of the space reserved for the page number. The page
%      number is formatted at the left leaving \texttt{object-width}
%      minus this value for other parts of the object}
%      {30pt}
%
%   \TemplateKey{title-format}{f1}
%      {How to format the main text (\texttt{object-decls} still
%       apply unless overwritten)}
%      {Identity}
%
%   \TemplateKey{pnum-format}{f1}
%      {How to format the page number (\texttt{object-decls} still
%       apply unless overwritten)}
%      {set flush right}
%
%   \TemplateKey{pnum-title-sep}{l}
%      {Separation between box containing the page number and the
%      title text.}
%      {5pt}
%
%   \TemplateKey{post-v-action}{f0}
%      {What to do after typesetting the object (vertically)}
%      {\texttt{\textbackslash endgraf}}
%
%   \TemplateSemantics
%     This template sets the page number to the left of the (heading)
%     text. Therefore it is not appropriate if the contents object is
%     itself numbered and for this reason will warn if it detects an
%     document object number.
% \end{TemplateDescription}
%
%
%
% \begin{TemplateDescription}{contentsobject}{complex}
%
%   \TemplateKey{numbered-setup}{i contentsobject}
%      {Use this `contentsobject' instance if we have a numbered
%      contentsobject to format}
%      {}
%
%   \TemplateKey{unnumbered-setup}{i contentsobject}
%      {Use this `contentsobject' instance if we have an unnumbered
%      contentsobject to format}
%      {}
%
%   \TemplateSemantics
%    This template checks if the contents object is numbered or not
%    and depending on this uses one or the other contentsobject
%    instances. It is provided to support the case where radically
%    different formatting is needed depnding on the existence of the
%    number.
% \end{TemplateDescription}
%
%
%
% \begin{TemplateInterfaceDescription}{processcontents}
%
%   \TemplateArgument{1}{Sequence number of contentsobject that
%    determines the elements that are formatted, or \NoValue}
%   \TemplateSemantics
%     Formats externally collected contents objects according to
%     additionally declared templates.
%
%     If argument is \NoValue{} the whole contents list will be
%     formatted. Otherwise formatting after with the element whose
%     sequence number is given and ends right before the next element
%     that has the same level number with the one specified through
%     the sequence number, e.g., if the sequence number
%     specifies a chapter then all headings belonging to that chapter
%     are potentially formatted (there might be other reasons why some
%     of them are not processed).
%
% \end{TemplateInterfaceDescription}
%
%
% \begin{TemplateDescription}{processcontents}{std}
%
%   \TemplateKey{start-action}{f0}
%      {Action to carry out before processing any contents objects}
%      {Do nothing}
%
%   \TemplateKey{stop-action}{f0}
%      {Action to carry out after processing all contents objects}
%      {Do nothing}
%
%   \TemplateKey{file-name}{n}
%      {Base name of the file in which contents object are stored
%      (default is \texttt{\textbackslash jobname}}
%      {\texttt{\textbackslash jobname}}
%
%   \TemplateKey{file-extension}{n}
%      {Extension of the file in which the contents objects are stored}
%      {}
%
%   \TemplateKey{contents-depth}{c}
%      {Level down to which contents objects are still formatted}
%      {2}
%
%
%   \TemplateKey{collection-id}{n}
%      {String that is prepended to contents object instances names}
%      {Empty}
%
%   \TemplateSemantics
%     Again this is basically providing the functionality of \LaTeXe's
%     |\@starttoc| with the obvious generalisations. As with the rest
%     this needs proper redesign.
%
%  \end{TemplateDescription}
%
% \section{Open Issues}
%
% From Achim B.:
%
% Below is my attempt to define the TOC of the ``Handbook of Mathematical
% Logic'' which is a collection of articles from different authors where
% each chapter has its own TOC. There were three (minor) problems:
% \begin{itemize}
%  \item In the main TOC the extra field is used for the name of the author,
%    so I had to change the template to pass this field as second
%    argument to `title-format'.
% 
%  \item The separation betwenn number and title is annoying for the `part'
%    entries where I had to choose (by trial and error) a fixed width of
%    the number field to get the spacing right.
% 
%  \item There seems to be no way to add spacing under an entry
%    (`post-v-action') to enlarge the space between a part and the first
%    chapter.
% \end{itemize}
% 
%
% \StopEventually{}
% 
% \section{Implementation}
%
% Set up certain defaults including to ignore white space
% within the body of this package.
%    \begin{macrocode}
%<*package>
\RequirePackage{template}
\RequirePackage{galley2}
\IgnoreWhiteSpace
\catcode`\:=11\relax

\DeclareTemplateType{processcontents}{1}
\DeclareTemplateType {contentsobject}{6}

\DeclareTemplate{processcontents}{std}{1}
  {
    start-action     =f0 [] \contents@entry@processing ,
    stop-action      =f0 [] \contents@exit@processing ,
    file-name        =f0 [\jobname] \contents@file ,
    file-extension   =f0   \contents@ext ,
    contents-depth   =c [2] \c@tocdepth,
    collection-id    =n [] \contents@typeid,
  }
  {
   \DoParameterAssignments
   \IfNoValueTF{#1}{\let\contentsobject\contentsobjectall}
       {\let\contentsobject\contentsobjectsome
        \def\startseqnum{#1}}
   \begingroup
     \makeatletter
     \contents@entry@processing
       \UseCollection {contentsobject} \contents@typeid
       \@input{\contents@file.\contents@ext}
     \contents@exit@processing
    \if@filesw
      \expandafter\ifx\csname tf@\contents@ext\endcsname\relax
        \expandafter\newwrite\csname tf@\contents@ext\endcsname
        \edef\@tempa{
          \noexpand\AtEndDocument{
            \immediate\openout
              \csname tf@\contents@ext\endcsname
              \contents@file.\contents@ext\relax
            }
          }
        \@tempa             % not quite the way to do it
      \fi
    \fi
    \@nobreakfalse
  \endgroup
  }




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



\DeclareTemplate{contentsobject}{complex}{6}{
  numbered-setup   =i {contentsobject} \contents@numbered,
  unnumbered-setup =i {contentsobject} \contents@unnumbered,
}
{
    \DoParameterAssignments
    \IfNoValueTF{#3}
       { \contents@unnumbered }
       { \contents@numbered }
    {#1}{#2}{#3}{#4}{#5}{#6}
}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\DeclareTemplate{contentsobject}{gobble}{6}{}{}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\DeclareTemplate{contentsobject}{std}{6}
  {
    pre-v-action     =f0  []         \cobject@v@action,
    object-decls     =f0  []         \cobject@decls,
    object-indent    =L   [0pt]      \cobject@indent,
    number-boxed-boolean =s [true] 
           {\def\cobject@numberbox{\hb@xt@ \cobject@number@width}}
           {\let\cobject@numberbox\relax },
    number-width     =L   [0pt]      \cobject@number@width,
    right-margin-sep =L   [25pt]     \cobject@right@margin@sep,
    pnum-width       =L   [15pt]     \@pnumwidth,
    number-format    =f1  [#1\hfill] \format@number,
    title-format     =f1  [#1]       \format@title,
    pnum-format      =f1  [\hfill#1] \format@pnum,
    leaders-action   =f0  [..]       \cobject@leaders,
    leaders-sep      =L   [4pt]      \cobject@leaders@sep ,
    post-v-action    =f0  []         \cobject@v@post@action,
  }
  {
   \DoParameterAssignments

   \par \cobject@v@action

   \begingroup
     \cobject@decls
%
% old galley impl:
%
%  \setDGPVthing:nn i \@ne
%  \setDGPVdimension:nn l {\cobject@indent+\cobject@number@width}
%  \setDGPVdimension:nn r \cobject@right@margin@sep
%  \setDGPVdimension:nn s { -\cobject@number@width }
%  \setDGPVdimension:nn f {-\cobject@right@margin@sep}
%
% new galley impl:
%
  \skip@\cobject@indent\relax
  \advance\skip@\cobject@number@width\relax
  \xdef \GAL@j@
    {{-\cobject@number@width}
     {\the\skip@}
     {\cobject@right@margin@sep}
     {-\cobject@right@margin@sep}
     {\z@}
     {\z@}
     {\fill}
     {\z@}
             }
  \GAL@prepare@reassign:NN  \GAL@j@  \GAL@j@s
% does not work
%  \appendtoDGPV@internal:Nn \GAL@reassign@list 
%        {\expandafter \setup@paragraph@justification \GAL@j@ }
%
%
%
%     \leftskip \cobject@indent \relax 
%     \rightskip \cobject@right@margin@sep \relax
%     \parfillskip -\rightskip
%     \parindent \leftskip
     \interlinepenalty\@M
%     \advance\leftskip \cobject@number@width \relax
     \leavevmode
%     \null\nobreak \hskip -\leftskip
     \cobject@numberbox
         { \IfNoValueF{#3} {\format@number{#3}} }
     \format@title{#4}\nobreak
     \@tempskipa \cobject@leaders@sep \relax \divide\@tempskipa\tw@
     \leaders
       \hbox{ \hskip\@tempskipa \cobject@leaders \hskip\@tempskipa }
       \hfill
     \nobreak
     \hb@xt@\@pnumwidth{\format@pnum{#6}}%
     \par
   \endgroup

   \cobject@v@post@action

 }


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




\DeclareTemplate{contentsobject}{pnumfirst}{6}
  {
    pre-v-action     =f0  [\endgraf] \cobject@v@action,
    object-width     =l   [\GalleyTextWidth] \dimen@,
    object-indent    =L   [0pt]      \cobject@indent,
    object-decls     =f0  []         \cobject@decls,
    pnum-width       =L   [30pt]     \@pnumwidth,
    title-format     =f1  [#1]       \format@title,
    pnum-format      =f1  [\hss#1]   \format@pnum,
    pnum-title-sep   =L   [5pt]      \cobject@sep,
    post-v-action    =f0  []         \cobject@v@post@action,
  }
  {
   \DoParameterAssignments
%    \end{macrocode}
%
%    We most certainly do want this warning only once 
%    (if at all).
%    \begin{macrocode}
   \IfNoValueF{#3}{\PackageWarningNoLine{xcontents}
        {Heading~ is~ numbered!\MessageBreak
         Is~ this~ design~ appropriate~ in~ that~ case?}}

   \cobject@v@action

   \begingroup
     \GalleyTotalWidth\dimen@                     %%%% <- probably wrong
       %%%% implementation but too
       %%%% late tonight
     \cobject@decls
     \@hangfrom{\hskip \cobject@indent
                \hb@xt@\@pnumwidth{\format@pnum{#6}}
                \hskip \cobject@sep}
         \interlinepenalty \@M \format@title{#4}\@@par
   \endgroup

    \cobject@v@post@action
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\DeclareTemplate{contentsobject}{para}{6}
  {
    h-level-id       =f0             \cobject@hlevelid,
    pre-v-action     =f0  [\endgraf] \cobject@v@action,
    pre-h-action     =f0  []         \cobject@h@action,
    object-decls     =f0  []         \cobject@decls,
    number-format    =f1  [#1]       \format@number,
    title-format     =f1  [#1]       \format@title,
    pnum-format      =f1  [#1]       \format@pnum,
    number-title-sep =L   [5pt]      \cobject@nt@sep,
    pnum-title-sep   =L   [5pt]      \cobject@tpn@sep,

  }
  {
   \DoParameterAssignments

   \ifnum \cobject@hlevelid > \ContentsObjectPreviousLevel
      \cobject@v@action
   \else
      \cobject@h@action
   \fi

   \begingroup
     \cobject@decls
     \IfNoValueF{#3} 
       { \format@number{#3}
         \hskip \cobject@nt@sep
       }
     \format@title{#4}
     \hskip \cobject@tpn@sep
     \format@pnum{#6}
   \endgroup
  }


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\newcommand\contentsobjectsome[3]    % actually has 7 args!
  {
    \ifnum #1<\startseqnum\relax
       \typeout{Not~processing~contentsobject~since~ #1~<~\startseqnum}
      \expandafter\@gobblefive
    \else
      \expandafter\@firstofone
    \fi
    { \let\contentsobject\contentsobjectpart
      \stoplevel#2\relax
      \advance\stoplevel\@ne
      \contentsobject{#1}{#2}{#3}
     }
  }

\newcommand\contentsobjectpart[3]    % actually has 7 args!
  {
    \ifnum #2>\c@tocdepth 
      \typeout{Not~processing~contentsobject~since~ #2~>~\the\c@tocdepth}
      \expandafter\@gobblefive
    \else
      \expandafter\@firstofone
    \fi
    { 
      \ifnum #2<\stoplevel
        \typeout{Not~processing~contentsobject~since~ stop-level~ reached}
        \let\contentsobject\@gobbleseven
        \expandafter\@gobblefive
      \else
         \typeout{Processing~contentsobject~since~ #2~<=~\the\c@tocdepth}
         \expandafter\@firstofone
      \fi
      {
        \global\let\ContentsObjectPreviousLevel\ContentsObjectCurrentLevel
        \gdef\ContentsObjectCurrentLevel{#2}
        \UseInstance{contentsobject}{#3} {#1} {#2}
      }
     }
  }



\newcommand\contentsobjectall[3]    % actually has 7 args!
  {
%
% should the level be checked here (and thus the instance never called
% in certain circumstances) or should it always be checked at the
% contentsobject template level (as in old \@dottedcontentsline)?
%
% at the moment i do it here
%
    \ifnum #2>\c@tocdepth 
      \typeout{Not~doing~tocline~since~ #2~>~\the\c@tocdepth}
      \expandafter\@gobblefive
    \else
      \typeout{Doing~tocline~since~ #2~!>~\the\c@tocdepth}
      \expandafter\@firstofone
    \fi
    { 
      \global\let\ContentsObjectPreviousLevel\ContentsObjectCurrentLevel
      \gdef\ContentsObjectCurrentLevel{#2}
      \UseInstance{contentsobject}{#3} {#1} {#2}
     }
  }


\let\contentsobject\contentsobjectall

\newcount\stoplevel
\def\startseqnum{0}

\long\def\@gobblefive#1#2#3#4#5{}
\long\def\@gobbleseven#1#2#3#4#5#6#7{}

\gdef\ContentsObjectCurrentLevel{-\maxdimen}
\gdef\ContentsObjectPreviousLevel{-\maxdimen}

%    \end{macrocode}
%
%
%    \begin{macrocode}
\newcount\contentsobjectcount
%    \end{macrocode}
%
% \begin{macro}{\addcontentsobject}
%    Write a contents line to the file those extension is given as |#1|.
%    \begin{macrocode}
\newcommand\addcontentsobject[6]{%
  \NEWaddtocontents{#1}{\protect\contentsobject
                     {\the\contentsobjectcount}{#2}{#3}{#4}{#5}{#6}{\thepage}}}
%    \end{macrocode}
% \end{macro}
%
%
%    \begin{macrocode}
\renewcommand\addtocontents[2]{\def\next{#1:#2}\show\next}
\newcommand\NEWaddtocontents[2]{
  \global\advance\contentsobjectcount\@ne
  \protected@write\@auxout
      {\let\label\@gobble \let\index\@gobble \let\glossary\@gobble}
      {\string\@writefile{#1}{#2}}}
%    \end{macrocode}
%
%
% \begin{macro}{\addcontentsline}
%    This is the original \LaTeX{} command which is called from within
%    |\@startsection|. It expects three arguments: the extention of
%    the TOC file, the name of the contents object, and the contents
%    object title. To be able to test the new mechanisms out within
%    \LaTeXe{} we supply the remaining arguments to |\contentsobject|
%    by making suitable guesses. Clearly this can only be regarded as
%    a temporary hack!
%    \begin{macrocode}
\renewcommand*\addcontentsline[3]{
%    \end{macrocode}
%    For the forth argument we need to know if we have to produce a
%    number; one indication is that the title line contains the
%    command |\numberline|. If not then we have a toc entry without a
%    number (this can in fact only happen if |\addcontentsline| was
%    supplied manually). But if it contains it we still have to be careful (see
%    below).
%    \begin{macrocode}
  \in@{\numberline}{#3}
%    \end{macrocode}
%    \begin{macrocode}
  \NEWaddtocontents{#1}{\protect\contentsobject
%    \end{macrocode}
%    The counter |\contentsobjectcount| is incremented by
%    |\NEWaddtocontents| so all we have to do is supply its value at
%    this point.
%    \begin{macrocode}
      {\the\contentsobjectcount}
%    \end{macrocode}
%    We retrieve the level by storing it in commands like
%    |\l@v@lsection| etc.\ and simply calling those commands.
%    \begin{macrocode}
      {\csname l@v@l#2\endcsname}
%    \end{macrocode}
%    The third argument is the name of the contents object.
%    \begin{macrocode}
      {#2}
%    \end{macrocode}
%    The forth argument should receive the number unless it was
%    something like |\chapter*| or unless the level is higher than
%    |\c@secnumdepth |.
%    \begin{macrocode}
      {\ifin@
        \ifnum \csname l@v@l#2\endcsname >\c@secnumdepth 
          \protect\NoValue
        \else
          \csname the#2 \endcsname
        \fi
       \else
         \protect\NoValue
       \fi
      }
%    \end{macrocode}
%
%    \begin{macrocode}
      {#3}
%    \end{macrocode}
%
%    \begin{macrocode}
      {\protect\NoValue}
%    \end{macrocode}
%
%    \begin{macrocode}
      {\thepage}}}
%    \end{macrocode}
%
%    \begin{macrocode}
\renewcommand\numberline[1]{}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\l@v@lpart{-1}
\def\l@v@lchapter{0}
\def\l@v@lsection{1}
\def\l@v@lsubsection{2}
\def\l@v@lsubsubsection{3}
\def\l@v@lparagraph{4}
\def\l@v@lsubparagraph{4}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\l@v@lfigure{0}
\def\l@v@ltable{0}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\catcode`\:=12\relax
%</package>
%    \end{macrocode}
%
%
% \subsubsection{Table of contents etc}
%
%    \begin{macrocode}
%<*signature>
\RequirePackage{xcontents}
\RequirePackage{xparse}[2000/01/26]
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareDocumentCommandInterface 
    \tableofcontents {maintoc} { o }    % user supplied title
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareDocumentCommandInterface
    \summarytableofcontents {summarytoc} { o }  % user supplied title
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareDocumentCommandInterface
    \listoffigures {lof} { o }  % user supplied title
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareDocumentCommandInterface
    \listoftables {lot} { o }  % user supplied title
%    \end{macrocode}
%
%    \begin{macrocode}
  \endinput
--- remaining lines are sample implementations for the above ---
%</signature>
%    \end{macrocode}
%
%    \begin{macrocode}
%<*layout>
%    \end{macrocode}
%
%
%    \begin{macrocode}
\DeclareDocumentCommandImplementation
         {maintoc} { 1 }    % user supplied title
         {
           \chapter*{Contents}      % tmp
           \UseInstance {processcontents} {maintoc} \NoValue
         }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareDocumentCommandImplementation
     {summarytoc} { 1 }  % user supplied title
         {
           \chapter*{Overview}    % tmp
%           \UseInstance {heading} {summarytoc} 
%                \BooleanTrue \NoValue \NoValue {#1}
           \UseInstance {processcontents} {summarytoc} \NoValue
         }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareDocumentCommandImplementation
    {lof} { 1 }  % user supplied title
         {
           \chapter*{List of Figures}    % tmp
           \UseInstance {processcontents} {lof} \NoValue
         }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareDocumentCommandImplementation
    {lot} { 1 }  % user supplied title
         { o }                    % user supplied title
         {
           \chapter*{List of Tables}    % tmp
           \UseInstance {processcontents} {lot} \NoValue
         }
%    \end{macrocode}
%
%
%    \begin{macrocode}
%</layout>
%    \end{macrocode}
%
%
%    \begin{macrocode}
\endinput
%    \end{macrocode}
%
%
% \Finale
%
