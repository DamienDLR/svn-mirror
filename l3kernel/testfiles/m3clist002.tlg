This is a generated file for the LaTeX (2e + expl3) validation system.
Don't change this file in any respect.
%% \CharacterTable
%%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%%   Digits        \0\1\2\3\4\5\6\7\8\9
%%   Exclamation   \!     Double quote  \"     Hash (number) \#
%%   Dollar        \$     Percent       \%     Ampersand     \&
%%   Acute accent  \'     Left paren    \(     Right paren   \)
%%   Asterisk      \*     Plus          \+     Comma         \,
%%   Minus         \-     Point         \.     Solidus       \/
%%   Colon         \:     Semicolon     \;     Less than     \<
%%   Equals        \=     Greater than  \>     Question mark \?
%%   Commercial at \@     Left bracket  \[     Backslash     \\
%%   Right bracket \]     Circumflex    \^     Underscore    \_
%%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%%   Right brace   \}     Tilde         \~}
%%
Author: Will Robertson
============================================================
TEST 1: creation
============================================================
Defining \l_a_clist on line ...
Defining \g_b_clist on line ...
Empty --
Empty --
============================================================
============================================================
TEST 2: clearing
============================================================
macro:->
macro:->test a
macro:->
============================================================
undefined
undefined
macro:->
macro:->
undefined
undefined
============================================================
============================================================
TEST 3: clear_new
============================================================
Defining \l_c_clist on line ...
Defining \g_d_clist on line ...
macro:->
macro:->
macro:->test a
macro:->
macro:->
macro:->
============================================================
============================================================
TEST 4: (g)set_eq
============================================================
macro:->abc
macro:->abc
macro:->abc
============================================================
macro:->abc
undefined
macro:->
============================================================
macro:->abc
macro:->abc
macro:->abc
============================================================
============================================================
TEST 5: concat
============================================================
macro:->abc,def,uvw,xyz
macro:->
============================================================
macro:->ABC,DEF,UVW,XYZ
macro:->
============================================================
============================================================
TEST 6: gconcat
============================================================
macro:->abc,def,uvw,xyz
============================================================
macro:->ABC,DEF,UVW,XYZ
============================================================
============================================================
TEST 7: set N
============================================================
> \l_tmpa_clist=macro:
->\a ,{,\b },{c##},\par ,d \e .
<argument> ...ar ,,d \e }\cs_show:N \l_tmpa_clist 
                                                  \clist_show:N \l_tmpa_clis...
l.164 }
Comma list \l_tmpa_clist contains the items (without outer braces):
>  {\a }
>  {,\b }
>  {c##}
>  {\par }
>  {d \e }.
<argument> ...\clist_show_aux:w \l_clist_show_tl }
l.164 }
> \l_tmpa_clist=macro:
->a,a,a.
<argument> ...\l_tmpa_tl \cs_show:N \l_tmpa_clist 
                                                  \tl_put_right:Nn \l_tmpa_t...
l.164 }
> \l_tmpa_clist=macro:
->a,a,a,{####}\c_space_tl .
<argument> ...\l_tmpa_tl \cs_show:N \l_tmpa_clist 
                                                  \clist_set:Nx \l_tmpa_clis...
l.164 }
> \l_tmpa_clist=macro:
->a,a,a,{##}  a,a,a,{##}.
<argument> ...mpa_clist }\cs_show:N \l_tmpa_clist 
l.164 }
============================================================
============================================================
TEST 8: set c
============================================================
> \l_tmpa_clist=macro:
->\a ,{,\b },{c##},\par ,d \e .
<argument> ...ar ,,d \e }\cs_show:N \l_tmpa_clist 
                                                  \clist_show:N \l_tmpa_clis...
l.178 }
Comma list \l_tmpa_clist contains the items (without outer braces):
>  {\a }
>  {,\b }
>  {c##}
>  {\par }
>  {d \e }.
<argument> ...\clist_show_aux:w \l_clist_show_tl }
l.178 }
> \l_tmpa_clist=macro:
->a,a,a.
<argument> ...\l_tmpa_tl \cs_show:N \l_tmpa_clist 
                                                  \tl_put_right:Nn \l_tmpa_t...
l.178 }
> \l_tmpa_clist=macro:
->a,a,a,{####}\c_space_tl .
<argument> ...\l_tmpa_tl \cs_show:N \l_tmpa_clist 
                                                  \clist_set:cx {l_tmpa_clis...
l.178 }
> \l_tmpa_clist=macro:
->a,a,a,{##}  a,a,a,{##}.
<argument> ...mpa_clist }\cs_show:N \l_tmpa_clist 
l.178 }
============================================================
============================================================
TEST 9: gset N
============================================================
> \g_tmpa_clist=macro:
->\a ,{,\b },{c##},\par ,d \e .
<argument> ...r ,,d \e }}\cs_show:N \g_tmpa_clist 
                                                  \clist_show:N \g_tmpa_clis...
l.192 }
Comma list \g_tmpa_clist contains the items (without outer braces):
>  {\a }
>  {,\b }
>  {c##}
>  {\par }
>  {d \e }.
<argument> ...\clist_show_aux:w \l_clist_show_tl }
l.192 }
> \g_tmpa_clist=macro:
->a,a,a.
<argument> ...l_tmpa_tl }\cs_show:N \g_tmpa_clist 
                                                  \tl_put_right:Nn \l_tmpa_t...
l.192 }
> \g_tmpa_clist=macro:
->a,a,a,{####}\c_space_tl .
<argument> ...l_tmpa_tl }\cs_show:N \g_tmpa_clist 
                                                  {\clist_gset:Nx \g_tmpa_cl...
l.192 }
> \g_tmpa_clist=macro:
->a,a,a,{##}  a,a,a,{##}.
<argument> ...pa_clist }}\cs_show:N \g_tmpa_clist 
l.192 }
============================================================
============================================================
TEST 10: gset c
============================================================
> \g_tmpa_clist=macro:
->\a ,{,\b },{c##},\par ,d \e .
<argument> ...r ,,d \e }}\cs_show:N \g_tmpa_clist 
                                                  \clist_show:N \g_tmpa_clis...
l.206 }
Comma list \g_tmpa_clist contains the items (without outer braces):
>  {\a }
>  {,\b }
>  {c##}
>  {\par }
>  {d \e }.
<argument> ...\clist_show_aux:w \l_clist_show_tl }
l.206 }
> \g_tmpa_clist=macro:
->a,a,a.
<argument> ...l_tmpa_tl }\cs_show:N \g_tmpa_clist 
                                                  \tl_put_right:Nn \l_tmpa_t...
l.206 }
> \g_tmpa_clist=macro:
->a,a,a,{####}\c_space_tl .
<argument> ...l_tmpa_tl }\cs_show:N \g_tmpa_clist 
                                                  {\clist_gset:cx {g_tmpa_cl...
l.206 }
> \g_tmpa_clist=macro:
->a,a,a,{##}  a,a,a,{##}.
<argument> ...pa_clist }}\cs_show:N \g_tmpa_clist 
l.206 }
============================================================
============================================================
TEST 11: put left
============================================================
Comma list \l_tmpa_clist contains the items (without outer braces):
>  {\l_tmpc_tl \par }
>  {\ERROR B\par }
>  {FULL EXPANSION\par }
>  {\l_tmpb_tl \par }
>  {\ERROR A\par }.
<argument> ...\clist_show_aux:w \l_clist_show_tl }
l.221 }
============================================================
============================================================
TEST 12: put right
============================================================
Comma list \l_tmpa_clist contains the items (without outer braces):
>  {\ERROR A\par }
>  {\l_tmpb_tl \par }
>  {FULL EXPANSION\par }
>  {\ERROR B\par }
>  {\l_tmpc_tl \par }.
<argument> ...\clist_show_aux:w \l_clist_show_tl }
l.234 }
============================================================
============================================================
TEST 13: gput left
============================================================
Comma list \g_b_clist contains the items (without outer braces):
>  {\l_tmpc_tl \par }
>  {\ERROR B\par }
>  {FULL EXPANSION\par }
>  {\l_tmpb_tl \par }
>  {\ERROR A\par }.
<argument> ...\clist_show_aux:w \l_clist_show_tl }
l.249 }
============================================================
============================================================
TEST 14: gput right
============================================================
Comma list \g_b_clist contains the items (without outer braces):
>  {\ERROR A\par }
>  {\l_tmpb_tl \par }
>  {FULL EXPANSION\par }
>  {\ERROR B\par }
>  {\l_tmpc_tl \par }.
<argument> ...\clist_show_aux:w \l_clist_show_tl }
l.264 }
============================================================
============================================================
TEST 15: if_empty (expect Y/Y/N NB. different than seq!!)
============================================================
YES
YES
NO
============================================================
============================================================
TEST 16: get (expect an error first)
============================================================
Empty --
Empty --
a\par 
Empty --
b\par 
============================================================
============================================================
TEST 17: push (same as put_left)
============================================================
Comma list \l_tmpa_clist contains the items (without outer braces):
>  {\ERROR C\par }
>  {\ERROR B\par }
>  {\ERROR A\par }.
<argument> ...\clist_show_aux:w \l_clist_show_tl }
l.311 }
============================================================
============================================================
TEST 18: gpush (same as gput_left)
============================================================
Comma list \g_b_clist contains the items (without outer braces):
>  {\ERROR C\par }
>  {\ERROR B\par }
>  {\ERROR A\par }.
<argument> ...\clist_show_aux:w \l_clist_show_tl }
l.322 }
============================================================
============================================================
TEST 19: if_in (expect 2 first false)
============================================================
FALSE
FALSE
TRUE
FALSE
TRUE
TRUE
============================================================
============================================================
TEST 20: if_in with empty (check this behaviour)
============================================================
FALSE
============================================================
============================================================
TEST 21: if_in (T)
============================================================
TRUE
TRUE
TRUE
============================================================
============================================================
TEST 22: if_in (F)
============================================================
FALSE
FALSE
============================================================
============================================================
TEST 23: map_inline
============================================================
c
b\par 
a
c
b\par 
a
aa
bb\par 
cc
============================================================
============================================================
TEST 24: map_function
============================================================
c
b\par 
a
c
b\par 
a
aa
bb\par 
cc
============================================================
============================================================
TEST 25: map_variable
============================================================
c
b\par 
a
c
b\par 
a
aa
bb\par 
cc
============================================================
============================================================
TEST 26: pop
============================================================
c
Comma list \l_tmpa_clist contains the items (without outer braces):
>  {b\par }
>  {a}.
<argument> ...\clist_show_aux:w \l_clist_show_tl }
l.421 }
b\par 
Comma list \l_tmpa_clist contains the items (without outer braces):
>  {a}.
<argument> ...\clist_show_aux:w \l_clist_show_tl }
l.421 }
a
Comma list \l_tmpa_clist is empty
> .
<argument> ...l_tmpa_clist  is empty}\tl_show:n {}
l.421 }
============================================================
Comma list \l_tmpa_clist is empty
> .
<argument> ...l_tmpa_clist  is empty}\tl_show:n {}
l.421 }
============================================================
a
Comma list \l_tmpa_clist contains the items (without outer braces):
>  {b,c}.
<argument> ...\clist_show_aux:w \l_clist_show_tl }
l.421 }
b,c
Comma list \l_tmpa_clist is empty
> .
<argument> ...l_tmpa_clist  is empty}\tl_show:n {}
l.421 }
============================================================
============================================================
TEST 27: gpop
============================================================
local->c.
global->.
Comma list \l_tmpa_clist contains the items (without outer braces):
>  {b\par }
>  {a}.
<argument> ...\clist_show_aux:w \l_clist_show_tl }
l.452 }
local->b\par .
global->.
Comma list \l_tmpa_clist contains the items (without outer braces):
>  {a}.
<argument> ...\clist_show_aux:w \l_clist_show_tl }
l.452 }
local->a.
global->.
Comma list \l_tmpa_clist is empty
> .
<argument> ...l_tmpa_clist  is empty}\tl_show:n {}
l.452 }
============================================================
local->.
global->.
Comma list \l_tmpa_clist is empty
> .
<argument> ...l_tmpa_clist  is empty}\tl_show:n {}
l.452 }
============================================================
============================================================
TEST 28: remove_duplicates
============================================================
b\par ,c\par ,a\par 
b\par ,c\par ,a\par ,c\par ,b\par ,a\par 
b\par ,c\par ,a\par 
b\par ,c\par ,a\par 
============================================================
============================================================
TEST 29: remove_all
============================================================
b\par ,c\par ,c\par ,b\par 
b\par ,c\par ,a\par ,c\par ,b\par ,a\par 
b\par ,c\par ,c\par ,b\par 
b\par ,c\par ,c\par ,b\par 
============================================================
============================================================
TEST 30: set_from_seq
============================================================
macro:->{h,},{f g},e,\par \foo ,a
macro:->{h,},{f g},e,\par \foo ,a
macro:->
macro:->{h,},{f g},e,\par \foo ,a
============================================================
============================================================
TEST 31: trim_spaces (internal function)
============================================================
a,b,c,d,####
{a},{ b},{c},{ },{ d },####
============================================================
============================================================
TEST 32: clist_item
============================================================
|a|b|c |d|||d|c |b|a||
|a|b|c |d|||d|c |b|a||
============================================================
