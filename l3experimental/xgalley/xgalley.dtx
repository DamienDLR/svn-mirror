% \iffalse
% 
%% File: xgalley.dtx Copyright (C) 1999-2001, 2004-2009 Frank Mittelbach
%%                             (C) 2010,2011 The LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the "l3experimental bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
%
%<*driver|package>
\RequirePackage{xparse,xtemplate}
\GetIdInfo$Id$
  {L3 Experimental galley}
%</driver|package>
%<*driver>
\documentclass[full]{l3doc}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
% 
% \title{^^A
%   The \textsf{xgalley} package\\ Galley^^A
%   \thanks{This file describes v\fileversion, last revised \filedate.}^^A
% }
%         
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released \filedate}
%
% \maketitle
%
% \begin{documentation}
%
% \section{Introduction}
%
% In \LaTeX3 terminology a galley is a rectangular area which receives
% text and other material filling it from top. The vertically extend of 
% a galley is normally not restricted: instead certain chunks are taken 
% off the top of an already partially filled galley to form columns or 
% similar areas on a page. This process is typically asynchronous but 
% there are ways to control or change its behaviour.
% 
% Examples for galleys are \enquote{the main galley}, where the
% continuous document data gets formatted into  and from which columns
% and pages are constructed, and \enquote{vertical box galleys}, such
% as the body of a minipage environment. The latter galleys are 
% typically not split after formatting, though there can be exceptions.
% 
% \section{Formatting layers}
%
% The present module is mainly concerned with the formatting of text
% in galleys. The mechanism by which this is achieved uses four 
% (somewhat) distinct layers, some of which can be addressed using the
% templates provided here.
% 
% \subsection{Layer one: external dimensions}
%
% The bottom layer of the system is the external dimensions of the
% galley. Normally only the horizontal dimension is fixed externally,
% while the vertical (filling) dimension is unspecified. The external
% dimensions are fixed when starting a new galley, and are therefore
% not modifiable within the galley. 
%
% There are no templates for setting this layer directly, although the
% external values are influenced by other parts of the system (for 
% example when creating minipage environments).
% 
% \subsection{Layer two: internal dimensions}
%
% The second layer is the internal dimensions of the galley: the
% \emph{measure} used for paragraph text and the position of the 
% paragraph relative to the edges of the galley.
% 
% This layer is normally accessed by higher-level templates
% \emph{via} the object type \texttt{measure}. Changes made using
% level two templates will often extend for large parts of a document
% (up to and including the entire document).
% 
% \subsection{Layer three: paragraph shape}
%
% The third layer defines the paragraph shape within the measure as
% provided by the second layer. In the absence of any specification
% for that layer the paragraph shape used will be that of a
% rectangular area of the width of the current measure.
% 
% There are some restrictions imposed on the shape of a paragraph by the
% underlying \TeX{} mechanisms. For example, cut out sections in
% paragraphs can be specified from the top of the paragraph but not from
% the bottom.
% 
% \subsection{Layer four: formatting inside the paragraph}
%
% The forth layer deals with the paragraph formatting aspects such as 
% hyphenation and justification within the paragraph (this is sometimes
% referred to as \enquote{\texttt{h\&j}} or \enquote{\texttt{hj}}).
%
% \section{Templates}
% 
% \subsection{Layer two: internal dimensions}
% 
% \begin{TemplateInterfaceDescription}{measure}
%   \TemplateArgument{1}{left margin}
%   \TemplateArgument{2}{right margin}
%   \TemplateSemantics
%   Sets the width available to typeset material within the galley.
%   The \meta{left margin} and \meta{right margin} values are used in the
%   adjustment to over-ride any given in the template. Depending upon
%   the template in use, the margins may be absolute (relative only to the
%   edges of the galley) or relative (taking account of |measure| adjustments
%   already made). The template applies to the galley from the point of
%   us forward, unless over-ridden by another use of the |measure|
%   object type.
% \end{TemplateInterfaceDescription}
% 
% \begin{TemplateDescription}{measure}{absolute}
%   \TemplateKey{left-margin}{length}
%     {^^A
%       The distance from the left edge of the galley to the left edge of 
%       the area for typeset material. A negative value will cause the
%       typeset material to extend beyond the edge of the galley.^^A
%     }
%     {0 pt}     
%   \TemplateKey{right-margin}{length}
%     {^^A
%       The distance from the right edge of the galley to the right edge of 
%       the area for typeset material. A negative value will cause the
%       typeset material to extend beyond the edge of the galley.^^A
%     }
%     {0 pt}
%   \TemplateSemantics
%   This template sets up the typesetting area such that typeset material
%   runs from |left-margin| away from the left edge of the galley to
%   |right-margin| away from the right edge of the galley. Both of these
%   distances are absolute, \emph{i.e.}~no account is taken of previous
%   |measure| settings. Either on or both values may be negative, in which
%   case the typeset material will protrude outside of the edges of the
%   galley. The arguments for the |measure| object may be used to over-ride
%   one or both of the template margin values.
% \end{TemplateDescription}
% 
% \begin{TemplateDescription}{measure}{relative}
%   \TemplateKey{left-margin}{length}
%     {^^A
%       The distance from the previous left margin of the typeset material
%       within the galley to the new position of the left margin. A negative
%       value will cause the new margin to be \enquote{outside} of the 
%       previous one, and \emph{may} cause the typeset material to 
%       protrude outside of the edge of the galley.
%     }
%     {0 pt}     
%   \TemplateKey{right-margin}{length}
%     {^^A
%       The distance from the previous right margin of the typeset material
%       within the galley to the new position of the right margin. A negative
%       value will cause the new margin to be \enquote{outside} of the 
%       previous one, and \emph{may} cause the typeset material to 
%       protrude outside of the edge of the galley.
%     }
%     {0 pt}
%   \TemplateSemantics
%   This template sets up the typesetting area such that it has margins
%   |left-margin| and |right-margin| within those previously set. For a
%   galley within no previous margins, this will result in margins relative
%   to the edges of the galley. Within a galley in which the |measure| has
%   already been set, using the |relative| template will indent the typeset
%   material relative to the existing margins.
%   Either on or both values may be negative, in which
%   case the typeset material may protrude outside of the edges of the
%   galley. The arguments for the |measure| object may be used to over-ride
%   one or both of the template margin values.
% \end{TemplateDescription}
%
% \subsection{Layer three: paragraph shape}
% 
% \begin{TemplateInterfaceDescription}{parshape}
%   \TemplateArgument{1}{lines}
%   \TemplateArgument{2}{distance}
%   \TemplateSemantics
%   An interface for setting shape of the current paragraph based on
%   a number of \meta{lines} to consider and a \meta{distance} to use as
%   the basis for shaping. These two parameters are generic: it is up to
%   the template used to define how these values are used in the fine control
%   of paragraph shape. It is possible that one or both will be ignored
%   in constructing the paragraph shaping. This object type applies only
%   to a single paragraph.
% \end{TemplateInterfaceDescription}
% 
% \begin{TemplateDescription}{parshape}{hang}
%   \TemplateKey{indent}{length}
%     {^^A
%       The hanging indent from either the left- or right-hand margin
%       (as determined by \texttt{on-left-side}).^^A
%     }
%     {0 pt}
%   \TemplateKey{on-left-side}{boolean}
%     {^^A
%       If \texttt{true}, causes the hanging indent to be on the left-hand
%       side of the paragraph.^^A
%     }
%     {true}
%   \TemplateKey{number-lines}{integer}
%     {The number of lines of full width before hanging begins.}
%     {1}
%  \TemplateSemantics
%  Sets the paragraph shape such that the after a number of full-width
%  lines, specified by |number-lines|, the paragraph is indented by the
%  |indent| from a margin. If |on-left-side| is |true| this indent will be
%  from the left-hand margin, otherwise it will be from the right. In either
%  case, the indent is relative to the edge of the current |measure| and
%  may be negative (in which case an outdent will result). The template
%  arguments |lines| and |distance| may be used to over-ride the template
%  |number-lines| and |indent| values, respectively. Thus it is possible
%  to create a hanging paragraph which is determined by the size of other
%  material during the typesetting process.
% \end{TemplateDescription}
% 
% \begin{TemplateDescription}{parshape}{initial}
%   \TemplateKey{indent}{length}
%     {^^A
%       The indent for the intial lines from either the left- or right-hand
%       margin (as determined by \texttt{on-left-side}).^^A
%     }
%     {0 pt}
%   \TemplateKey{on-left-side}{boolean}
%     {^^A
%       If \texttt{true}, causes the indent to be on the left-hand
%       side of the paragraph.^^A
%     }
%     {true}
%   \TemplateKey{number-lines}{integer}
%     {The number of lines of indented lines before full-width line begins.}
%     {2}
%   \TemplateSemantics
%   Sets the paragraph shape such that the first |number-lines| lines
%   are indented by the |indent| given, before lines of full width begin.
%   If |on-left-side| is |true| this indent will be
%   from the left-hand margin, otherwise it will be from the right. In either
%   case, the indent is relative to the edge of the current |measure| and
%   may be negative (in which case an outdent will result). The template
%   arguments |lines| and |distance| may be used to over-ride the template
%   |number-lines| and |indent| values, respectively. Thus it is possible
%   to create an initially-indented paragraph which is determined by the
%   size of other material during the typesetting process.
% \end{TemplateDescription}
% 
% \begin{TemplateDescription}{parshape}{std}
%   \TemplateSemantics
%   Sets a rectangular paragraph shape which occupies the full width
%   specified by the |measure|. Both of the object type arguments are
%   ignored by this template. It is therefore intended as a
%   \enquote{do nothing} template for use where a paragraph shape is required
%   but where no special formatting is needed.
% \end{TemplateDescription}
% 
% \subsection{Layer four: formatting inside the paragraph}
% 
% \begin{TemplateInterfaceDescription}{hyphenation}
%   \TemplateSemantics
%   Controls whether hyphenation is attempted within the current
%   galley. This object type may also alter the degree to which hyphenation
%   is encouraged by manipulating the underlying \TeX{} parameters. This
%   object type applies to the galley from the point of use forward.
% \end{TemplateInterfaceDescription}
% 
% \begin{TemplateDescription}{hyphenation}{std}
%   \TemplateKey{enable}{boolean}
%     {Switches all hyphenation on or off.}
%     {true}
%   \TemplateKey{enable-upper-case}
%     {boolean}
%     {^^A
%       Switches hyphenation on or off for words beginning with upper case
%       letters.^^A
%     }
%     {true}
%   \TemplateKey{penalty}{choice}
%     {^^A
%       Sets the degree to which \TeX{} is discouraged from undertaking
%       hyphenation, from the choices |low|, |medium| and |high|.^^A
%     }
%     {low}
%   \TemplateSemantics
%   Determines both whether hyphenation is allowed at all, and if so to
%   what degree it is discouraged. Setting |penalty| to |high| does not
%   prevent hyphenation: this is only done if |enable| is set |false|.
% \end{TemplateDescription}
% 
% \begin{TemplateInterfaceDescription}{justification}
%   \TemplateSemantics
%   Controls the nature of justification undertaken within the galley.
%   The template applies from the point of use forward.
% \end{TemplateInterfaceDescription}
% 
% \begin{TemplateDescription}{justification}{std}
%   \TemplateKey{end-skip}{skip}
%     {The skip inserted to fill the last line of a paragraph.}
%     {0 pt plus 1 fil}
%   \TemplateKey{fixed-word-spacing}{boolean}
%     {^^A
%       Determines whether inter-word spacing has a stretch component (for
%       non-monospaced fonts.^^A
%     }
%     {false}
%   \TemplateKey{indent-width}{length}
%     {^^A
%       The length of the indent inserted at the start of the first line of a
%       new paragraph.^^A
%     }
%     {}
%   \TemplateKey{left-skip}{skip}
%     {^^A
%       The skip between the left margin of the galley and the left edge of a
%       paragraph.^^A
%     }
%     {0 pt}
%   \TemplateKey{right-skip}{skip}
%     {^^A
%       The skip between the right margin of the galley and the right edge of a
%       paragraph.^^A
%     }
%     {0 pt}
%   \TemplateKey{start-skip}{skip}
%     {^^A
%       The skip inserted in addition to |indent-width| at the start of a
%       paragraph.^^A
%     }
%     {0 pt}
%   \TemplateSemantics
%   The |std| template for justification provides rubber lengths
%   at the start and end of the paragraph and at each side of the paragraph.
%   It also allows for both flexible and fixed inter-word spacing. The
%   interaction between the settings is demonstrated in the selection of
%   standard instances provided.
% \end{TemplateDescription}
% 
% \begin{InstanceDescription}{justification}{justified}{std}
%   \InstanceKey{indent-width}{15 pt}
%   \InstanceSemantics
%   Sets paragraphs fully-justified with the first line indented by
%   |15 pt|.
% \end{InstanceDescription}
% 
% \begin{InstanceDescription}{justification}{noindent}{std}
%   \InstanceKey{end-skip}{15 pt plus 1 fil}
%   \InstanceKey{indent-width}{0 pt}
%   \InstanceSemantics
%   Sets paragraphs fully-justified with no indent for the first line. To
%   ensure that paragraphs have some visual distinction, the |end-skip| is
%   set to insert some space in all cases.
% \end{InstanceDescription}
% 
% \begin{InstanceDescription}{justification}{centered}{std}
%   \InstanceKey{end-skip}{0 pt}
%   \InstanceKey{fixed-word-spacing}{true}
%   \InstanceKey{indent-width}{0 pt}
%   \InstanceKey{left-skip}{0 pt plus 1 em}
%   \InstanceKey{right-skip}{0 pt plus 1 em}
%   \InstanceSemantics
%   Centres typeset material such that hyphenation will still occur and
%   such that very short lines are discouraged. This is similar to the
%   \LaTeXe{} \pkg{ragged2e} \env{Centering} environment.
% \end{InstanceDescription}
% 
% \begin{InstanceDescription}{justification}{ragged-left}{std}
%   \InstanceKey{end-skip}{0 pt}
%   \InstanceKey{fixed-word-spacing}{true}
%   \InstanceKey{indent-width}{0 pt}
%   \InstanceKey{left-skip}{0 pt plus 2 em}
%   \InstanceKey{right-skip}{0 pt}
%   \InstanceSemantics
%   Typesets material with a ragged left margin such that hyphenation will
%   still occur and such that very short lines are discouraged. This is
%   similar to the \LaTeXe{} \pkg{ragged2e} \env{RaggedLeft} environment.
% \end{InstanceDescription}
% 
% \begin{InstanceDescription}{justification}{ragged-right}{std}
%   \InstanceKey{end-skip}{0 pt}
%   \InstanceKey{fixed-word-spacing}{true}
%   \InstanceKey{indent-width}{0 pt}
%   \InstanceKey{left-skip}{0 pt}
%   \InstanceKey{right-skip}{0 pt plus 2 em}
%   \InstanceSemantics
%   Typesets material with a ragged right margin such that hyphenation will
%   still occur and such that very short lines are discouraged. This is
%   similar to the \LaTeXe{} \pkg{ragged2e} \env{RaggedLeft} environment.
% \end{InstanceDescription}
% 
% \begin{InstanceDescription}{justification}{center}{std}
%   \InstanceKey{end-skip}{0 pt}
%   \InstanceKey{fixed-word-spacing}{true}
%   \InstanceKey{indent-width}{0 pt}
%   \InstanceKey{left-skip}{0 pt plus 1 fil}
%   \InstanceKey{right-skip}{0 pt plus 1 fil}
%   \InstanceSemantics
%   Centres typeset material such that hyphenation is strongly discouraged
%   and short lines are allowed. This template is suited to centring arbitrary
%   material (such as boxes) rather than centring text. In the later case, the
%   |centered| instance should be used.
% \end{InstanceDescription}
% 
% \begin{TemplateDescription}{justification}{compound}
%   \TemplateKey{first-paragraph}{instance}
%     {Justification for the first paragraph.}
%     {}
%   \TemplateKey{other-paragraphs}{instance}
%     {Justification for the remaining paragraphs.}
%     {}
%   \TemplateSemantics
%   Here, both keys should themselves be instances of the |justification|
%   template. The |compound| template is used to set up a single
%   \enquote{non-standard} paragraph followed by \eqnuote{standard} ones.
%   For example, it can be used to ensure that one |noindent| paragraph is
%   then followed by |std| justification.
% \end{TemplateDescription}
% 
% \begin{TemplateInterfaceDescription}{line-breaking}
%   \TemplateSemantics
%   Controls the line breaking attempted by \TeX{} when typesetting
%   material for the galley. This does not include whether words are
%   hyphenated, which is handled separately.
% \end{TemplateInterfaceDescription}
% 
% \begin{TemplateDescription}{line-breaking}{std}
%   \TemplateKey{badness}{integer}
%      {^^A
%        Boundary that if exceeded will cause \TeX{} to report an
%        underfull line.^^A
%      }
%      {1000}
%   \TemplateKey{binop-penalty}{integer}
%      {^^A
%        Penalty charged if an inline math formula is broken at a
%        binary operator.^^A
%      }
%      {700}
%   \TemplateKey{double-hyphen-demerits}{integer}
%      {^^A
%        Extra demerit charge of two (or more) lines in succession end
%        in a hyphen.^^A
%      }
%      {10 000}
%   \TemplateKey{emergency-stretch}{length}
%      {^^A
%        Additional stretch assumed for each line if no better line breaking
%        can be found without it. This stretch is not actually added to lines,
%        so its use may result in underfull box warnings.^^A
%      }
%      {0 pt}
%   \TemplateKey{final-hyphen-demerits}{integer}
%      {Extra demerit charge if the second last line is hyphenated.}
%      {5000}
%   \TemplateKey{fuzz}{length}
%      {Boundary below overfull lines are not reported.}
%      {0.1 pt}
%   \TemplateKey{mismatch-demerits}{integer}
%      {^^A
%        Extra demerit charge if two visually incompatible lines follow
%        each other.^^A
%      }
%      {10000}
%   \TemplateKey{line-penalty}{integer}
%      {^^A
%        Extra penalty charged per line in the paragraph. By making
%        this penalty higher \TeX{} will try harder to produce compact
%        paragraphs.^^A
%      }
%      {10}
%   \TemplateKey{pretolerance}{integer}
%      {^^A
%        Maximum tolerance allowed for individual lines to break the
%        paragraph without attempting hyphenation.^^A
%      }
%      {100}
%   \TemplateKey{relation-penalty}{integer}
%      {^^A
%        Penalty charged if an inline math formula is broken at a
%        relational symbol.^^A
%      }
%      {500}
%   \TemplateKey{tolerance}{integer}
%      {^^A
%        Maximum tolerance allowed for individual lines when breaking a
%        paragraph while attempting hyphenation (if this limit can't be
%        met \key{emergency-stretch} comes into play).^^A
%      }
%      {200}
%   \TemplateSemantics
%   This is an interface to the underlying \TeX{} system for determining
%   line breaking.
% \end{TemplateDescription}
% 
% \subsection{Between paragraphs}
% 
% \begin{TemplateInterfaceDescription}{interpar}
%   \TemplateSemantics
%   This template determines the material inserted in between paragraphs.
%   This may be nothing, spacing or some other material (for example a rule).
% \end{TemplateInterfaceDescription}
% 
% \begin{TemplateDescription}{interpar}{std}
%   \TemplateKey{vspace}{skip}
%     {Vertical space between paragraphs.}
%     {0 pt plus 1 pt}
%   \TemplateSemantics
%   This template applies to all subsequent paragraph breaks. The vertical
%   space specified by \key{vspace} is inserted between each paragraph.
% \end{TemplateDescription}
% 
% \begin{TemplateDescription}{interpar}{single}
%   \TemplateKey{vspace}{skip}
%     {Vertical space between paragraphs.}
%     {0 pt plus 1 pt}
%   \TemplateSemantics
%   This template applies to the next inter-paragraph break. The vertical
%   space specified by \key{vspace} is inserted at the next break, after which
%   the previous-prevailing inter-paragraph situation is restored.
% \end{TemplateDescription}
% 
% \begin{TemplateInterfaceDescription}{page-breaking}
%   \TemplateSemantics
%   This object type determines how \TeX{} determines the behaviour when
%   the page-breaking algorithm is calculating whether to break up a paragraph.
%   Thus for example an instance of this object type may prevent breaks within
%   a paragraph, forbid widows or orphans, \emph{etc.} 
% \end{TemplateInterfaceDescription}
% 
% \begin{TemplateDescription}{page-breaking}{std}
%   \TemplateKey{badness}{integer}
%      {^^A
%        Boundary that if exceeded will cause \TeX{} to report an
%        underfull vertical box.^^A
%      }
%      {1000}
%   \TemplateKey{broken-penalty}{integer}
%      {Penalty for page breaking after a hyphenated line.}
%      {100}
%   \TemplateKey{club-penalty}{integer}
%      {Penalty for generating a club line when page breaking.}
%      {150}
%   \TemplateKey{display-widow-penalty}{integer}
%      {^^A
%        Penalty for breaking between to leave a widow line before display
%        math.^^A
%      }
%      {50}
%   \TemplateKey{fuzz}{length}
%      {Boundary below which overfull vertical boxes are not reported.}
%      {0.1 pt}
%   \TemplateKey{interline-penalty}{integer}
%      {Penalty for breaking between lines in a paragraph.}
%      {0}
%   \TemplateKey{pre-display-penalty}{integer}
%      {Penalty for breaking between immediately before display math material.}
%      {10 000}
%   \TemplateKey{post-display-penalty}{integer}
%      {Penalty for breaking between immediately after display math material.}
%      {0}
%   \TemplateKey{widow-penalty}{integer}
%      {Penalty for generating a widow line when page breaking.}
%      {150}
%   \TemplateSemantics
%   This template provides an interface to the underlying \TeX{} mechanism for
%   controlling page breaking. The template applies on an ongoing basis to all
%   paragraphs after the template is used.
% \end{TemplateDescription}
% 
% \begin{InstanceDescription}{page-breaking}{std}{std}
%   \InstanceSemantics
%   Sets paragraphs such that they can break with widows and orphans
%   discouraged but not prevented. Breaks are possible after display math
%   material but no immediately before it.
% \end{InstanceDescription}
% 
% \begin{InstanceDescription}{page-breaking}{nobreak}{std}
%   \InstanceKey{interline-penalty}{10 000}
%   \InstanceKey{post-display-penalty}{10 000}
%   \InstanceSemantics
%   Sets paragraphs such that they cannot be broken at all (as far as is
%   possible in \TeX{}).
% \end{InstanceDescription}
% 
% \begin{InstanceDescription}{page-breaking}{nolone}{std}
%   \InstanceKey{club-penalty}{10 000}
%   \InstanceKey{display-widow-penalty}{10 000}
%   \InstanceKey{widow-penalty}{10 000}
%   \InstanceSemantics
%   Sets paragraphs such that they cannot be broken to leave a club or
%   widow line (as far as is possible in \TeX{}).
% \end{InstanceDescription}
% 
% \begin{TemplateDescription}{page-breaking}{single}
%   \TemplateKey{badness}{integer}
%      {^^A
%        Boundary that if exceeded will cause \TeX{} to report an
%        underfull vertical box.^^A
%      }
%      {1000}
%   \TemplateKey{broken-penalty}{integer}
%      {Penalty for page breaking after a hyphenated line.}
%      {100}
%   \TemplateKey{club-penalty}{integer}
%      {Penalty for generating a club line when page breaking.}
%      {150}
%   \TemplateKey{display-widow-penalty}{integer}
%      {^^A
%        Penalty for breaking between to leave a widow line before display
%        math.^^A
%      }
%      {50}
%   \TemplateKey{fuzz}{length}
%      {Boundary below which overfull vertical boxes are not reported.}
%      {0.1 pt}
%   \TemplateKey{interline-penalty}{integer}
%      {Penalty for breaking between lines in a paragraph.}
%      {0}
%   \TemplateKey{pre-display-penalty}{integer}
%      {Penalty for breaking between immediately before display math material.}
%      {10 000}
%   \TemplateKey{post-display-penalty}{integer}
%      {Penalty for breaking between immediately after display math material.}
%      {0}
%   \TemplateKey{widow-penalty}{integer}
%      {Penalty for generating a widow line when page breaking.}
%      {150}
%   \TemplateSemantics
%   This template provides an interface to the underlying \TeX{} mechanism for
%   controlling page breaking. The template applies only to the next paragraph,
%   and can thus be used to achieve effects such as non-breaking paragraphs.
% \end{TemplateDescription}
% 
% \begin{InstanceDescription}{page-breaking}{single-std}{single}
%   \InstanceSemantics
%   Sets the next paragraph such that it can break with widows and orphans
%   discouraged but not prevented. Breaks are possible after display math
%   material but no immediately before it.
% \end{InstanceDescription}
% 
% \begin{InstanceDescription}{page-breaking}{single-nobreak}{single}
%   \InstanceKey{interline-penalty}{10 000}
%   \InstanceKey{post-display-penalty}{10 000}
%   \InstanceSemantics
%   Sets the next paragraph such that it cannot be broken at all (as far as is
%   possible in \TeX{}).
% \end{InstanceDescription}
% 
% \begin{InstanceDescription}{page-breaking}{single-noclub}{single}
%   \InstanceKey{club-penalty}{10 000}
%   \InstanceSemantics
%   Sets the next paragraph such that it cannot be broken to leave a club
%   line (as far as is possible in \TeX{}).
% \end{InstanceDescription}
% 
% \begin{InstanceDescription}{page-breaking}{single-nolone}{single}
%   \InstanceKey{club-penalty}{10 000}
%   \InstanceKey{display-widow-penalty}{10 000}
%   \InstanceKey{widow-penalty}{10 000}
%   \InstanceSemantics
%   Sets the next paragraph such that it cannot be broken to leave a club or
%   widow line (as far as is possible in \TeX{}).
% \end{InstanceDescription}
% 
% \begin{InstanceDescription}{page-breaking}{single-nowidow}{single}
%   \InstanceKey{display-widow-penalty}{10 000}
%   \InstanceKey{widow-penalty}{10 000}
%   \InstanceSemantics
%   Sets the next paragraph such that it cannot be broken to leave a
%   widow line (as far as is possible in \TeX{}).
% \end{InstanceDescription}
%
% \section{Code interfaces}
%
% \subsection{Galley width}
%
% \begin{variable}{\l_galley_width_dim}
%   The total width of a galley, set either by the page geometry code
%   for the main vertical galley or when creating an independent galley,
%   such as a minipage.
% \end{variable}
%
% \subsection{Measure}
%
% \begin{variable}{\l_galley_hoffset_dim}
%   The horizontal offset of the start of a line of text from the edge
%   of the galley. This may be negative if the measure is set to overlap
%   the text beyond the edge of the galley.
% \end{variable}
%
% \begin{variable}{\l_galley_text_width_dim}
%   The width of a line of text within the galley, taking account of
%   any margins added. This may be larger than \cs{l_galley_width_dim}
%   if the margins are negative.
% \end{variable}
%
% \subsection{Paragraph shape}
%
% \begin{function}{\galley_set_parshape_cutout:nnnn}
%   \begin{syntax}
%     \cs{galley_set_parshape_cutout:nnnn} \Arg{normal lines}
%     ~~\Arg{cutout lines} \Arg{left indent} \Arg{right indent}
%   \end{syntax}
%   Sets the current paragraph shape to include a cut-out section on
%   one or both sides. The paragraph shape is set such that there
%   are initially \meta{normal lines} which have width and indent as
%   set by the measure. There are then \meta{cutout lines} which have
%   the \meta{left indent} and \meta{right indent} specified, before
%   the normal measure is resumed for the rest of the paragraph. Both
%   the \meta{normal lines} and \meta{cutout lines} are given as integer
%   expressions, while the \meta{left indent} and \meta{right indent}
%   are dimension expressions. Typically, one of these \meta{indents}
%   will be $0$\,pt. The paragraph shape will remain in force within
%   the current \TeX{} group level unless the \texttt{measure} is reset
%   or the \cs{galley_parshape_set_reset:} function is used.
% \end{function}
%
% \begin{function}{\galley_set_parshape_hang:nnn}
%   \begin{syntax}
%     \cs{galley_set_parshape_hang:nnn} \Arg{lines}
%     ~~\Arg{left indent} \Arg{right indent}
%   \end{syntax}
%   Sets the current paragraph shape to create a hanging paragraph.
%   The paragraph shape is set such that there are \meta{lines} which
%   have width and indent as set by the measure. The rest of the 
%   paragraph will then be set with the \meta{left indent} and 
%   \meta{right indent} specified, thus creating a hanging paragraph.
%   The number of \meta{lines} is given as integer expression, while the 
%   \meta{left indent} and \meta{right indent} are dimension expressions.
%   Typically, one of these \meta{indents} will be $0$\,pt. The 
%   paragraph shape will remain in force within the current \TeX{} group
%   level unless the \texttt{measure} is reset or the 
%   \cs{galley_parshape_set_reset:} function is used.
% \end{function}
%
% \begin{function}{\galley_parshape_set_reset:}
%   \begin{syntax}
%     \cs{galley_parshape_set_reset:}
%   \end{syntax}
%   Alters the definition of the \cs{par} token such that any paragraph
%   shape in force will only last for the current paragraph. At the end
%   of the current paragraph, typesetting will revert to the definition
%   set up by the latest \texttt{measure} template.
% \end{function}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{xgalley} Implementation}
%
% At the implementation level, there are a number of challenges which
% have to be overcome in order to make the galley easy to use at the
% designer and user levels. Inserting material into the main vertical
% list is in many ways an irreversible operation. Inserting items as
% they appear in the source is therefore not desirable. Instead,
% inserting vertical-mode material needs to be delayed until the start
% of the \enquote{next} paragraph. This is particularly notable for
% invisible items such as whatsits and specials, which will otherwise
% cause changes in spacing. Delaying insertion enables user-supplied
% settings to override design settings in a reliable fashion. This can
% be achieved as the design-level material can be ignored if a user
% value is supplied. There is a need to allow proper nesting of 
% galleys, which means that all of the above needs to be set up so that
% it can be saved and restored. All of these manipulations require
% altering the meaning of the \cs{par} token, which is particularly 
% awkward as \TeX{} inserts a token \emph{called} \cs{par} rather than
% one with a particular meaning. This makes moving \cs{par} to somewhere
% \enquote{safe} extremely challenging.
% 
% Added to all of this complexity, there is a need to deal with 
% \enquote{display-like} material. The most obvious example is the way
% lists are handled. These use \cs{par} tokens to achieve the correct
% appearance, but at the same time
% \begin{verbatim}
%   Text
%   \begin{itemize}
%     \item An item
%   \end{itemize}
%   More text
% \end{verbatim}
% should form one visual paragraph while
% \begin{verbatim}
%   Text
%   \begin{itemize}
%     \item An item
%   \end{itemize}
%   
%   More text
% \end{verbatim}
% should be shown as two paragraphs. This requires an additional level
% of handling so that the \cs{par} token used to end the list in the
% first case does not start a new paragraph in a visual sense while the
% second does.
% 
% Another factor to bear in mind is that \cs{tex_everypar:D} may be
% executed inside a group. For example, a paragraph starting
% \begin{verbatim}
%   {Text} here
% \end{verbatim}
% will insert the tokens such that the current group level is $1$
% higher for \enquote{Text} than for \enquote{here}. The result of this
% is that it's very important to watch how flags are set and reset. This
% can only be done reliably on a global level, which then has a knock-on
% effect on the rest of the implementation.
% 
% At a \TeX{} level, settings can only apply to the current paragraph,
% but conceptually there is a need to allow for both single-paragraph
% and \enquote{running} settings. Whenever the code switches galley
% level both of these need to be correctly saved.
%
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%   
%    \begin{macrocode}
\ProvidesExplPackage
  {\filename}{\filedate}{\fileversion}{\filedescription}
%    \end{macrocode} 
%    
% \subsection{Support items}
%
% \begin{macro}{\galley_leave_vmode:}
%   The standard mode to leave vertical mode, starting a paragraph.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_leave_vmode:
  { \tex_unhbox:D \c_empty_box }
%    \end{macrocode}
% \end{macro}
%    
% \subsection{Local data structures}
%
% Getting the galley system to work correctly requires a mix of local
% and global data structures. The local structures are those which are
% in some way tided to grouping in the document.  For example, setting
% which logically apply to only a single paragraph or to an environment
% fall into this category. Some of these variables are only required
% for carrying template settings or as part of calculations: the values
% are used to set \TeX{} primitives and are then not needed. However, it
% is clearer to use a series of named values rather than scratch space
% so that the flow of the code is clearer.
% 
% \begin{variable}{\l_galley_width_dim}
%  The external size of a galley is the stored in the \TeX{} primitive
%  \cs{tex_hsize:D}, which is renamed. This will only ever be reset by
%  the code constructing a new galley, for example the start of a
%  minipage. This value will be set for the main galley by the page 
%  layout system.
%    \begin{macrocode}
\cs_new_eq:NN \l_galley_width_dim \tex_hsize:D
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\l_galley_hoffset_dim}
% \begin{variable}{\l_galley_left_margin_dim}
% \begin{variable}{\l_galley_right_margin_dim}
% \begin{variable}{\l_galley_text_width_dim}
%   Altering the measure within a galley requires two settings: the
%   margins to add on the left and right. The net result of one or more
%   adjustments is stored as two further dimensions: the width of a line
%   of text within the galley and an offset from the edge of the galley.
%   The later will be from the left margin when text is typeset left to 
%   right.
%
%   When used as a package on to of \LaTeXe{} the parameters there are
%   picked up.
%    \begin{macrocode}
\cs_set_eq:NN \l_galley_hoffset_dim      \@totalleftmargin
\cs_set_eq:NN \l_galley_left_margin_dim  \leftmargin
\cs_set_eq:NN \l_galley_right_margin_dim \rightmargin
\cs_set_eq:NN \l_galley_text_width_dim   \linewidth
%    \end{macrocode}
% \end{variable}
% \end{variable}
% \end{variable}
% \end{variable}
%
% \begin{variable}{\l_galley_parshape_tl}
%   Paragraph shape is used within the galley to achieve a number of
%   effects, such as hanging paragraphs and cutouts. \TeX{} will reset the
%   paragraph shape at the end of each paragraph. For this reason, a
%   number of the \cs{tex_par:D} primitives are applied within a 
%   |{|~\ldots~|}| construct. This keeps the reset local but still calls
%   the paragraph builder to actually create the necessary output.
%    \begin{macrocode}
\tl_new:N  \l_galley_parshape_tl
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\l_galley_parshape_indent_dim}
% \begin{variable}{\l_galley_parshape_lines_int}
% \begin{variable}{\l_galley_parshape_on_left_bool}
%   The templates for paragraph shape require some information on what
%   to actually do. This information is saved in the following variables.
%    \begin{macrocode}
\dim_new:N  \l_galley_parshape_indent_dim
\int_new:N  \l_galley_parshape_lines_int
\bool_new:N \l_galley_parshape_on_left_bool
%    \end{macrocode}
% \end{variable}
% \end{variable}
% \end{variable}
%
% \begin{variable}{\l_galley_hyphen_enable_bool}
% \begin{variable}{\l_galley_hyphen_uppercase_bool}
%   Turning hyphenation on and off requires two switches to turn 
%   hyphenation on and off. These are exposed by the template.
%    \begin{macrocode}
\bool_new:N \l_galley_hyphen_enable_bool
\bool_new:N \l_galley_hyphen_uppercase_bool
%    \end{macrocode}
% \end{variable}
% \end{variable}
%
% \begin{variable}{\l_galley_hyphen_right_int}
% \begin{variable}{\l_galley_hyphen_left_int}
%   The minimum number of letters required for hyphenation is a 
%   language-dependent setting. As a result, these variables should
%   be set by language not by the galley. Only the left hyphen 
%   value is needed by the galley, so the right value can simply be
%   set equal to the primitive.
%    \begin{macrocode}
\cs_new_eq:NN \l_galley_hyphen_right_int \tex_righthyphenmin:D
\int_new:N \l_galley_hyphen_left_int
\int_set:Nn \l_galley_hyphen_left_int { \tex_lefthyphenmin:D }
%    \end{macrocode}
% \end{variable}
% \end{variable}
%
% \begin{variable}{\l_galley_fixed_spacing_bool}
% \begin{variable}{\l_galley_par_indent_dim}
% \begin{variable}{\l_galley_par_start_skip}
%   Non-primitive variables used in the paragraph justification code.
%    \begin{macrocode}
\bool_new:N \l_galley_fixed_spacing_bool
\dim_new:N \l_galley_par_indent_dim
\skip_new:N \l_galley_par_start_skip
%    \end{macrocode}
% \end{variable}
% \end{variable}
% \end{variable}
%
% \begin{macro}{\galley_justification_first:}
% \begin{macro}{\galley_justification_other:}
%   For the \texttt{compound} template for justification, there is a need
%   to save instance types.
%    \begin{macrocode}
\cs_new_protected:Npn \galley_justification_first: { }
\cs_new_protected:Npn \galley_justification_other: { }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{variable}{\l_galley_vspace_single_skip}
%   When setting the vertical space between paragraphs on a one-off basis,
%   there needs to be somewhere to store the information before the 
%   global assignment.
%    \begin{macrocode}
\skip_new:N \l_galley_vspace_single_skip
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\l_galley_display_begin_par_vpenalty_tl}
% \begin{variable}{\l_galley_display_begin_par_vspace_tl}
% \begin{variable}{\l_galley_display_begin_vpenalty_tl}
% \begin{variable}{\l_galley_display_begin_vspace_tl}
% \begin{variable}{\l_galley_display_end_par_vpenalty_tl}
% \begin{variable}{\l_galley_display_end_par_vspace_tl}
% \begin{variable}{\l_galley_display_end_vpenalty_tl}
% \begin{variable}{\l_galley_display_end_vspace_tl}
%   The code to deal with the start and end of display material needs a
%   number of settings, all of which are optional. They are therefore
%   stored as token lists even though the \enquote{natural} data types
%   here are integers and skips.
%    \begin{macrocode}
\tl_new:N \l_galley_display_begin_par_vpenalty_tl
\tl_new:N \l_galley_display_begin_par_vspace_tl
\tl_new:N \l_galley_display_begin_vpenalty_tl
\tl_new:N \l_galley_display_begin_vspace_tl
\tl_new:N \l_galley_display_end_par_vpenalty_tl
\tl_new:N \l_galley_display_end_par_vspace_tl
\tl_new:N \l_galley_display_end_vpenalty_tl
\tl_new:N \l_galley_display_end_vspace_tl
%    \end{macrocode}
% \end{variable}
% \end{variable}
% \end{variable}
% \end{variable}
% \end{variable}
% \end{variable}
% \end{variable}
% \end{variable}
% 
% \subsection{Global data structures}
%
% In contrast to the local structures outlined above, there are a second
% set of data items which need to be set globally if the galley is to
% work correctly with the various \enquote{difficult} cases outlined 
% earlier. In these cases, the galley code has to deal with
% document-level grouping by providing \enquote{storage} versions of 
% each of the data items. Some of the global items are per-paragraph
% values, whereas others can apply to a number of paragraphs. The later
% have to exist in two versions: one for the current paragraph and a
% second to store the \enquote{running} value.
% 
% \begin{variable}{\g_galley_indent_next_bool}
% \begin{variable}{\l_galley_indent_next_bool}
%   A global flag is needed for suppressing indentation of the next
%   paragraph. This does not need a \enquote{running} version since that
%   should be handled using the \texttt{justification} object: the two
%   concepts are related but not identical. The flag here is needed in
%   cases such as the very first paragraph in a galley or immediately
%   following a heading.
%    \begin{macrocode}
\bool_new:N \g_galley_indent_next_bool
\bool_new:N \l_galley_indent_next_bool
%    \end{macrocode}
% \end{variable}
% \end{variable}
% 
% \begin{variable}{\g_galley_nobreak_next_bool}
% \begin{variable}{\l_galley_nobreak_next_bool}
%   Dealing with the no-break flag is pretty much the same as the case
%   for the indent: this applies on a single paragraph basis.
%    \begin{macrocode}
\bool_new:N \g_galley_nobreak_next_bool
\bool_new:N \l_galley_nobreak_next_bool
%    \end{macrocode}
% \end{variable}
% \end{variable}
% 
% \begin{variable}{\g_galley_restore_running_tl}
% \begin{variable}{\l_galley_restore_running_tl}
%   When a parameter is altered from the \enquote{running} value to a 
%   different \enquote{current} one, there needs to be a method to restore
%   the \enquote{running} value. This is done by adding the necessary 
%   assignment to a token list, which can be executed when needed. At the 
%   same time, this information is itself part of the galley parameter 
%   structure, and so there has to be a local save version.
%    \begin{macrocode}
\tl_new:N \g_galley_restore_running_tl
\tl_new:N \l_galley_restore_running_tl
%    \end{macrocode}
% \end{variable}
% \end{variable}
%
% \begin{variable}{\g_galley_whatsit_next_tl}
% \begin{variable}{\g_galley_whatsit_previous_tl}
% \begin{variable}{\l_galley_whatsit_next_tl}
% \begin{variable}{\l_galley_whatsit_previous_tl}
%   Whatsits only apply on a per-paragraph basis and so there is no need
%   to differentiate between current and running values. However, there
%   is a need to differentiate between whatsits that attach to the
%   previous (completed) paragraph and those that attach to the next 
%   paragraph.
%    \begin{macrocode}
\tl_new:N \g_galley_whatsit_next_tl
\tl_new:N \g_galley_whatsit_previous_tl
\tl_new:N \l_galley_whatsit_next_tl
\tl_new:N \l_galley_whatsit_previous_tl
%    \end{macrocode}
% \end{variable}
% \end{variable}
% \end{variable}
% \end{variable}
%
% \begin{variable}{\g_galley_vpenalty_int}
% \begin{variable}{\l_galley_vpenalty_int}
%   The penalty between paragraphs is a global object as it may need to
%   be set after environments, \emph{etc.}
%    \begin{macrocode}
\int_new:N \g_galley_vpenalty_int
\int_new:N \l_galley_vpenalty_int
%    \end{macrocode}
% \end{variable}
% \end{variable}
%
% \begin{variable}{\g_galley_vpenalty_user_tl}
% \begin{variable}{\l_galley_vpenalty_user_tl}
%   The user may want to over-ride the penalty for a break between
%   paragraphs, for example to prevent a break when the overall design
%   allows one. This is handled using an additional penalty.
%    \begin{macrocode}
\tl_new:N \g_galley_vpenalty_user_tl
\tl_new:N \l_galley_vpenalty_user_tl
%    \end{macrocode}
% \end{variable}
% \end{variable}
%
% \begin{variable}{\g_galley_vspace_skip}
% \begin{variable}{\l_galley_vspace_skip}
%   The space between paragraphs is similar to the penalty: it is a global
%   concept.
%    \begin{macrocode}
\skip_new:N \g_galley_vspace_skip
\skip_new:N \l_galley_vspace_skip
%    \end{macrocode}
% \end{variable}
% \end{variable}
%
% \begin{variable}{\g_galley_vspace_user_tl}
% \begin{variable}{\l_galley_vspace_user_tl}
%   Arbitrary vertical space can be inserted by the user on a one-off
%   basis. This is used in place of any running space between paragraphs.
%    \begin{macrocode}
\tl_new:N \g_galley_vspace_user_tl
\tl_new:N \l_galley_vspace_user_tl
%    \end{macrocode}
% \end{variable}
% \end{variable}
%
% \begin{variable}{\l_galley_brokenpenalty_tl}
% \begin{variable}{\l_galley_clubpenalty_tl}
% \begin{variable}{\l_galley_displaywidowpenalty_tl}
% \begin{variable}{\l_galley_vbadness_tl}
% \begin{variable}{\l_galley_vfuzz_tl}
% \begin{variable}{\l_galley_interlinepenalty_tl}
% \begin{variable}{\l_galley_postdisplaypenalty_tl}
% \begin{variable}{\l_galley_predisplaypenalty_tl}
% \begin{variable}{\l_galley_widowpenalty_tl}
%   Local settings for single-paragraph line break control.
%    \begin{macrocode}
\tl_new:N \l_galley_brokenpenalty_tl
\tl_new:N \l_galley_clubpenalty_tl
\tl_new:N \l_galley_displaywidowpenalty_tl
\tl_new:N \l_galley_vbadness_tl
\tl_new:N \l_galley_vfuzz_tl
\tl_new:N \l_galley_interlinepenalty_tl
\tl_new:N \l_galley_postdisplaypenalty_tl
\tl_new:N \l_galley_predisplaypenalty_tl
\tl_new:N \l_galley_widowpenalty_tl
%    \end{macrocode}
% \end{variable}
% \end{variable}
% \end{variable}
% \end{variable}
% \end{variable}
% \end{variable}
% \end{variable}
% \end{variable}
% \end{variable}
%
% \subsection{Independent galley levels}
%
% As well as the main vertical list, independent galleys are required
% for items such as minipages and marginal notes. Each of these galleys
% requires an independent set of global data structures. This is
% achieved by storing the data structures in \emph{local} variables. The
% later are only used to save and restore the global value, and so \TeX{}
% grouping will manage the values correctly. This implies that each
% galley level must form a group: galley levels are tided to vertical
% boxes and so this is a reasonable requirements.
% 
% \begin{macro}{\galley_initialise_variables:}
%   At the start of a galley level, both the global and local variables
%   will need to be reset to standard values. For example, the measure 
%   is set to the galley width and any paragraph shape is cleared.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_initialise_variables:
  {
    \dim_zero:N \l_galley_hoffset_dim
    \dim_zero:N \l_galley_left_margin_dim
    \dim_zero:N \l_galley_right_margin_dim
    \dim_set:Nn \l_galley_text_width_dim { \l_galley_width_dim }
    \bool_gset_false:N \g_galley_indent_next_bool  
    \bool_gset_false:N \g_galley_nobreak_next_bool
    \tl_gclear:N \g_galley_restore_running_tl
    \tl_gclear:N \g_galley_vpenalty_user_tl
    \tl_gclear:N \g_galley_vspace_user_tl
    \cs_gset_eq:NN \galley_start_paragraph: \galley_start_paragraph_first:
  }
%    \end{macrocode}
% \end{macro} 
% 
% \begin{macro}{\galley_save_parameters:}
% \begin{macro}{\galley_restore_parameters:}
%   Saving and restoring parameters is carried out by a series of copy
%   functions. 
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_save_parameters:
  {
    \bool_set_eq:NN \l_galley_indent_next_bool 
      \g_galley_indent_next_bool
    \bool_set_eq:NN \l_galley_nobreak_next_bool 
      \g_galley_nobreak_next_bool
    \tl_set_eq:NN \l_galley_restore_running_tl 
      \g_galley_restore_running_tl
    \int_set_eq:NN \l_galley_vpenalty_int 
      \g_galley_vpenalty_int
    \tl_set_eq:NN \l_galley_vpenalty_user_tl 
      \g_galley_vpenalty_user_tl
    \skip_set_eq:NN \l_galley_vspace_skip 
      \g_galley_vspace_skip
    \tl_set_eq:NN \l_galley_vspace_user_tl 
      \g_galley_vspace_user_tl
    \tl_set_eq:NN \l_galley_whatsits_previous_tl 
      \g_galley_whatsits_previous_tl
    \tl_set_eq:NN \l_galley_whatsits_next_tl 
      \g_galley_whatsits_next_tl
    \cs_set_eq:NN \galley_start_paragraph_local: \galley_start_paragraph:  
  }
\cs_new_protected_nopar:Npn \galley_restore_parameters:
  {
    \bool_gset_eq:NN \g_galley_indent_next_bool 
      \l_galley_indent_next_bool
    \bool_gset_eq:NN \g_galley_nobreak_next_bool 
      \l_galley_nobreak_next_bool
    \tl_gset_eq:NN \g_galley_restore_running_tl 
      \l_galley_restore_running_tl
    \int_gset_eq:NN \g_galley_vpenalty_int 
      \l_galley_vpenalty_int
    \tl_gset_eq:NN \g_galley_vpenalty_user_tl 
      \l_galley_vpenalty_user_tl
    \skip_gset_eq:NN \g_galley_vspace_skip 
      \l_galley_vspace_skip
    \tl_gset_eq:NN \g_galley_vspace_user_tl 
      \l_galley_vspace_user_tl    
    \tl_gset_eq:NN \g_galley_whatsits_previous_tl 
      \l_galley_whatsits_previous_tl
    \tl_gset_eq:NN \g_galley_whatsits_next_tl 
      \l_galley_whatsits_next_tl
    \cs_gset_eq:NN \galley_start_paragraph: \galley_start_paragraph_local:
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\galley_level:}
% \begin{macro}[aux]{\galley_level_end:}
%   Galley levels are created by saving all of the current global
%   settings, starting a group then initialising both the local and global
%   variables.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_level:
  {
    \galley_save_parameters:
    \group_begin:
      \galley_initialise_variables:
      \group_insert_after:N \galley_level_end:
  }
%    \end{macrocode}
%   At the end of the level, the global values are restored using the
%   saved \emph{local} versions, hence the position of the close-of-group
%   instruction. As this code can be inserted automatically, at the point
%   of use only the start of a galley level needs to be marked up: the end 
%   must come in a fixed location. All of this relies on the the
%   \enquote{colour safe} group used inside a box.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_level_end:
  {
      \par
      \galley_restore_parameters:
    \group_end:
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%    
% \subsection{Display-like material}
%
% \begin{macro}{\galley_display_begin:}
% \begin{macro}[aux]{\galley_display_vpenalty:N}
% \begin{macro}[aux]{\galley_display_vspace:N}
% \begin{macro}{\galley_display_end:}
% \begin{macro}[aux]{\galley_display_par_setup:}
% \begin{macro}[aux]{\galley_display_par:}
%   Display items within the galley are a bit like galley levels: they
%   may have different paragraph settings to the main part of the galley.
%   On the other hand, unlike independent galleys they should inherit the
%   settings from the surrounding material. Any special values for the
%   spacing also need to be applied at the start of the material.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_display_begin:
  {
    \group_begin:
      \galley_save_parameters:
      \mode_if_vertical:TF
        {
          \galley_display_vpenalty:N \l_galley_begin_par_vpenalty_tl
          \galley_display_vspace:N   \l_galley_begin_par_vspace_tl
        }
        {
          \galley_display_vpenalty:N \l_galley_begin_vpenalty_tl
          \galley_display_vspace:N   \l_galley_begin_vspace_tl
        }
      \par  
  }
%    \end{macrocode}
%   Two short-cuts for setting up any special penalty or vertical space.
%   The idea is that the standard value is saved to the \enquote{restore}
%   token list, before setting up the value to the special value needed
%   in this one case.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_display_vpenalty:N #1
  {
     \tl_if_empty:NF #1
       {
         \tl_gput_right:Nx \g_galley_restore_running_tl
           { 
             \int_gset:Nn \exp_not:N \g_galley_vpenalty_int
               { \int_use:N \g_galley_vpenalty_int }
           }
         \int_gset:Nn \g_galley_vpenalty_int {#1}  
       }
  }
\cs_new_protected_nopar:Npn \galley_display_vspace:N #1
  {
     \tl_if_empty:NF #1
       {
         \tl_gput_right:Nx \g_galley_restore_running_tl
           {
             \skip_gset:Nn \exp_not:N \g_galley_vspace_skip 
               { \skip_use:N \g_galley_vspace_skip } 
           }
         \skip_gset:Nn \g_galley_vspace_int {#1}  
       }
  }
%    \end{macrocode}
%   The \cs{par} token at the end of the display needs to go in at the same
%   group level as the text, hence this function cannot be placed using
%   \cs{group_insert_after:N}. Resetting the meaning of the \cs{par} token
%   needs to be carried out after the group used for the environment.
%   As \LaTeXe{} already adds one group, there are two \enquote{escapes}
%   here: a format version will need only one.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_display_end:
  {
      \par
      \galley_restore_parameters:
    \group_end:
    \group_insert_after:N \group_insert_after:N
    \group_insert_after:N \galley_display_par_setup:
  }
%    \end{macrocode}
%   The method used here is to assume that the next piece of horizontal
%   mode material will follow on from the displayed output without an
%   intervening \cs{par} token (probably a blank line). The meaning of the
%   \cs{par} token is then altered so that a check can be made to see if
%   this assumption was correct.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_display_par_setup:
  {
    \galley_omit_next_indent:
    \cs_set_eq:NN \par \galley_display_par:
  }
%    \end{macrocode}
%   The \enquote{special} meaning of the paragraph token starts by putting
%   things back to normal: there should never need to be more than one
%   special paragraph marker in one group. If \TeX{} is in vertical mode,
%   then there has been a paragraph token inserted, most likely by a
%   blank line. Thus the next piece of material is a separate conceptual
%   paragraph from the display. In that case, the assumption from above is
%   undone and the indent is turned back on. On the other hand, for the
%   case where \TeX{} is in horizontal mode 
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_display_par:
  {
    \cs_set_eq:NN \par \galley_std_par:
    \mode_if_vertical:TF
      {
        \par
        \bool_gset_true:N \g_galley_indent_next_bool
        \galley_display_vpenalty:N \l_galley_end_par_vpenalty_tl
        \galley_display_vspace:N   \l_galley_end_par_vspace_tl
      }
      {
        \tex_par:D
        \galley_display_vpenalty:N \l_galley_end_vpenalty_tl
        \galley_display_vspace:N   \l_galley_end_vspace_tl
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%    
% \subsection{The \cs{par} token}
%
% \begin{macro}{\galley_std_par:}
% \begin{variable}{\l_galley_par_hook_tl}
% The standard meaning assigned to \cs{par} by the galley system is
% set up inside a group such that things like paragraph shape 
% are always retained. The token list after the group allows controlled
% resetting of parameters on a \emph{per}-paragraph basis. This is done
% here rather than using the \cs{tex_everypar:D} primitive as the hook
% here applies only to certain \enquote{controlled} paragraph marks 
% rather than to everything. The non-breaking penalty is needed here
% as within the \cs{tex_everypar:D} hook there is an additional
% \cs{tex_par:D}. This leads to an extra \cs{tex_parskip:D}, which will
% leave an unwanted break-point here without the penalty. The definition
% when in vertical mode is a lot less complex as there resetting the 
% paragraph-dependent values is not desirable.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_std_par:
  {
    \mode_if_vertical:TF 
      {
        \group_begin:
          \tex_par:D
        \group_end:
      }
      {
        \group_begin:
          \tex_par:D
        \group_end:
        \l_galley_par_hook_tl
        \tl_clear:N \l_galley_par_hook_tl
      }
    \tex_penalty:D \c_ten_thousand
  }
\tl_new:N \l_galley_par_hook_tl
%    \end{macrocode}
% \end{variable}
% \end{macro}
%
% \begin{macro}{\par}
%   The meaning of the token \cs{par} itself starts off as a standard
%   paragraph.
%    \begin{macrocode}
\cs_set_protected_nopar:Npn \par { \galley_std_par: } 
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@par}
% \LaTeXe{} requires a \enquote{long term} version of \cs{par}, which is
% stored as \cs{@par}. Things are done a bit differently by \LaTeX3 and
% so this will only be needed in package mode.
%    \begin{macrocode}
\tl_set:Nn \@par { \galley_std_par: } 
%    \end{macrocode}
% \end{macro}
%
% \subsection{Insertions using \cs{tex_everypar:D}}
%
% The key to the entire galley mechanism is hooking into the 
% \cs{tex_everypar:D} token register. This requires that the original
% is moved out of the way, with appropriate hooks left attached for
% further modification by other modules and by the user. This is all
% done such that there is no danger of accidentally deactivating the
% galley mechanism. 
%
% \begin{variable}{\l_galley_everypar_hook_tl}
% \begin{variable}{\l_galley_everypar_user_hook_tl}
%   Two token lists are provided as hooks for the \cs{tex_everypar:D}
%   primitive such that they will not interfere with the wider mechanism.
%   Activating these hooks does not take place until |\begin{document}|.
%    \begin{macrocode}
\tl_new:N \l_galley_everypar_hook_tl
\tl_new:N \l_galley_everypar_user_hook_tl
%    \end{macrocode}
% \end{variable}
% \end{variable}
%
% \begin{macro}{\everypar}
%   When used on top of \LaTeXe{} the original primitive name needs to be
%   available without the risk of completely overwriting the new
%   mechanism. This is implemented as a token register in case low-level
%   \TeX{} is used. The \TeX{} primitive is set here as otherwise the 
%   \LaTeXe{} \cs{@nodocument} is never removed from the register.
%   This precaution will not be needed for a stand-alone format.
%    \begin{macrocode}
\cs_undefine:N \everypar
\newtoks \everypar
\AtBeginDocument
  {
    \toks_set:Nn \tex_everypar:D
      {
        \galley_start_paragraph:
        \l_galley_everypar_hook_tl
        \l_galley_everypar_user_hook_tl
        \tex_the:D \everypar 
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{The global galley mechanism}
%
% As detailed earlier, the galley mechanism works in two parts. The
% \enquote{local} part of a galley respects \TeX{} groupings, and is
% concerned with structures which in a well-behaved \LaTeX{} document
% will not be mis-grouped. The code here deals with the \enquote{global}
% part of the galley, which is build on top of the \cs{tex_everypar:D}
% primitive. This part of the galley concerns items which have to be
% handled globally, and thus do not respect groupings. As a result,
% the code here has to deal with nesting where this is appropriate.
%
% \begin{variable}{\g_galley_last_box}
%   A temporary box to hold the box inserted by \TeX{} when a paragraph
%   is inserted with an indent. The galley actually inserts the space
%   (\emph{i.e.}~\cs{tex_parindent:D} is globally zero), but there is
%   still an empty box to test for.
%    \begin{macrocode}
\box_new:N \g_galley_last_box
%    \end{macrocode}
% \end{variable}
% 
% \begin{macro}{\galley_start_paragraph_std:}
%   The routine at the start of a paragraph starts by removing any
%   (empty) indent box from the vertical list. As there may be vertical
%   mode items still to insert, a \cs{tex_par:D} primitive is used to
%   get back into vertical mode before they are tidied up. To get back
%   again to horizontal mode, \cs{tex_noindent:D} can be used. To avoid
%   an infinite loop, \cs{tex_everypar:D} is locally cleared before doing
%   that. Back in horizontal mode, the horizontal mode items can be
%   tidied up before sorting out any items which have been set on a
%   single-paragraph basis.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_start_paragraph_std:
  {
    \group_begin:
      \pref_global:D \tex_setbox:D \g_galley_last_box \l_last_box
      \tex_par:D
      \galley_insert_vertical_items:
      \tex_everypar:D { }
      \tex_noindent:D
    \group_end:
    \galley_insert_horizontal_items:
    \galley_restore_running_parameters:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\galley_start_paragraph_first:}
%   For the very first paragraph in a galley, the code needs to avoid
%   adding any vertical space at the top as it will interfere with
%   vertical positioning in \cs{tex_vtop:D}.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_start_paragraph_first:
  {
    \cs_gset_eq:NN \galley_start_paragraph: \galley_start_paragraph_std:
    \mode_if_horizontal:TF
      {
        \group_begin:
          \pref_global:D \tex_setbox:D \g_galley_last_box \l_last_box
          \tex_par:D
          \galley_insert_vspace:
          \tex_everypar:D { }
          \tex_noindent:D
        \group_end:
      }
      { \galley_insert_vspace_user: }
    \galley_insert_horizontal_items:
    \galley_restore_running_parameters:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\galley_start_paragraph:}
% \begin{macro}{\galley_start_paragraph_local:}
%   To allow for the variation in handling of the very first paragraph
%   in a galley, there needs to be a function which gets redefined after
%   the first use. This is more efficient than a switch as it avoids
%   checking with every paragraph. At the same time, there needs to be
%   a saved version of this function when switching galley levels. This is
%   then handled in a similar way to other parts of the galley global 
%   data structure.
%    \begin{macrocode}
\cs_new_eq:NN \galley_start_paragraph: \galley_start_paragraph_first:
\cs_new_protected_nopar:Npn \galley_start_paragraph_local: { }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\galley_insert_vertical_items:}
% \begin{macro}{\galley_insert_vspace:}
%   The aim here is to insert the vertical items such that they attach to
%   the correct place. This should occur at a position which \TeX{} will 
%   consider to be an explicit penalty. After the whatsits, a penalty for
%   breaking will be inserted. This will be the user penalty if supplied,
%   or the running penalty unless the no-break flag is set. Finally,
%    the inter-paragraph space is applied.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_insert_vertical_items:
  {
    \g_galley_whatsit_previous_tl
    \tl_gclear:N \g_galley_whatsit_previous_tl
    \tl_if_empty:NTF \g_galley_vpenalty_user_tl
      {
        \bool_if:NTF \g_galley_nobreak_next_bool
          { \tex_penalty:D \c_ten_thousand }
          { \tex_penalty:D \g_galley_vpenalty_int }
      }
      {
        \tex_penalty:D \int_eval:w \g_galley_vpenalty_user_tl \int_eval_end:
        \tl_gclear:N \g_galley_vpenalty_user_tl
      }
    \bool_gset_false:N \g_galley_nobreak_next_bool
    \galley_insert_vspace:
  }
%    \end{macrocode}
%   Inserting vertical space is set up as a separate function as it comes
%   up in a few places. The idea here is that any user-set space will
%   over-ride the design value, and only one space is ever inserted.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_insert_vspace:
  {
    \tl_if_empty:NTF \g_galley_vspace_user_tl
      { \skip_vertical:N \g_galley_vspace_skip }
      {
        \skip_vertical:n { \g_galley_vspace_user_tl } 
        \tl_gclear:N \g_galley_vspace_user_tl
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\galley_insert_horizontal_items:}
%   Horizontal mode objects start with the whatsits for the next
%   paragraph. An indent is then included if the removed box was not
%   void.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_insert_horizontal_items:
  {
    \g_galley_whatsit_next_tl
    \tl_gclear:N \g_galley_whatsit_next_tl
    \bool_if:NT \g_galley_indent_next_bool
      {
        \box_if_empty:NF \g_galley_last_box
          { \hbox_to_wd:nn { \l_galley_par_indent_dim } { } }
      }
    \skip_horizontal:N \l_galley_par_start_skip
    \bool_gset_true:N \g_galley_indent_next_bool  
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\galley_restore_running_parameters:}
%   Restoring the ongoing parameters just means using the token list
%   variable in which the appropriate assignments are stored. The
%   list can then be cleared.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_restore_running_parameters:
  {
    \g_galley_restore_running_tl
    \tl_gclear:N \g_galley_restore_running_tl
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Paragraph shape}
%
% \begin{macro}{\galley_set_parshape_cutout:nnnn}
%   The function for creating a \enquote{cut out} paragraph takes four
%   arguments. Argument |#1| is the number of `normal' lines before
%   the cut out section: this will often be zero. |#2| is the number of
%   cut out lines, while arguments |#3| and |#4| specify
%   the indentation in the left and right. Usually one of the last two
%   arguments will be zero. Everything can be set up in a single shot by
%   expansion, as the only calculations needed are shifts from the
%   measure. To ensure that after the cut out section things get back to
%   normal, the standard paragraph shape is restored by inclusion of an
%   extra line.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_set_parshape_cutout:nnnn #1#2#3#4
  {
    \tl_set:Nx \l_galley_parshape_tl 
      {
        \int_eval:n { #1 + #2 + 1 } 
        \c_space_tl
        \prg_replicate:nn {#1} 
          {
            \dim_use:N \l_galley_hoffset_dim 
            \c_space_tl
            \dim_use:N \l_galley_text_width_dim
            \c_space_tl
          } 
        \prg_replicate:nn {#2} 
          {
            \dim_eval:n { \l_galley_hoffset_dim + ( #3 ) } 
            \c_space_tl
            \dim_eval:n 
              { \l_galley_text_width_dim - ( ( #3 ) + ( #4 ) ) }
            \c_space_tl
          }
        \dim_use:N \l_galley_hoffset_dim 
        \c_space_tl
        \dim_use:N \l_galley_text_width_dim
      }
    \tex_parshape:D \l_galley_parshape_tl \scan_stop:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\galley_set_parshape_hang:nnn}
%   A hanging indent is very similar to a cut out, but the two are more
%   clearly handled by two separate functions than one combined one. Here,
%   there are |#1| normal lines (usually just one) followed by a
%   specification for the hanging lines. As with the cut out, there are
%   indents for each side: |#2| on the left and |#3| on the right.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_set_parshape_hang:nnn #1#2#3
  {
    \tl_set:Nx \l_galley_parshape_tl 
      {
        \int_eval:n { #1 + 1 } 
        \c_space_tl
        \prg_replicate:nn {#1} 
          {
            \dim_use:N \l_galley_hoffset_dim 
            \c_space_tl
            \dim_use:N \l_galley_text_width_dim
            \c_space_tl
          } 
        \dim_eval:n { \l_galley_hoffset_dim + ( #2 ) } 
        \c_space_tl
        \dim_eval:n { \l_galley_text_width_dim - ( ( #2 ) + ( #3 ) ) }
        \c_space_tl
      }  
    \tex_parshape:D \l_galley_parshape_tl \scan_stop:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\galley_set_parshape_from_measure:}
%   Whenever adjusting a \texttt{measure} template, the paragraph
%   shape token list is reset to reflect the new values for the margin
%   dimensions. Any measure adjustment requires a paragraph shape as this
%   is what is used to move the text relative to the edges of the galley.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_set_parshape_from_measure:
  {
    \tl_set:Nx \l_galley_parshape_tl
      {
        1 ~
        \dim_use:N \l_galley_hoffset_dim 
        \c_space_tl
        \dim_use:N \l_galley_text_width_dim 
      }  
    \tex_parshape:D \l_galley_parshape_tl \scan_stop: 
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\galley_parshape_set_reset:}
%   Paragraph shaping is usually intended to apply only to one paragraph.
%   To achieve this, the appropriate reset code is added to the hook used
%   after a standard paragraph mark.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_parshape_set_reset:
  {
    \tl_put_right:Nn \l_galley_par_hook_tl 
      { \galley_set_parshape_from_measure: }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Inter-word spacing}
%
% Setting the spacing between words and between sentences is important
% for achieving the correct output from ragged and centred output. At
% the same time, as far as possible the aim is to retain the spacing
% specified by the font designer and not to use arbitrary values
% (\emph{cf.}~the approach in \emph{The \TeX{}book}, page 101).
%
% \begin{macro}{\galley_set_interword_space:}
%   The approach taken to setting a fixed space is to use the information
%   from the current font to set the spacing. This means that only
%   \cs{tex_spacefactor:D} needs to be set, while \cs{tex_xspacefactor:D}
%   is left alone. However, this is only necessary for fonts which have
%   a stretch component to the inter-word spacing in the first place,
%   \emph{i.e.}~monospaced fonts require no changes. The code therefore
%   checks whether there is any stretch, and if there is uses the fixed
%   component to set \cs{tex_spaceskip:D}.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_set_interword_space:
  {
    \bool_if:NTF \l_galley_fixed_spacing_bool
      { % TEMP Hook for font changes
        \dim_compare:nNnTF { \tex_fontdimen:D 3 \tex_font:D } = \c_zero_dim
          { \tex_spaceskip:D \c_zero_dim }
          { \tex_spaceskip:D \tex_fontdimen:D 2 \tex_font:D }
      }
      { \tex_spaceskip:D \c_zero_dim }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Layer two: internal dimensions}
%
% There is a single object type for level two, the \texttt{measure} for
% the text in the galley. There are two arguments here, the margins on
% the left and right. These are available to over-ride those set as 
% standard, for example when making an environment wider than the
% current margins to allow inclusion of an awkward item.
%    \begin{macrocode}
\DeclareObjectType { measure } { 2 }
%    \end{macrocode}
%    
% There are two templates for galley measures: absolute and relative.
% Both use the same interface.
%    \begin{macrocode}
\DeclareTemplateInterface { measure } { absolute } { 2 }
  {
    left-margin  : length = 0 pt ,
    right-margin : length = 0 pt
  }
\DeclareTemplateInterface { measure } { relative } { 2 }
  {
    left-margin  : length = 0 pt ,
    right-margin : length = 0 pt
  }
%    \end{macrocode}
%
% In the \texttt{absolute} template, the two margin values are relative
% to the edges of the galley. This means that any existing offset or
% line-length adjustment are ignored.
%    \begin{macrocode}
\DeclareTemplateCode { measure } { absolute } { 2 }
  {
    left-margin  = \l_galley_left_margin_dim  ,
    right-margin = \l_galley_right_margin_dim
  }
  {
    \AssignTemplateKeys
    \tl_if_blank:nF {#1}
      { \dim_set:Nn \l_galley_left_margin_dim {#1} }
    \tl_if_blank:nF {#2}
      { \dim_set:Nn \l_galley_right_margin_dim {#2} }
    \dim_set:Nn \l_galley_hoffset_dim { \l_galley_left_margin_dim }
    \dim_set:Nn \l_galley_text_width_dim 
      { 
          \l_galley_width_dim
        - \l_galley_left_margin_dim 
        - \l_galley_right_margin_dim 
      } 
    \galley_set_parshape_from_measure:
  }
%    \end{macrocode}
% On the other hand, the \texttt{relative} template works relative to
% the current indentation at both sides.
%    \begin{macrocode}
\DeclareTemplateCode { measure } { relative } { 2 }
  {
    left-margin  = \l_galley_left_margin_dim  ,
    right-margin = \l_galley_right_margin_dim
  }
  {
    \AssignTemplateKeys
    \tl_if_blank:nF {#1}
      { \dim_set:Nn \l_galley_left_margin_dim {#1} }
    \tl_if_blank:nF {#2}
      { \dim_set:Nn \l_galley_right_margin_dim {#2} }
    \dim_add:Nn \l_galley_hoffset_dim { \l_galley_left_margin_dim }
    \dim_set:Nn \l_galley_text_width_dim
      { 
          \l_galley_text_width_dim 
        - \l_galley_left_margin_dim 
        - \l_galley_right_margin_dim 
      } 
    \galley_set_parshape_from_measure:
  }
%    \end{macrocode}
%    
% \subsection{Layer three: paragraph shape}
%
% The object type \texttt{parshape} is a somewhat extended interface
% to the \TeX{} \cs{tex_parshape:D} primitive. There are two arguments:
% a generic integer and a generic dimension. Both of these can be used
% by the template to control the exact appearance.
%    \begin{macrocode}
\DeclareObjectType { parshape } { 2 }
%    \end{macrocode}
%    
% There are two standard templates for paragraph shapes which do
% something, both with the same interface. The \texttt{hang} template
% provides one or more standard lines followed by a hanging paragraph,
% while the \texttt{initial} template cuts out a space at the start of
% the paragraph. 
%    \begin{macrocode}
\DeclareTemplateInterface { parshape } { hang } { 2 }
  {
    indent       : length  = 0 pt ,
    on-left-side : boolean = true ,
    number-lines : integer = 1
  }
\DeclareTemplateInterface { parshape } { initial } { 2 }
 {
    indent       : length  = 0 pt ,
    on-left-side : boolean = true ,
    number-lines : integer = 2
  }
%    \end{macrocode}
% Both of the templates are implemented as special cases of the more
% general functions defined earlier. The two user-supplied values can
% be used to set the number of \enquote{special} lines and the indent
% in both cases. The later is likely to be particularly important in
% day-to-day use.
%    \begin{macrocode}
\DeclareTemplateCode { parshape } { hang } { 2 }
  {
    indent       = \l_galley_parshape_indent_dim   ,
    on-left-side = \l_galley_parshape_on_left_bool ,
    number-lines = \l_galley_parshape_lines_int
  }
  {
    \AssignTemplateKeys
    \tl_if_blank:nF {#1}
      { \int_set:Nn \l_galley_parshape_lines_int {#1} }
    \tl_if_blank:nF {#2}
      { \dim_set:Nn \l_galley_parshape_indent_dim {#2} }
    \bool_if:NTF \l_galley_parshape_on_left_bool
      { 
        \galley_set_parshape_hang:nnn
          { \l_galley_parshape_lines_int }
          { \l_galley_parshape_indent_dim }
          { 0 pt }
      }
      {
        \galley_set_parshape_hang:nnn
          { \l_galley_parshape_lines_int }
          { 0 pt }
          { \l_galley_parshape_indent_dim }
      }
    \galley_parshape_set_reset:
  }
\DeclareTemplateCode { parshape } { initial } { 2 }
  {
    indent       = \l_galley_parshape_indent_dim   ,
    on-left-side = \l_galley_parshape_on_left_bool ,
    number-lines = \l_galley_parshape_lines_int
  }
  {
    \AssignTemplateKeys
    \tl_if_blank:nF {#1}
      { \int_set:Nn \l_galley_parshape_lines_int {#1} }
    \tl_if_blank:nF {#2}
      { \dim_set:Nn \l_galley_parshape_indent_dim {#2} }
    \bool_if:NTF \l_galley_parshape_on_left_bool
      { 
        \galley_set_parshape_cutout:nnnn
          { 0 }
          { \l_galley_parshape_lines_int }
          { \l_galley_par_indent_dim }
          { 0 pt }
      }
      {
        \galley_set_parshape_cutout:nnnn
          { 0 }
          { \l_galley_parshape_lines_int }
          { 0 pt }
          { \l_galley_parshape_indent_dim }
      }
    \galley_parshape_set_reset:
  }
%    \end{macrocode}
%    
% There is also a \enquote{do nothing} paragraph shape for cases where
% a template is needed but no action is desirable.
%    \begin{macrocode}
\DeclareTemplateInterface { parshape } { std } { 2 } { }
\DeclareTemplateCode { parshape } { std } { 2 } { } 
  {
    \AssignTemplateKeys
    \galley_set_parshape_from_measure: 
    \galley_parshape_set_reset:
  }
%    \end{macrocode}
%    
% \subsection{Layer four: formatting inside the paragraph}
%
% The first type of object within a paragraph is the hyphenation. This
% object needs no arguments.
%    \begin{macrocode}
\DeclareObjectType { hyphenation } { 0 }
%    \end{macrocode}
%    
% There is only hyphenation template as standard. This provides a 
% semi-flexible interface to the underlying \TeX{} methods. (The detail
% is therefore hidden within the implementation phase.)
%    \begin{macrocode}
\DeclareTemplateInterface { hyphenation } { std } { 0 }
  {
    enable            : boolean                        = true ,
    enable-upper-case : boolean                        = true ,
    penalty           : choice { low , medium , high } = low
  }
%    \end{macrocode}
% The implementation for hyphenation mainly sets low-level values.
% The minimum number of characters after a hyphen is set directly, 
% whereas the number before is not. This is so that 
% \cs{tex_lefthyphenmin:D} can also be used to completely prevent 
% hyphenation.
%    \begin{macrocode}
\DeclareTemplateCode { hyphenation } { std } { 0 } 
  {
    enable            = \l_galley_hyphen_enable_bool    ,
    enable-upper-case = \l_galley_hyphen_uppercase_bool ,
    penalty           =
      {
        low    = 
          {
            \int_set:Nn \tex_hyphenpenalty:D   { 51 }
            \int_set:Nn \tex_exhyphenpenalty:D { 51 }
          } ,
        medium = 
          {
            \int_set:Nn \tex_hyphenpenalty:D   { 151 }
            \int_set:Nn \tex_exhyphenpenalty:D { 151 }
          } ,
        high   = 
          {
            \int_set:Nn \tex_hyphenpenalty:D   { 301 }
            \int_set:Nn \tex_exhyphenpenalty:D { 301 }
          } ,
      }
  }
  { 
    \AssignTemplateKeys
    \int_set:Nn \tex_lefthyphenmin:D
      { 
        \bool_if:NTF \l_galley_hyphen_enable_bool 
          { \l_galley_hyphen_left_int  } { 63 } 
      }
    \int_set:Nn \tex_uchyph:D
      { \bool_if:NTF \l_galley_hyphen_uppercase_bool { 1 } { 0 } }
  }
%    \end{macrocode}
% At this stage, the default hyphenation character should be set and
% hyphenation should be enabled.
%    \begin{macrocode}
\UseTemplate { hyphenation } { std } { }
\tex_defaulthyphenchar:D 45 \scan_stop:
%    \end{macrocode}
%    
% The second level four object is the justification, which again 
% takes no arguments.
%    \begin{macrocode}
\DeclareObjectType { justification } { 0 }
%    \end{macrocode}
% The standard template for justification works on an ongoing basis.
%    \begin{macrocode}
\DeclareTemplateInterface { justification } { std } { 0 }
  {
    end-skip           : skip    = 0 pt plus 1 fil ,
    fixed-word-spacing : boolean = false           ,
    indent-width       : length                    ,
    left-skip          : skip    = 0 pt            ,
    right-skip         : skip    = 0 pt            ,
    start-skip         : skip    = 0 pt
  }
%    \end{macrocode}
% The implementation here is pretty simple as almost everything that
% goes on is a simple case of saving the settings, which are then
% applied either by \TeX{} itself or the rest of the galley system. The
% removal line here is to ensure that the alternative \texttt{compound}
% template works correctly.
%    \begin{macrocode}
\DeclareTemplateCode { justification } { std } { 0 } 
  {
    end-skip           = \tex_parfillskip:D           ,
    fixed-word-spacing = \l_galley_fixed_spacing_bool ,
    indent-width       = \l_galley_par_indent_dim     ,
    left-skip          = \tex_leftskip:D              ,
    right-skip         = \tex_rightskip:D             ,
    start-skip         = \l_galley_par_start_skip
  }
  {
    \AssignTemplateKeys
    \tl_remove_all:Nn \l_galley_par_hook_tl
      { \galley_justification_other: }
    \galley_set_interword_space:
    \skip_set:Nn \@rightskip { \tex_rightskip:D }
  }
%    \end{macrocode}
% The standard instance for justification is very simple to set up as
% the default values for the template are set up for exactly this case.
% The advantage of this scheme is that at a design level altering the
% indent used for justified paragraphs is very easy to do. As this is
% the standard template for all \LaTeX3 documents, it is applied here.
%    \begin{macrocode}
\DeclareInstance { justification } { justified } { std }
  { indent-width = 15 pt }
\UseInstance { justification } { justified }
%    \end{macrocode}
% The instance for no indentation at all but with justified text is
% intended for layouts which leave white space between paragraphs. With
% no indentation, some space has to be included at the end of each
% paragraph. This is set up to mirror the indent that has been removed.
%    \begin{macrocode}
\DeclareInstance { justification } { noindent } { std }
  {
    end-skip     = 15 pt plus 1 fil ,
    indent-width = 0 pt
  }
%    \end{macrocode}
% The other standard justification schemes are for text which is either
% centred or ragged. The settings here are taken from the \LaTeXe{}
% \pkg{ragged2e} package, as they maintain a reasonable appearance by
% ensuring that \TeX{} will not be too tolerant of very short lines.
% To keep the design clear here, no default values are relied on even
% though this would make the instance declarations shorter.
%    \begin{macrocode}
\DeclareInstance { justification } { centered } { std }
  {
    end-skip           = 0 pt           ,
    fixed-word-spacing = true           ,
    indent-width       = 0 pt           ,
    left-skip          = 0 pt plus 1 em ,
    right-skip         = 0 pt plus 1 em
  }
\DeclareInstance { justification } { ragged-left } { std }
  {
    end-skip           = 0 pt            ,
    fixed-word-spacing = true            ,
    indent-width       = 0 pt            ,
    left-skip          = 0 pt plus 2 em  ,
    right-skip         = 0 pt
  }
\DeclareInstance { justification } { ragged-right } { std }
  {
    end-skip           = 0 pt plus 1 fil ,
    fixed-word-spacing = true            ,
    indent-width       = 0 pt            ,
    left-skip          = 0 pt            ,
    right-skip         = 0 pt plus 2 em
  }
%    \end{macrocode}
% The \texttt{centering} instance is used to centre material without
% hyphenation: this is used for centring arbitrary material rather
% than text.
%    \begin{macrocode}
\DeclareInstance { justification } { center } { std }
  {
    end-skip           = 0 pt            ,
    fixed-word-spacing = true            ,
    indent-width       = 0 pt            ,
    left-skip          = 0 pt plus 1 fil ,
    right-skip         = 0 pt plus 1 fil
  }
%    \end{macrocode}
% 
% A second form of justification template is the case where the first
% paragraph is different from all of the others. This is set up by
% getting the justification to reset itself after the first paragraph.
% The code built into the \texttt{std} version will ensure that any
% subsequent template use will over-ride the setting here correctly.
%    \begin{macrocode}
\DeclareTemplateInterface { justification } { compound } { 0 }
  {
    first-paragraph  : instance { justification } ,
    other-paragraphs : instance { justification }
  }
\DeclareTemplateCode { justification } { compound } { 0 }
  {
    first-paragraph  = \galley_justification_first: ,
    other-paragraphs = \galley_justification_other:
  }
  {
    \AssignTemplateKeys
    \galley_justification_first:
    \tl_put_right:Nn \l_galley_par_hook_tl
      { \galley_justification_other: }
  }
%    \end{macrocode}
%    
% How \TeX{} breaks text into lines is influences by a number of
% parameters, most of which are not actually likely to change. These
% work with the \texttt{hyphenation} but are independent of whether
% any hyphenation is actually active. The math values here could be
% set up as a separate template, but in practice this seems likely to
% be overkill.
%    \begin{macrocode}
\DeclareObjectType { line-breaking } { 0 }
%    \end{macrocode}
% The only template provided for line breaking is a simple interface to
% \TeX{}'s parameters. There is not really much that can be added to this:
% after all, the way that penalties work is more or less arbitrary but
% works well! The default values given here are intended to be sensible
% for a lot of cases.
%    \begin{macrocode}
\DeclareTemplateInterface { line-breaking } { std } { 0 }
  {
    badness                : integer = 1000   ,
    binop-penalty          : integer = 700    ,
    double-hyphen-demerits : integer = 10 000 ,
    emergency-stretch      : length  = 0 pt   ,
    final-hyphen-demerits  : integer = 5000   ,
    fuzz                   : length  = 0.1 pt ,
    line-penalty           : integer = 10     ,
    mismatch-demerits      : integer = 10 000 ,
    pretolerance           : integer = 100    ,
    relation-penalty       : integer = 500    ,
    tolerance              : integer = 200
  }
\DeclareTemplateCode{ line-breaking } { std } { 0 } 
  {
    badness                = \tex_hbadness:D             ,
    binop-penalty          = \tex_binoppenalty:D         ,
    double-hyphen-demerits = \tex_doublehyphendemerits:D ,
    emergency-stretch      = \tex_emergencystretch:D     ,
    final-hyphen-demerits  = \tex_finalhyphendemerits:D  ,
    fuzz                   = \tex_hfuzz:D                ,
    line-penalty           = \tex_linepenalty:D          ,
    mismatch-demerits      = \tex_adjdemerits:D          ,
    pretolerance           = \tex_pretolerance:D         ,
    relation-penalty       = \tex_relpenalty:D           ,
    tolerance              = \tex_tolerance:D
  } 
  { \AssignTemplateKeys }
%    \end{macrocode}
% The default values are set such that they are suitable for good
% quality typesetting. So the standard template changes nothing at
% all from the template. This instance should also be applied now,
% as it will then apply to the entire document unless changed
% deliberately.
%    \begin{macrocode}
\DeclareInstance { line-breaking } { std } { std } { }
\UseInstance { line-breaking } { std }
%    \end{macrocode}
%    
% \subsection{Between paragraphs}
%
% \begin{macro}{\galley_no_break_next:}
% This is a \emph{design} level function to prevent a break between 
% paragraphs. This can be applied as part of a design or by the user: if
% there is a no break flag set then a user penalty should not over-ride
% it.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_no_break_next:
  { \bool_gset_true:N \g_galley_nobreak_next_bool }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\galley_omit_next_indent:}
% Omitting a single indent is just a case of setting the appropriate
% flag. The function is named to try to indicate that it applies to a
% single
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_omit_next_indent:
  { \bool_gset_false:N \g_galley_indent_next_bool }
%    \end{macrocode}
% \end{macro}
% 
% There is one object type needed here: what to do between paragraphs.
% At present, the only possibility is to add some space. This is set
% up such that it can be applied to a single paragraph or to
% several. The standard settings here include some stretch component
% so that \TeX{} has something to work with.
%    \begin{macrocode}
\DeclareObjectType { interpar } { 0 }
\DeclareTemplateInterface { interpar } { std } { 0 }
  { vspace : skip = 0 pt plus 1 pt }
\DeclareTemplateInterface { interpar } { single } { 0 }
  { vspace : skip = 0 pt plus 1 pt }
\DeclareTemplateCode { interpar } { std } { 0 } 
  { vspace = global \g_galley_vspace_skip } 
  { \AssignTemplateKeys }
\DeclareTemplateCode { interpar } { single } { 0 } 
  { vspace = \l_galley_vspace_single_skip } 
  {
    \AssignTemplateKeys
    \skip_if_eq:nnF
      { \g_galley_vspace_skip } 
      { \l_galley_vspace_single_skip } 
      {
        \tl_gput_right:Nx \g_galley_restore_running_tl
          {
            \skip_gset:Nn \exp_not:N \g_galley_vspace_skip
              { \skip_use:N \g_galley_vspace_skip }
          }
        \skip_gset:Nn \g_galley_vspace_skip 
          { \l_galley_vspace_single_skip }
      }
  }
\UseTemplate { interpar } { std } { }
%    \end{macrocode}
%    
% \begin{macro}{\parskip}
% For the package, the \cs{parskip} primitive is moved out of the
% way as the code above is handling things.
%    \begin{macrocode}
\int_set:Nn \parskip { 0 pt }
\cs_undefine:N \parskip
\skip_new:N \parskip
%    \end{macrocode}
% \end{macro}
%
% The second object here sets up how \TeX{} acts to break paragraphs at
% page boundaries. As with the \texttt{line-breaking} object, there is not
% much to do except provide an interface to the \TeX{} internals.
%    \begin{macrocode}
\DeclareObjectType { page-breaking } { 0 }
\DeclareTemplateInterface { page-breaking } { std } { 0 }
  {
    badness               : integer = 1000   ,
    broken-penalty        : integer = 100    ,
    club-penalty          : integer = 150    ,
    display-widow-penalty : integer = 50     ,
    fuzz                  : length  = 0.1 pt ,
    interline-penalty     : integer = 0      ,
    post-display-penalty  : integer = 0      ,
    pre-display-penalty   : integer = 10 000 ,
    widow-penalty         : integer = 150
  }
\DeclareTemplateCode { page-breaking } { std } { 0 } 
  {
    badness               = \tex_vbadness:D            ,
    broken-penalty        = \tex_brokenpenalty:D       ,
    club-penalty          = \tex_clubpenalty:D         ,
    display-widow-penalty = \tex_displaywidowpenalty:D ,
    fuzz                  = \tex_vfuzz:D               ,
    interline-penalty     = \tex_interlinepenalty:D    ,
    post-display-penalty  = \tex_postdisplaypenalty:D  ,
    pre-display-penalty   = \tex_predisplaypenalty:D   ,
    widow-penalty         = \tex_widowpenalty:D
  }
  { \AssignTemplateKeys }
%    \end{macrocode}
% The standard instance of the \texttt{page-breaking} object simply applies
% the defaults: this is used.
%    \begin{macrocode}
\DeclareInstance { page-breaking } { std } { std } { }
\UseInstance { page-breaking } { std }
%    \end{macrocode}
% Two additional instances are provided: one to prevent any breaks
% at all, and a second to prevent any widow or club lines.
%    \begin{macrocode}
\DeclareInstance { page-breaking } { nobreak } { std }
  {
    interline-penalty    = 10 000 ,
    post-display-penalty = 10 000
  }
\DeclareInstance { page-breaking } { nolone } { std }
  {
    club-penalty          = 10 000 ,
    display-widow-penalty = 10 000 ,
    widow-penalty         = 10 000
  }
%    \end{macrocode}
% There is also a version of this code which applies only to one
% paragraph. This is done by storing the input in token list variables
% with no default: only explicit settings will be picked up.
%    \begin{macrocode}
\DeclareTemplateInterface { page-breaking } { single } { 0 }
  {
    badness               : tokenlist ,
    broken-penalty        : tokenlist ,
    club-penalty          : tokenlist ,
    display-widow-penalty : tokenlist ,
    fuzz                  : tokenlist ,
    interline-penalty     : tokenlist ,
    post-display-penalty  : tokenlist ,
    pre-display-penalty   : tokenlist ,
    widow-penalty         : tokenlist
  }
\DeclareTemplateCode { page-breaking } { single } { 0 } 
  {
    badness               = \l_galley_vbadness_tl            ,
    broken-penalty        = \l_galley_brokenpenalty_tl       ,
    club-penalty          = \l_galley_clubpenalty_tl         ,
    display-widow-penalty = \l_galley_displaywidowpenalty_tl ,
    fuzz                  = \l_galley_vfuzz_tl               ,
    interline-penalty     = \l_galley_interlinepenalty_tl    ,
    post-display-penalty  = \l_galley_postdisplaypenalty_tl  ,
    pre-display-penalty   = \l_galley_predisplaypenalty_tl   ,
    widow-penalty         = \l_galley_widowpenalty_tl
  }
  {
    \AssignTemplateKeys
    \seq_map_function:NN \c_galley_page_breaking_seq \galley_page_breaking_local:n
    \tl_if_empty:NF \l_galley_vfuzz_tl
      {
        \dim_compare:nNnF { \l_galley_vfuzz_tl } = { \tex_vfuzz:D }
          {
            \tl_put_right:Nx \l_galley_par_hook_tl
              {
                \dim_set:Nn \exp_not:N \tex_vfuzz:D
                  { \dim_use:N \tex_vfuzz:D }
              }
            \dim_set:Nn \tex_vfuzz:D { \l_galley_vfuzz_tl }
          }
      }
  }
\cs_new_protected_nopar:Npn \galley_page_breaking_local:n #1
  {
    \tl_if_empty:cF { l_galley_ #1 _tl }
      {
        \int_compare:nNnF { \int_use:c { tex_ #1 :D } } = 
          { \tl_use:c { l_galley_ #1 _tl } }
          {
            \tl_put_right:Nx \l_galley_par_hook_tl
              {
                \int_set:Nn \exp_not:c { tex_ #1 :D }
                  { \int_use:c { tex_ #1 :D } }
              }
            \int_set:cn { tex_ #1 :D } { \tl_use:c { l_galley_ #1 _tl } } 
          }
      }  
  }
\seq_new:N \c_galley_page_breaking_seq
\seq_put_right:Nn \c_galley_page_breaking_seq { brokenpenalty }
\seq_put_right:Nn \c_galley_page_breaking_seq { clubpenalty }
\seq_put_right:Nn \c_galley_page_breaking_seq { displaywidowpenalty }
\seq_put_right:Nn \c_galley_page_breaking_seq { interlinepenalty }
\seq_put_right:Nn \c_galley_page_breaking_seq { postdisplaypenalty }
\seq_put_right:Nn \c_galley_page_breaking_seq { predisplaypenalty }
\seq_put_right:Nn \c_galley_page_breaking_seq { vbadness }
\seq_put_right:Nn \c_galley_page_breaking_seq { widowpenalty }
%    \end{macrocode}
%    \begin{macrocode}
\DeclareInstance { page-breaking } { single-std } { single } { }
\DeclareInstance { page-breaking } { single-nobreak } { single }
  {
    interline-penalty    = 10 000 ,
    post-display-penalty = 10 000
  }
\DeclareInstance { page-breaking } { single-noclub } { single }
  { club-penalty = 10 000 }
\DeclareInstance { page-breaking } { single-nolone } { single }
  {
    club-penalty          = 10 000 ,
    display-widow-penalty = 10 000 ,
    widow-penalty         = 10 000
  }
\DeclareInstance { page-breaking } { single-nowidow } { single }
  {
    display-widow-penalty = 10 000 ,
    widow-penalty         = 10 000
  }
%    \end{macrocode}
%    
% \subsection{Templates for display material}
%
% To allow special handling of display-like material, templates are
% needed at the beginning and end of the block which set up any special
% space or breaks. These need to be optional, and so are stored as token
% lists: rather than \enquote{magic} values, empty lists indicate that 
% standard settings are to be used. To ensure that the error checking 
% needed takes place early, each token list is re-set with the
% appropriate evaluation.
%    \begin{macrocode}
\DeclareObjectType { display-begin } { 0 }
\DeclareObjectType { display-end }   { 0 }
\DeclareTemplateInterface { display-begin } { std } { 0 }
  {
    par-penalty : tokenlist ,
    par-space   : tokenlist ,
    penalty     : tokenlist ,
    space       : tokenlist
  }
\DeclareTemplateInterface { display-end } { std } { 0 }
  {
    par-penalty : tokenlist ,
    par-space   : tokenlist ,
    penalty     : tokenlist ,
    space       : tokenlist
  }
\DeclareTemplateCode { display-begin } { std } { 0 } 
  {
    par-penalty = \l_galley_display_begin_par_vpenalty_tl ,
    par-space   = \l_galley_display_begin_par_vspace_tl   ,
    penalty     = \l_galley_display_begin_vpenalty_tl     ,
    space       = \l_galley_display_begin_vspace_tl
  }
  {
   \AssignTemplateKeys
    \tl_if_empty:NF \l_galley_display_begin_par_vpenalty_tl
      {
        \tl_set:Nx \l_galley_display_begin_par_vpenalty_tl
          { \int_eval:n { \l_galley_display_begin_par_vpenalty_tl } }
      }
    \tl_if_empty:NF \l_galley_display_begin_par_vspace_tl
      {
        \tl_set:Nx \l_galley_display_begin_par_vspace_tl
          { \skip_eval:n { \l_galley_display_begin_par_vspace_tl } }
      }
    \tl_if_empty:NF \l_galley_display_begin_vpenalty_tl
      {
        \tl_set:Nx \l_galley_display_begin_vpenalty_tl
          { \int_eval:n { \l_galley_display_begin_vpenalty_tl } }
      }
    \tl_if_empty:NF \l_galley_display_begin_vspace_tl
      {
        \tl_set:Nx \l_galley_display_begin_vspace_tl
          { \skip_eval:n { \l_galley_display_begin_vspace_tl } }
      }
  }
\DeclareTemplateCode { display-end } { std } { 0 } 
  {
    par-penalty = \l_galley_display_end_par_vpenalty_tl ,
    par-space   = \l_galley_display_end_par_vspace_tl   ,
    penalty     = \l_galley_display_end_vpenalty_tl     ,
    space       = \l_galley_display_end_vspace_tl
  }
  {
    \AssignTemplateKeys
    \tl_if_empty:NF \l_galley_display_end_par_vpenalty_tl
      {
        \tl_set:Nx \l_galley_display_end_par_vpenalty_tl
          { \int_eval:n { \l_galley_display_end_par_vpenalty_tl } }
      }
    \tl_if_empty:NF \l_galley_display_end_par_vspace_tl
      {
        \tl_set:Nx \l_galley_display_end_par_vspace_tl
          { \skip_eval:n { \l_galley_display_end_par_vspace_tl } }
      }
    \tl_if_empty:NF \l_galley_display_end_vpenalty_tl
      {
        \tl_set:Nx \l_galley_display_end_vpenalty_tl
          { \int_eval:n { \l_galley_display_end_vpenalty_tl } }
      }
    \tl_if_empty:NF \l_galley_display_end_vspace_tl
      {
        \tl_set:Nx \l_galley_display_end_vspace_tl
          { \skip_eval:n { \l_galley_display_end_vspace_tl } }
      }
  }
%    \end{macrocode}
%    
% \subsection{Functions for user-level adjustments}
%
% One-off adjustments at the user level require access to the galley
% parameters. However, it is not desirable to simply dump the variables
% in a long list and hope that the correct access methods are used.
% Instead, documented code-level functions are defined which can then
% be used to create appropriate document-level functions.
% 
% \begin{macro}{\galley_set_penalty:n}
% \begin{macro}{\galley_set_vspace:n}
%   User supplied penalties and spaces only apply for a single paragraph.
%   In both cases, the input values need to be checked for the correct
%   form but are stored as token lists. The \texttt{x}-type expansion
%   deals with this nicely.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_set_penalty:n #1
  { \tl_gset:Nx \g_galley_penalty_user_tl { \int_eval:n {#1} } }
\cs_new_protected_nopar:Npn \galley_set_vspace:n #1
  { \tl_gset:Nx \g_galley_vspace_user_tl { \skip_eval:n {#1} } }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{\LaTeXe{} functions}
% 
% \begin{macro}{\nobreak}
% \begin{macro}{\noindent}
% \begin{macro}{\vspace}
% In package mode, some of \LaTeXe{}'s functions are re-implemented using
% the galley system. Not all of the optional arguments currently work!
%    \begin{macrocode}
\RenewDocumentCommand \nobreak { } { \galley_no_break_next: }
\RenewDocumentCommand \noindent { }
  {
    \galley_omit_next_indent:
    \tex_noindent:D
  }
\RenewDocumentCommand \vspace { s m } { \galley_set_vspace:n {#2} }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
