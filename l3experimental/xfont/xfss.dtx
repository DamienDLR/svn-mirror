% \iffalse
%% File: xfss.dtx Copyright (C) 2011- LaTeX3 project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%
%
%<*driver|package>
\RequirePackage{expl3}
\GetIdInfo$Id$
  {L3 Experimental Font Selection}
%</driver|package>
%<*driver>
\documentclass[full,checktest]{l3doc}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{^^A
%   The \textsf{xfss} package\\ Experimental Font Selection^^A
%   \thanks{This file describes v\ExplFileVersion,
%     last revised \ExplFileDate.}^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released \ExplFileDate}
% \maketitle
% \tableofcontents
%
% \begin{documentation}
%
% \section{Introduction}
% A re-implementation of the NFSS in \pkg{expl3}.
% This has been written by dumping the plain un-commented
% code as part of the NFSS, then translating it piece-by-piece
% into the \pkg{expl3} syntax.
%
% As such, all code comments have been lost. (Most of) these will
% be restored as the code becomes functional.
%
% \section{Use}
% Load \pkg{xfss} as early as possible, preferably before the
% document class.
%
% \section{Third-party packages}
%
% The following packages will be incorporated into the functionality here.
% \begin{itemize}
% \item [everysel] Provides \cs{EverySelectfont} and \cs{AtNextSelectfont}.
% \end{itemize}
%
% \section{Internal commands}
%
%
% \begin{function}{\xfss_set_font_size_commands:n}
% \begin{syntax}
% "\xfss_set_font_size_commands:n {10}"
% \end{syntax}
% Sets the full range of size commands (\cs{small}, \cs{large}, etc.)
% according to the nominal font size "#1".
% In \LaTeXe, this command is executed \cs{AtBeginDocument} based on the
% current definition of \cs{normalsize} so the class font size is picked up.
% \end{function}
%
% \begin{function}{\xfss_switch_catcodes:}
% \begin{syntax}
% "  \group_begin:"\\
% "    \xfss_switch_catcodes:"\\
% "    ..."\\
% "  \group_end:"
% \end{syntax}
% Enables the catcode regime required for the parsing of font definition
% files.
% \begin{texnote}
% Was \LaTeXe's \cs{nfss@catcodes}
% \end{texnote}
% \end{function}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{xfss} implementation}
%
% The eventual goal is to have this package loadable both on top of
% \LaTeXe, overriding the NFSS, or in a standalone \LaTeX3 kernel.
%
%    \begin{macrocode}
%<*package|initex>
%    \end{macrocode}
%
%    \begin{macrocode}
\ProvidesExplPackage
  {\ExplFileName}{\ExplFileDate}{\ExplFileVersion}{\ExplFileDescription}
\RequirePackage{xparse}
\RequirePackage{l3font}
%<*package>
\makeatletter
%</package>
%    \end{macrocode}
%
% \section{Unloading the original NFSS}
%
% These are only the commands required to be undefined before
% replacing them.
%
%    \begin{macrocode}
%<*package>
\tl_map_function:nN
  {
    \mathbf \mathsf \mathit \mathup \mathtt
    \rmdefault \sfdefault \ttdefault \bfdefault
    \mddefault \itdefault \sldefault \scdefault
    \updefault \encodingdefault \familydefault
    \seriesdefault \shapedefault
    \symlargesymbols \symsymbols \symoperators \symletters
    \small \footnotesize \scriptsize \tiny
    \large \Large \LARGE \huge \Huge
  }
  \cs_undefine:N
%</package>
%    \end{macrocode}
%
% \section{l3font candidates}
%
% \begin{macro}{\font_set_spaceskip:n,\font_set_extra_spaceskip:n}
% Override the interword space that is usually specified on a per-font basis.
%    \begin{macrocode}
\cs_new:Npn \font_set_spaceskip:n       { \skip_set:Nn \tex_spaceckip:D  }
\cs_new:Npn \font_set_extra_spaceskip:n { \skip_set:Nn \tex_xspaceskip:D }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\font_reset_spaceskip:,\font_reset_xspaceskip:}
% Use the interword space specified by the font.
%    \begin{macrocode}
\cs_new:Npn \font_reset_spaceskip:       { \skip_zero:N \tex_spaceskip:D  }
\cs_new:Npn \font_reset_extra_spaceskip: { \skip_zero:N \tex_xspaceskip:D }
%    \end{macrocode}
% \end{macro}
%
% \section{Function variants}
%
%    \begin{macrocode}
\cs_generate_variant:Nn \tl_if_eq:nnTF {x}
\cs_generate_variant:Nn \tl_if_eq:nnT {x}
\cs_generate_variant:Nn \cs_if_exist:NF {o}
\cs_generate_variant:Nn \tl_if_in:NnTF {Nc}
\cs_generate_variant:Nn \tl_if_in:nnTF {xx}
\cs_generate_variant:Nn \tl_gset_eq:NN {Vc}
%    \end{macrocode}
%
% \begin{macro}{\exp_args:NNcc}
%    \begin{macrocode}
\cs_set:Npn \exp_args:NNcc #1#2#3#4 {
  \exp_after:wN #1
  \exp_after:wN #2 \cs:w #3 \exp_after:wN \cs_end: \cs:w #4 \cs_end:
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\exp_args:Ncccc}
%    \begin{macrocode}
\cs_set:Npn \exp_args:Ncccc #1#2#3#4#5 {
  \exp_after:wN #1 \cs:w #2 \exp_after:wN \cs_end:
                   \cs:w #3 \exp_after:wN \cs_end:
                   \cs:w #4 \exp_after:wN \cs_end:
                   \cs:w #5 \cs_end:
}
%    \end{macrocode}
% \end{macro}
%
% \section{expl3 extensions}
%
% \subsection{General}
%
% \begin{macro}{\mode_leave_vertical:}
% Same as \LaTeXe's "\leavevmode"
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \mode_leave_vertical:
  { \hbox_unpack_clear:N \c_empty_box }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\cs_clear:N,\cs_gclear:N}
% Debatable names, but useful functions.
%    \begin{macrocode}
\cs_new_protected:Npn \cs_clear:N  #1 { \cs_set_eq:NN  #1 \prg_do_nothing: }
\cs_new_protected:Npn \cs_gclear:N #1 { \cs_gset_eq:NN #1 \prg_do_nothing: }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\cs_null:N,\cs_gnull:N}
% Debatable names, but useful functions.
% The distinction between undefined/empty/relax can be important!
%    \begin{macrocode}
\cs_new_protected:Npn \cs_null:N  #1 { \cs_set_eq:NN  #1 \scan_stop: }
\cs_new_protected:Npn \cs_gnull:N #1 { \cs_gset_eq:NN #1 \scan_stop: }
%    \end{macrocode}
% \end{macro}
%
% \begin{function}{\cs_meaning_if_in:NN / (TF)}
%   \begin{syntax}
%     \cs{cs_meaning_if_in:NNTF} <cs1> <cs2> \Arg{true} \Arg{false}
%   \end{syntax}
%   These conditionals test if <cs2> is used within the definition (or meaning)
%   of <cs1>. Note this test can only make this test using string comparison,
%   so commands with escaped backslashes will still register as positives.
% \end{function}
%
% \begin{macro}[pTF]{\cs_meaning_if_in:NN}
%    \begin{macrocode}
\prg_new_conditional:Npnn \cs_meaning_if_in:NN #1#2 {TF,T,F}
  {
    \tl_if_in:xxTF { \cs_meaning:N #1 } { \token_to_str:N #2 }
      \prg_return_true: \prg_return_false:
  }
\cs_generate_variant:Nn \cs_meaning_if_in:NNTF {c}
\cs_generate_variant:Nn \cs_meaning_if_in:NNT  {c}
\cs_generate_variant:Nn \cs_meaning_if_in:NNF  {c}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Dimensions and skips}
%
% \begin{macro}{\dim_abs:n}
%    \begin{macrocode}
\cs_new_nopar:Npn \dim_abs:n
  { \exp_last_unbraced:Nf \dim_abs_aux:N \dim_eval:n }
\cs_new_nopar:Npn \dim_abs_aux:N #1
  { \if_meaning:w - #1 \else: \exp_after:wN #1 \fi: }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\dim_strip_pt:w,\dim_strip_pt:N}
% Straight from \LaTeXe.
%    \begin{macrocode}
\cs_new_nopar:Npn \dim_strip_pt:N { \exp_after:wN \dim_strip_pt:w \dim_use:N }
\use:x
  {
    \cs_set:Npn \exp_not:N \dim_strip_pt:w ##1.##2 \tl_to_str:n {pt}
      {
        ##1 \exp_not:N \int_compare:nNnT {##2} > 0 {.##2}
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\c_backslash_tl}
% A backslash `string'.
%    \begin{macrocode}
\tl_set:Nx \c_backslash_tl { \cs_to_str:N \\ }
%    \end{macrocode}
% \end{macro}
%
% \begin{variable}{\l_last_skip}
% This \emph{read-only} variable contains the amount of any glue
% placed into the output list directly prior to its being queried.
% \end{variable}
%
% \begin{macro}{\l_last_skip}
%    \begin{macrocode}
\cs_set_eq:NN \l_last_skip \tex_lastskip:D
%    \end{macrocode}
% \end{macro}
%
% \subsection{Sequences}
%
% \begin{function}{\seq_map_inline:Npn}
%   \begin{syntax}
%     \cs{seq_map_inline:Npn} <seq> <params> <function definition>
%   \end{syntax}
%   Applies the <function definition> to each element of <seq>
%   using delimited arguments defined by <params>.
%
%   Note that each element is internally delimited so argument matching
%   will be `greedy': writing "\seq_map_inline:Npn \foo #1,#2 {[#1,#2]}"
%   for element "abc,def" will print `[abc,def]'. Which may or may not seem
%   natural to you, depending how familiar you are with \TeX's delimited
%   arguments.
%   
%   For this reason this function is not broadly advertised ":)"
% \end{function}
%
% \begin{macro}{\seq_map_inline:Npn}
%   When a "seq" contains multiple pieces of information.
%   (Perhaps I should be using a "prop" instead; to consider!)
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \seq_map_inline:Npn #1
  {
    \tl_set:Nn \l_seq_tmpa_tl {#1}
    \tex_afterassignment:D \seq_map_inline_Npn_aux:
    \cs_set:Npn \seq_tmp:w
  }
\cs_new_protected_nopar:Npn \seq_map_inline_Npn_aux:
  {
    \seq_push_item_def:n { \seq_tmp:w ##1 }
    \l_seq_tmpa_tl
    \seq_break_point:n { \seq_pop_item_def: }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\seq_self_map_inline:Npn,\seq_gself_map_inline:Npn}
% \cs{seq_map_break:} not allowed within.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \seq_self_map_inline:Npn
  { \seq_self_map_inline_aux:NNpn \tl_set:Nx }
\cs_new_protected_nopar:Npn \seq_gself_map_inline:Npn
  { \seq_self_map_inline_aux:NNpn \tl_gset:Nx }
\cs_new_protected_nopar:Npn \seq_self_map_inline_aux:NNpn #1 #2
  {
    \tl_set:Nn \l_seq_tmpa_tl { #1 #2 {#2} }
    \tex_afterassignment:D \seq_self_map_inline_aux_ii:
    \cs_set:Npn \seq_tmp:w
  }
\cs_new_protected_nopar:Npn \seq_self_map_inline_aux_ii:
  {
    \seq_push_item_def:n
      {
        \exp_not:N \seq_item:n
          { \seq_tmp:w ##1 \seq_self_end: }
      }
    \l_seq_tmpa_tl
    \seq_pop_item_def:
  }
\cs_new:Npn \seq_self_end: { }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\seq_if_anywhere_in:NnTF}
% This function differs from the regular \cs{seq_if_in:NnTF} in that the
% target string is found even within elements of the sequence.
% It's not entirely robust as it uses stringification of the sequence internals.
%    \begin{macrocode}
\prg_new_conditional:Npnn \seq_if_anywhere_in:Nn #1#2 {TF,T,F}
  {
    \exp_args:Nxx \tl_if_in:nnTF { \tl_to_str:N #1 } { \tl_to_str:n {#2} }
      {\prg_return_true:} {\prg_return_false:}
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Math}
%
% \begin{function}{\math_inner:}
%   \begin{syntax}
%     "$"\cs{math_inner:} \dots{} "$"
%   \end{syntax}
%   This command is used inside an inline math environment; it removes
%   the surrounding space that normally appears around it in the text.
%   It is used when creating symbols and using maths inside tight boxes where
%   this space padding is unnecessary/inappropriate.
%   \begin{texnote}
%     This is \LaTeXe's \tn{m@th}.
%   \end{texnote}
% \end{function}
%
% \begin{macro}{\math_inner:}
% This is \LaTeXe's "\m@th".
%    \begin{macrocode}
\cs_new:Npn \math_inner: { \tex_mathsurround:D \c_zero_dim }
%<package>\cs_set_eq:NN \m@th \math_inner:
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\math_nospace:}
%    \begin{macrocode}
\cs_new:Npn \math_nospace:
  {
    \tex_nulldelimiterspace:D \c_zero_dim
    \tex_mathsurround:D \c_zero_dim
  }
%    \end{macrocode}
% \end{macro}
%
%
%
% \section{Messages}
%
% The message texts are set up within a group where spaces
% are not ignored.
%    \begin{macrocode}
\group_begin:
  \char_set_catcode_space:n {32}
  \msg_new:nnn {xfss} {only-math-cmd} { #1 allowed only in math mode }
  \msg_new:nnn {xfss} {not-math-cmd} { Command #1 invalid in math mode }
%    \end{macrocode}
%
% \subsection{Info messages}
%
%    \begin{macrocode}
  \msg_new:nnn {xfss} {redecl-enc} { Redeclaring font encoding #1 }
  \msg_new:nnn {xfss} {overwrite-enc-defaults}
    { Overwriting encoding scheme #1 defaults }
  \msg_new:nnn {xfss} {try-load} { Try loading font information for #1 }
  \msg_new:nnn {xfss} {calc-math-sizes} { Calculating math sizes for size <#1> }
  \msg_new:nnn {xfss} {checking-defaults} { Checking defaults for #1 }
  \msg_new:nnn {xfss} {okay!} { ... okay }
  \msg_new:nnn {xfss} {redecl-symfont} { Redeclaring symbol font `#1' }
  \msg_new:nnn {xfss} {enc-change}
    {
      Encoding `#1' has changed to `#2' for symbol font\\
      `#3' in the math version `#4'
    }
  \msg_new:nnn {xfss} {overwrite-symfont}
    {
      Overwriting symbol font `#1' in version `#2'\\
      \c_space_tl \c_space_tl \c_space_tl \c_space_tl
      #3 --> #4
    }
  \msg_new:nnn {xfss} {overwrite-mathalph}
    {
      Overwriting math alphabet `#1' in version `#2'\\
      \c_space_tl \c_space_tl \c_space_tl \c_space_tl
      #3 --> #4
    }
%    \end{macrocode}
% These should be refactored into a single message:
%    \begin{macrocode}
  \msg_new:nnn {xfss} {redecl-mvers}    { Redeclaring math version `#1' }
  \msg_new:nnn {xfss} {redecl-mathalph} { Redeclaring math alphabet `#1' }
  \msg_new:nnn {xfss} {redecl-maccent}  { Redeclaring math accent `#1' }
  \msg_new:nnn {xfss} {redecl-symbol}   { Redeclaring math symbol `#1' }
  \msg_new:nnn {xfss} {redecl-delim}    { Redeclaring math delimiter `#1' }
  \msg_new:nnn {xfss} {redecl-radical}  { Redeclaring math radical `#1' }
%    \end{macrocode}
%
%
% \subsection{Warnings}
%
%    \begin{macrocode}
  \msg_new:nnn {xfss} {missing-font-shape}
    { Font shape `#1' undefined; using `#2' instead #3 }
  \msg_new:nnn {xfss} {size-subst}
    { Size substitutions with differences of up to #1 have occurred. }
  \msg_new:nnn {xfss} {font-shape-unavail}
    { Font shape `#1' in size <#2> not available, size <#3> substituted. }
  \msg_new:nnn {xfss} {some-font-shapes-unavail}
    { Some font shapes were not available, defaults substituted. }
  \msg_new:nnn {xfss} {deprecated-function}
    {
      The command #1 is deprecated and will be ignored. Any commands
      that are supposed to be defined here will not exist!
    }
%    \end{macrocode}
%
% \subsection{Errors}
%
%    \begin{macrocode}
  \msg_new:nnn {xfss} {cmd-defined} { Command `#1' already defined }
%    \end{macrocode}
%
% \subsection{Wrappers for messages}
%
%    \begin{macrocode}
  \msg_new:nnnn {xfss} {invalid-in-math}
    { Command \token_to_str:N #1 \ invalid in math mode }
    {
       \str_if_eq:xxTF {\exp_not:N #1} { \relax }
         {
           Please define a new math alphabet
           if you want to use a special font in math mode
         }
         {
            Please use the math alphabet \token_to_str:N #2 \
            instead of the #1 command
         }
       .
    }
%    \end{macrocode}
%
%    \begin{macrocode}
  \msg_new:nnnn {xfss} {no-math-alph}
    {
      Math alphabet identifier #1 is undefined in math
      version `\l_xfss_math_version_tl'.
    }
    {
      Your requested math alphabet is undefined in the current
      math version. Check the spelling or use the
      \token_to_str:N \SetMathAlphabet \ command.
    }
  \msg_new:nnnn {xfss} {no-math-alph-cmd}
    { Command `#1' not defined as a math alphabet. }
    { Use \token_to_str:N \DeclareMathAlphabet \ to define it. }
%    \end{macrocode}
%
%    \begin{macrocode}
  \msg_new:nnn {xfss} {unavail-in-enc}
    { Command #1 unavailable in encoding \g_xfss_curr_enc_tl. }
  \msg_new:nnn {xfss} {font-family-unknown} { Font family `#1' unknown. }
  \msg_new:nnn {xfss} {font-enc-unknown} { Encoding scheme `#1' unknown. }
  \msg_new:nnn {xfss} {sym-font-unknown} { Symbol font `#1' not defined. }
  \msg_new:nnnn {xfss} {math-version-unknown}
    { Math version `#1' is not defined. }
    {
      You probably mispelled the name of the math version.
      Or you have to specify an additional package.
    }
  \msg_new:nnn {xfss} {font-not-found} { Font `#1' not found. }
  \msg_new:nnn {xfss} {too-many-alphabets}
    { Too many math alphabets used in version #1. }
  \msg_new:nnn {xfss} {not-cmd} {Not a command name: `#1'}
%    \end{macrocode}
%
%    \begin{macrocode}
  \msg_new:nnnn {xfss} {xfss-broken} { This XFSS system isn't set up properly. }
    { For encoding scheme #1 the defaults #2 do not form a valid font shape. }
  \msg_new:nnnn {xfss} {no-error-font} {This XFSS system isn't set up properly.}
    {
      The system maintainer forgot to specify a suitable substitution
      font shape using the \token_to_str:N \DeclareErrorFont \ command.
    }
%    \end{macrocode}
%
% \subsection{Font definition parsing messages}
%
%    \begin{macrocode}
  \msg_new:nnn {xfss} {font-shape-scale}
    {
      Font shape `\g_xfss_curr_font_shape_tl' will be
      scaled to size \dim_use:N \l_xfss_tmpb_dim.
    }
  \msg_new:nnn {xfss} {font-shape-size-missing}
    {
      Font shape `\g_xfss_curr_font_shape_tl' in size
      <\g_xfss_fsize_tl> not available.
      Font shape `\l_xfss_mandatory_arg_tl' tried instead.
    }
  \msg_new:nnn {xfss} {font-shape-size-instead}
    {
      Font shape `\g_xfss_curr_font_shape_tl' in size
      <\g_xfss_fsize_tl> not available.
      External font `\l_xfss_mandatory_arg_tl' used.
    }
  \msg_new:nnn {xfss} {ext-font-loaded}
    {
      External font `\l_xfss_external_font_tl' loaded for size
      <\g_xfss_fsize_tl>
    }
%    \end{macrocode}
% Finally restore the normal catcode for the space character.
%    \begin{macrocode}
\group_end:
%    \end{macrocode}
%
% Three functions which only issue messages when in math mode.
%    \begin{macrocode}
\cs_new_protected:Npn \xfss_check_not_math:N #1
  {
    \mode_if_math:T
      { \msg_warning:nnx {xfss} {not-math-cmd} { \token_to_str:N #1 } }
  }
\cs_new_protected:Npn \xfss_check_not_math_alphabet:NN #1 #2
  {
    \mode_if_math:T
      { \msg_error:nnxx {xfss} {invalid-in-math} #1 #2 }
  }
\cs_new_protected:Npn \xfss_no_alphabet_error:N #1
  {
    \mode_if_math:T
      { \msg_error:nnx {xfss} {no-math-alph} { \token_to_str:N #1 } }
  }
%    \end{macrocode}
%
%
%
% \section{Preliminaries}
%
%    \begin{macrocode}
\int_const:Nn \c_max_math_fonts_int {16}
%    \end{macrocode}
%
% \begin{macro}{\mathgroup}
% Same as \TeX{}'s \tn{fam}.
%    \begin{macrocode}
\cs_set_eq:NN \mathgroup \tex_fam:D
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\mathgroup_new:N}
%    \begin{macrocode}
%<*package>
\cs_set_eq:NN \mathgroup_new:N \new@mathgroup
%</package>
%<*initex>
\alloc_new:nnnN {mathgroup} \c_zero \c_sixteen \tex_chardef:D
%</initex>
\cs_generate_variant:Nn \mathgroup_new:N {c}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\newfam}
% User function for creating new maths families.
% Shouldn't be necessary.
%    \begin{macrocode}
%<*deprecated>
\cs_set_eq:NN \newfam \mathgroup_new:N
%</deprecated>
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\newfont,\symbol}
% Keep these here for the time being.
% \cs{newfont} is taken care of by \pkg{l3font}, so deprecate it.
%    \begin{macrocode}
%<*deprecated>
\cs_set_eq:NN \newfont \fontface_new:Nn
%</deprecated>
\DeclareDocumentCommand \symbol {m} {\char #1\relax}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\baselinestretch}
%    \begin{macrocode}
\tl_set:Nn \baselinestretch {1}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\defaultscriptratio,\defaultscriptscriptratio}
%    \begin{macrocode}
\tl_set:Nn \defaultscriptratio {.7}
\tl_set:Nn \defaultscriptscriptratio {.5}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\math_operator_font:}
% This command is used to switch to the font for typesetting operators
% such as \cs{lim}.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \math_operator_font: {\mathgroup\symoperators}
%    \end{macrocode}
% \end{macro}
%
% \section{Variables, booleans, etc.}
%
%    \begin{macrocode}
\bool_new:N \g_xfss_math_fonts_bool
\bool_set_true:N \g_xfss_math_fonts_bool
%    \end{macrocode}
%
%    \begin{macrocode}
\bool_new:N \l_xfss_maybe_ic_bool
\bool_new:N \l_xfss_tmp_bool
%    \end{macrocode}
%
%    \begin{macrocode}
\skip_new:N \l_xfss_tmp_skip
\dim_new:N \l_xfss_tmpa_dim
\dim_new:N \l_xfss_tmpb_dim
\dim_new:N \l_xfss_tmpc_dim
%    \end{macrocode}
%
%    \begin{macrocode}
\toks_new:N \l_xfss_tmp_toks
%    \end{macrocode}
%
% These contain any default setup commands for when selecting the
% default text/math encodings.
%    \begin{macrocode}
\cs_clear:N \xfss_setup_default_text_encoding:
\cs_clear:N \xfss_setup_default_math_encoding:
%    \end{macrocode}
%
%    \begin{macrocode}
\tl_clear:N \g_xfss_curr_math_size_tl
%    \end{macrocode}
%
% Used to calculate font sizes and baselineskips automatically:
%    \begin{macrocode}
\fp_new:N \l_xfss_fsize_fp
\fp_new:N \l_xfss_bskip_fp
\fp_new:N \l_xfss_pow_fp
%    \end{macrocode}
%
% \section{Tools}
%
% \begin{macro}{\xfss_switch_catcodes:}
% Turn on the catcode regime.
%    \begin{macrocode}
\cs_new:Nn \xfss_switch_catcodes:
  {
     \makeatletter
     \char_set_catcode_ignore:n {32} % space
     \char_set_catcode_ignore:N \^^I
     \char_set_catcode_ignore:N \^^M
     \char_set_catcode_escape:N \\
     \char_set_catcode_begin_group:N \{
     \char_set_catcode_end_group:N \}
     \char_set_catcode_parameter:N \#
     \char_set_catcode_math_superscript:N \^
     \char_set_catcode_comment:N \%
     \char_set_catcode_other:N \<
     \char_set_catcode_other:N \>
     \char_set_catcode_other:N \*
     \char_set_catcode_other:N \.
     \char_set_catcode_other:N \-
     \char_set_catcode_other:N \/
     \char_set_catcode_other:N \[
     \char_set_catcode_other:N \]
     \char_set_catcode_other:N \`
     \char_set_catcode_other:N \'
     \char_set_catcode_other:N \"
  }
%    \end{macrocode}
% \end{macro}
%
%
% \section{Text encodings etc.}
%
%%% From File: ltoutenc.dtx
%
% \begin{macro}{\DeclareTextCommand,\ProvideTextCommand}
%   \begin{syntax}
%     \cs{DeclareTextCommand} <cmd> \Arg{enc.} <opt. arg> \Arg{def'n}
%   \end{syntax}
%    \begin{macrocode}
\DeclareDocumentCommand \DeclareTextCommand {mmomg}
  {
    \IfNoValueTF {#5}
      {
        \IfNoValueTF {#3}
          {% no argument
            \xfss_declare_text_command:NNn
              \DeclareDocumentCommand #1 {#2} {} {#4}
          }
          {% old-style syntax with arguments
            \xfss_declare_text_command:NNn
              \DeclareRobustCommand #1 {#2} [#3] {#4}
          }
      }
      {
        \IfNoValueTF {#3}
          {%  arguments
            \xfss_declare_text_command:NNn
              \DeclareDocumentCommand #1 {#2} {#3} {#4}
          }
          {% can't have both optional arguments!
            \ERROR
          }
      }
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareDocumentCommand \ProvideTextCommand {mmomg}
  {
    \IfNoValueTF {#5}
      {
        \IfNoValueTF {#3}
          {% no argument
            \xfss_declare_text_command:NNn
              \ProvideDocumentCommand #1 {#2} {} {#4}
          }
          {% old-style syntax with arguments
            \xfss_declare_text_command:NNn
              \DeclareRobustCommand #1 {#2} [#3] {#4}
          }
      }
      {
        \IfNoValueTF {#3}
          {%  arguments
            \xfss_declare_text_command:NNn
              \ProvideDocumentCommand #1 {#2} {#3} {#4}
          }
          {% can't have both optional arguments!
            \ERROR
          }
      }
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new:Nn \xfss_declare_text_command:NNn
  {
    \cs_set_protected:Npx #2
      {
        \exp_not:c {#3-cmd}
        \exp_not:N #2
        \exp_not:c {#3\token_to_str:N#2}
      }
    \exp_args:Nc #1 {#3\token_to_str:N#2}
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\DeclareTextCommandDefault,\ProvideTextCommandDefault}
%    \begin{macrocode}
\DeclareDocumentCommand \DeclareTextCommandDefault {m}
  { \DeclareTextCommand #1 ? }
\DeclareDocumentCommand \ProvideTextCommandDefault {m}
  { \ProvideTextCommand #1 ? }
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\DeclareTextSymbol}
%    \begin{macrocode}
\DeclareDocumentCommand \DeclareTextSymbol {mmm}
  { \xfss_declare_text_command:NNn \tex_chardef:D #1 {#2} #3 \scan_stop: }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\cs_new_protected:Npn \xfss_current_cmd:nn #1
  { \xfss_check_not_math:N #1 }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected:Nn \xfss_changed_cmd:nn
  {
    \xfss_check_not_math:N #1
    \cs_if_exist:cF { \g_xfss_curr_enc_tl \token_to_str:N #1 }
      {
        \cs_if_exist:cF { ? \token_to_str:N #1 }
          { \cs_set:cpn { ? \token_to_str:N #1 } { \TextSymbolUnavailable #1 } }
        \cs_gset_eq:cc { \g_xfss_curr_enc_tl \token_to_str:N #1 }
          { ? \token_to_str:N #1 }
      }
    \use:c {\g_xfss_curr_enc_tl\token_to_str:N#1}
  }
%    \end{macrocode}
%
% \begin{macro}{\TextSymbolUnavailable}
%    \begin{macrocode}
\DeclareDocumentCommand \TextSymbolUnavailable {m}
  { \msg_error:nnx {xfss} {unavail-in-enc} { \token_to_str:N #1 } }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\?-cmd}
%    \begin{macrocode}
\cs_set_eq:cN {?-cmd} \xfss_changed_cmd:nn
%    \end{macrocode}
% \end{macro}
%
%
% fixme: spacefactor wrapper; accent wrapper
%
% \begin{macro}{\DeclareTextAccent}
%    \begin{macrocode}
\DeclareDocumentCommand \DeclareTextAccent {mmm}
  { \DeclareTextCommand #1 {#2} { \xfss_add_accent:nn {#3} } }
\cs_new:Npn \xfss_add_accent:nn #1#2
  {
    \mode_leave_vertical:
    {
      \cs_set_eq:NN \xfss_outer_group_hmode:n \use:n
      \hbox_set:Nn \l_tmpa_box
        {
          #2
          \tex_global:D
          \tex_mathchardef:D \g_xfss_accent_spacefactor_char \tex_spacefactor:D
        }
      \tex_accent:D #1 #2
    }
    \tex_spacefactor:D \g_xfss_accent_spacefactor_char
  }
\cs_null:N \g_xfss_accent_spacefactor_char
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\DeclareTextCompositeCommand}
%    \begin{macrocode}
\DeclareDocumentCommand \DeclareTextCompositeCommand {mmmm}
  {
    \cs_set_eq:Nc \xfss_tmp:w { #2 \token_to_str:N #1 }
    \exp_args:No \tl_if_head_eq_meaning:nNF
      { \xfss_tmp:w \scan_stop: \scan_stop: }
      \xfss_text_composite:w
    {
      \cs_set:Npx \xfss_tmp:n ##1
        {
          \cs_set:Npn \exp_not:c { #2 \token_to_str:N #1 } ####1
            {
              \exp_not:N \xfss_text_composite:w
              \exp_not:c { #2 \token_to_str:N #1 }
              ####1
              \exp_not:N \c_empty_tl
              \exp_not:N \q_nil
              {##1}
            }
        }
      \exp_args:No \xfss_tmp:n { \xfss_tmp:w {##1} }
    }
    \tl_set:cn { \token_to_str:c {#2} \tl_to_str:n {#1-#3} } {#4}
  }
\cs_new:Npn \xfss_text_composite:w #1#2#3 \q_nil
  {
    \cs_if_exist:cTF { \token_to_str:N #1 - \token_to_str:N #2 }
    { \use:c { \token_to_str:N #1 - \token_to_str:N #2 } \use_none:n }
    { \use:n }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\DeclareTextComposite}
%    \begin{macrocode}
\tl_set:Nx \l_xfss_tmpa_tl
  { \tex_catcode:D \c_zero=\tex_the:D\tex_catcode:D \c_zero\scan_stop: }
\char_set_catcode_letter:n {\c_zero} % which is "^^@" below
\DeclareDocumentCommand \DeclareTextComposite {mmmm}
  {
    \tl_gset:Nn \l_xfss_tmpb_tl
      { \DeclareTextCompositeCommand #1 {#2} {#3} }
    \group_begin:
      \tex_lccode:D \c_zero #4
      \tex_lowercase:D  {
    \group_end:
    \l_xfss_tmpb_tl ^^@ }
  }
\l_xfss_tmpa_tl
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareDocumentCommand \UseTextAccent {mmm}
  {
    \xfss_outer_group_hmode:n
      {
        \cs_set_eq:NN \xfss_outer_group_hmode:n \use:n
        \tl_set_eq:NN \l_xfss_curr_enc_tl \g_xfss_curr_enc_tl
        \xfss_use_text_encoding:n {#1}
        #2 { \xfss_use_text_encoding:n \l_xfss_curr_enc_tl #3 }
      }
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareDocumentCommand \UseTextSymbol {mm}
  {
    \xfss_outer_group_hmode:n
      {
        \tl_set:Nn \l_xfss_wrong_font_char_msg_tl
          { \MessageBreak for \exp_not:N\symbol`\token_to_str:N#2' }
        \xfss_use_text_encoding:n {#1}
        #2
      }
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new:Npn \xfss_use_text_encoding:n #1
  {
     \tl_set:Nn \g_xfss_encoding_tl {#1}
     \tl_set:Nc \g_xfss_font_cs_tl
       { \g_xfss_curr_font_shape_tl / \g_xfss_fsize_tl }
     \xfss_maybe_define_new_font:
     \g_xfss_font_cs_tl
     \xfss_update_encoding:
  }
\cs_new_protected:Npn \xfss_outer_group_hmode:n #1
  { \mode_leave_vertical: {#1} }
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\DeclareTextSymbolDefault,\DeclareTextAccentDefault,
%               \UndeclareTextCommand}
%    \begin{macrocode}
\DeclareDocumentCommand \DeclareTextSymbolDefault {mm}
  { \DeclareTextCommandDefault #1 { \UseTextSymbol {#2} #1 } }
\DeclareDocumentCommand \DeclareTextAccentDefault {mm}
  { \DeclareTextCommandDefault #1 { \UseTextAccent {#2} #1 } }
\DeclareDocumentCommand \UndeclareTextCommand {mm}
  {
    \cs_if_exist:cT { #2 \token_to_str:N #1 }
      {
        \cs_undefine:c { #2 \token_to_str:N #1 }
        \exp_after:wN \exp_after:wN \exp_after:wN
        \cs_if_free:NT \exp_after:wN \use_iii:nnn #1
          {
            \tl_gset:Nx #1
              {
                \exp_not:c {?-cmd}
                \exp_not:N #1
                \exp_not:c { ? \token_to_str:N #1 }
              }
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\cs_new_protected:Npn \xfss_orig_accent:N #1
  { \exp_args:Nc \xfss_changed_cmd:nn { \token_to_str:N #1 } \scan_stop: }
\cs_set_eq:NN \a \xfss_orig_accent:N
%    \end{macrocode}
%
% \subsection{Initial setup for symbols}
%
%    \begin{macrocode}
\DeclareTextSymbolDefault{\textasteriskcentered}{OMS}
\DeclareTextSymbolDefault{\textbackslash}{OMS}
\DeclareTextSymbolDefault{\textbar}{OMS}
\DeclareTextSymbolDefault{\textbardbl}{OMS}
\DeclareTextSymbolDefault{\textbraceleft}{OMS}
\DeclareTextSymbolDefault{\textbraceright}{OMS}
\DeclareTextSymbolDefault{\textbullet}{OMS}
\DeclareTextSymbolDefault{\textdaggerdbl}{OMS}
\DeclareTextSymbolDefault{\textdagger}{OMS}
\DeclareTextSymbolDefault{\textparagraph}{OMS}
\DeclareTextSymbolDefault{\textperiodcentered}{OMS}
\DeclareTextSymbolDefault{\textsection}{OMS}
\DeclareTextAccentDefault{\textcircled}{OMS}
\DeclareTextSymbolDefault{\textless}{OML}
\DeclareTextSymbolDefault{\textgreater}{OML}
\DeclareTextAccentDefault{\t}{OML}
\DeclareTextCommandDefault{\textcopyright}{\textcircled{c}}
\DeclareTextCommandDefault{\textasciicircum}{\^{}}
\DeclareTextCommandDefault{\textasciitilde}{\~{}}
\DeclareTextCommandDefault{\textcompwordmark}
  { \mode_leave_vertical:\kern\c_zero_dim }
\DeclareTextCommandDefault{\textunderscore}
  { \mode_leave_vertical: \kern .06em \vbox {\hrule width.3em} }
\DeclareTextCommandDefault{\textvisiblespace}
  {
    \mbox{\kern .06em \vrule height .3ex}
    \vbox{\hrule width .3em}
    \hbox{\vrule height .3ex}
  }
\DeclareTextCommandDefault{\textellipsis}
  {
    .\kern \fontface_current_space_stretch:
    .\kern \fontface_current_space_stretch:
    .\kern \fontface_current_space_stretch:
  }
\DeclareTextCommandDefault{\textregistered}
  {
    \textcircled
      {
        \xfss_check_math_fonts:
        \fontsize \g_xfss_sf_size_tl \c_zero_dim
        \bool_set_false:N \g_xfss_math_fonts_bool
        \selectfont R
      }
  }
\DeclareTextCommandDefault{\texttrademark}{\textsuperscript{TM}}
\DeclareTextCommandDefault{\SS}{SS}
\DeclareTextCommandDefault{\textordfeminine}{\textsuperscript{a}}
\DeclareTextCommandDefault{\textordmasculine}{\textsuperscript{o}}
\DeclareDocumentCommand{\$}{}{\mode_if_math:TF\mathdollar\textdollar}
\DeclareDocumentCommand{\{}{}{\mode_if_math:TF\lbrace\textbraceleft}
\DeclareDocumentCommand{\}}{}{\mode_if_math:TF\rbrace\textbraceright}
\DeclareDocumentCommand{\P}{}{\mode_if_math:TF\mathparagraph\textparagraph}
\DeclareDocumentCommand{\S}{}{\mode_if_math:TF\mathsection\textsection}
\DeclareDocumentCommand{\dag}{}{\mode_if_math:TF{{\dagger}}\textdagger}
\DeclareDocumentCommand{\ddag}{}{\mode_if_math:TF{{\ddagger}}\textdaggerdbl}
\DeclareDocumentCommand{\_}{}
  {
    \mode_if_math:TF {\xfss_text_in_math:n{\textunderscore}}
                     {\textunderscore}
  }
\DeclareDocumentCommand \copyright {}
  {
    \mode_if_math:TF {\xfss_text_in_math:n{\textcopyright}}
                     {\textcopyright}
  }
\DeclareDocumentCommand{\pounds}{}
  { \mode_if_math:TF \mathsterling \textsterling }
\DeclareDocumentCommand{\dots}{}
  { \mode_if_math:TF \mathellipsis \textellipsis }
\cs_set_eq:NN \ldots\dots
%    \end{macrocode}
%
%
% \section{Maths font setup}
% From File: ltfssbas.dtx
%
%    \begin{macrocode}
\DeclareDocumentCommand \DeclareFontShape {}
  {
    \group_begin:
      \xfss_switch_catcodes:
      \exp_after:wN
    \group_end:
    \xfss_declare_font_shape:nnnnnn
  }
\cs_new_protected:Npn \xfss_declare_font_shape:nnnnnn #1#2#3#4#5#6
  {
    \cs_if_exist:cTF {#1+#2}
      {
        \cs_gset:cpx {#1/#2/#3/#4} {\exp_not:c {#5}}
        \cs_gset:cpn {#5} {#6}
      }
      { \msg_error:nnx {xfss} {font-family-unknown} {#1+#2} }
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareDocumentCommand \DeclareFixedFont { mmm mmm }
  {
    \group_begin:
      \bool_set_false:N \g_xfss_math_fonts_bool
      \toks_clear:N \g_xfss_every_math_size_toks
      \fontsize{#6}{\c_zero_dim}
      \usefont{#2}{#3}{#4}{#5}
      \fontface_gset_to_current:N #1
    \group_end:
  }
\cs_new_protected_nopar:Npn \xfss_activate_subst_correction:
  {
    \cs_gset:Npx \xfss_subst_correction:
      {
        \g_xfss_font_cs_tl
        \fontface_gset:cn {\g_xfss_curr_font_shape_tl/\g_xfss_fsize_tl}
          { \exp_not:N \fontface_current_info: }
      }
    \group_insert_after:N \xfss_subst_correction:
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareDocumentCommand \DeclareFontFamily {mmm}
  {
    \xfss_if_text_encoding_exists:nT {#1}
      { \tl_gset:cn {#1+#2} {#3} }
  }
\seq_new:N \g_xfss_cdp_seq
\DeclareDocumentCommand \DeclareFontEncoding {}
  {
    \group_begin:
    \xfss_switch_catcodes:
    \exp_after:wN \group_end:
    \xfss_declare_font_encoding:nnn
  }
\cs_new_protected:Npn \xfss_declare_font_encoding:nnn #1#2#3
  {
    \cs_if_exist:cTF {xfss_setup_text_encoding_ #1 :}
      { \msg_info:nnx {xfss} {redecl-enc} {#1} }
      {
        \seq_put_right:Nx \g_xfss_cdp_seq
          {
            {#1} {\g_xfss_default_family_tl} {\g_xfss_default_series_tl}
            {\g_xfss_default_shape_tl}
          }
        \cs_set_eq:cN {#1-cmd} \xfss_changed_cmd:nn
      }
    \cs_gset:cpn {xfss_setup_text_encoding_ #1 :} {#2}
    \cs_gset:cpn {xfss_setup_math_encoding_ #1 :}
      { \xfss_setup_default_math_encoding: #3 }
    \tl_gset:Nn \LastDeclaredEncoding {#1}
  }
\tl_clear:N \LastDeclaredEncoding
\DeclareDocumentCommand \DeclareFontSubstitution {mmmm}
  {
    \xfss_if_text_encoding_exists:nT {#1}
      {
        \seq_clear:N \l_reserved_tmpa_seq
        \seq_map_inline:Npn \g_xfss_cdp_seq ##1##2##3##4
          {
            \tl_if_eq:xnTF {#1} {##1}
              { \seq_put_right:Nn \l_reserved_tmpa_seq { {##1}{#2}{#3}{#4} } }
              { \seq_put_right:Nn \l_reserved_tmpa_seq {{##1}{##2}{##3}{##4}}}
          }
        \seq_gset_eq:NN \g_xfss_cdp_seq \l_reserved_tmpa_seq
        \cs_gset:cpn {xfss_defaults_setup_ #1 :}
          {
            \tl_set:Nn \g_xfss_default_family_tl {#2}
            \tl_set:Nn \g_xfss_default_series_tl {#3}
            \tl_set:Nn \g_xfss_default_shape_tl  {#4}
          }
      }
  }
\DeclareDocumentCommand \DeclareFontEncodingDefaults {mm}
  {
    \str_if_eq:xxF {\exp_not:N \relax} {\exp_not:N #1}
      {
        \cs_if_eq:NNF \xfss_setup_default_text_encoding: \prg_do_nothing:
          { \msg_info:nnx {xfss} {overwrite-enc-defaults} {text} }
        \cs_gset:Npn \xfss_setup_default_text_encoding: {#1}
      }
    \str_if_eq:xxF {\exp_not:N \relax} {\exp_not:N #2}
      {
        \cs_if_eq:NNF \xfss_setup_default_math_encoding: \prg_do_nothing:
          { \msg_info:nnx {xfss} {overwrite-enc-defaults} {math} }
        \cs_gset:Npn \xfss_setup_default_math_encoding: {#2}
      }
  }


\DeclareDocumentCommand \DeclarePreloadSizes {mm mmm}
  {
    \xfss_if_text_encoding_exists:nT {#1}
      {
        \group_begin:
          \clist_map_inline:nn {#5}
            {
              \tl_gset:Nx \g_xfss_font_cs_tl { \use:c {#1/#2/#3/#4/##1} }
              \xfss_maybe_define_new_font:
              \exp_after:wN \cs_gnull:N \g_xfss_font_cs_tl
            }
        \group_end:
      }
  }
%    \end{macrocode}
%
% \begin{macro}{\DeclareMathSizes}
% The starred form seems undocumented? (Haven't checked TLC.)
% \begin{arguments}
% \item \meta{star?}
% \item text size \item math text size \item math script size
% \item math scriptscript size
% \end{arguments}
%    \begin{macrocode}
\DeclareDocumentCommand \DeclareMathSizes {s mm mm}
  {
    \xfss_default_units:w \l_xfss_tmpa_dim #2 pt \relax \q_nil
    \tl_if_blank:nTF {#3}
      {
        \cs_set_eq:cN {xfss_set_font_size_ \dim_strip_pt:N \l_xfss_tmpa_dim :}
        \bool_set_false:N \g_xfss_math_fonts_bool
      }
      {
        \cs_gset:cpx {xfss_set_font_size_ \dim_strip_pt:N \l_xfss_tmpa_dim :}
          {
            \tl_gset:Nn \exp_not:N \g_xfss_tf_size_tl  {#3}
            \tl_gset:Nn \exp_not:N \g_xfss_sf_size_tl  {#4}
            \tl_gset:Nn \exp_not:N \g_xfss_ssf_size_tl {#5}
            \IfBooleanT #1
              { \exp_not:N \bool_set_false:N \g_xfss_math_fonts_bool }
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\fontencoding}
%    \begin{macrocode}
\DeclareDocumentCommand \fontencoding {m}
  {
    \xfss_if_text_encoding_exists:nT {#1}
      {
        \tl_set:Nx \g_xfss_encoding_tl {#1}
        \tl_if_eq:NNTF \g_xfss_curr_enc_tl \g_xfss_encoding_tl
          {
            \cs_null:N \xfss_maybe_update_encoding: % fixme: better as "clear"?
          }{
            \cs_set_eq:NN \xfss_maybe_update_encoding: \xfss_update_encoding:
          }
      }
  }
\cs_new:Nn \xfss_update_encoding:
  {
    \cs_set_eq:cN {\g_xfss_curr_enc_tl -cmd} \xfss_changed_cmd:nn
    \cs_set_eq:cN {\g_xfss_encoding_tl -cmd} \xfss_current_cmd:nn
    \xfss_setup_default_text_encoding:
    \use:c {xfss_setup_text_encoding_ \g_xfss_encoding_tl :}
    \use:c {xfss_defaults_setup_\g_xfss_encoding_tl :}
    \cs_null:N \xfss_maybe_update_encoding: % fixme: better as "clear"?
    \tl_set_eq:NN \g_xfss_curr_enc_tl \g_xfss_encoding_tl
  }
\cs_null:N \xfss_maybe_update_encoding: % fixme: better as "clear"?
%    \end{macrocode}
% fixme: I think seq_eq to "\prg_do_nothing:" would be better.
% \end{macro}
%
%    \begin{macrocode}
\DeclareDocumentCommand \fontfamily {m} { \tl_set:Nx \g_xfss_family_tl {#1} }
\DeclareDocumentCommand \fontseries {m} { \tl_set:Nx \g_xfss_series_tl {#1} }
\DeclareDocumentCommand \fontshape  {m} { \tl_set:Nx \g_xfss_shape_tl  {#1} }
\DeclareDocumentCommand \usefont {mmmm}
  {
    \fontencoding {#1}
    \fontfamily   {#2}
    \fontseries   {#3}
    \fontshape    {#4}
    \selectfont
    \ignorespaces
  }
\DeclareDocumentCommand \linespread {m}
  { \xfss_set_fontsize:nnn {#1} \g_xfss_fsize_tl \g_xfss_baselineskip_tl }
\DeclareDocumentCommand \fontsize {mm}
  { \xfss_set_fontsize:nnn \baselinestretch {#1} {#2} }
\tl_clear:N \g_xfss_family_tl
\tl_clear:N \g_xfss_series_tl
\tl_clear:N \g_xfss_shape_tl
\tl_clear:N \g_xfss_fsize_tl
\tl_clear:N \g_xfss_baselineskip_tl
\tl_clear:N \g_xfss_linespread_tl
\tl_clear:N \g_xfss_encoding_tl
\tl_clear:N \g_xfss_curr_enc_tl
\cs_new_protected_nopar:Npn \xfss_default_units:w
  { \tex_afterassignment:D \use_none_delimit_by_q_nil:w }
\DeclareDocumentCommand \mathversion {m}
  {
    \xfss_check_not_math:N \mathversion
    \cs_if_exist:cTF {mv_#1}
      {
        \tl_set:Nx \l_xfss_math_version_tl {#1}
        \tl_gclear:N \xfss_gsetup_currsize:
        \group_insert_after:N \g_xfss_global_settings_tl
      }
      { \msg_error:nnx {xfss} {math-version-unknown} {#1} }
  }
%    \end{macrocode}
% Todo: incorporate everyhook
%    \begin{macrocode}
\cs_new_eq:NN \g_hook_everymath_toks    \tex_everymath:D
\cs_new_eq:NN \g_hook_everydisplay_toks \tex_everydisplay:D
\cs_undefine:N \everymath
\cs_undefine:N \everydisplay
\toks_new:N \everymath
\toks_new:N \everydisplay
\toks_set:Nn \g_hook_everymath_toks
  {
    \xfss_check_math_fonts:
    \toks_use:N \everymath
  }
\toks_set:Nn \g_hook_everydisplay_toks
  {
    \xfss_check_math_fonts:
    \toks_use:N \everydisplay
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \xfss_maybe_define_new_font:
  {
    \cs_if_exist:oF \g_xfss_font_cs_tl
      { \xfss_define_new_font: }
  }
\cs_new_protected_nopar:Npn \xfss_define_new_font:
  {
    \group_begin:
      \int_set:Nn \tex_escapechar:D {\c_minus_one}
      \exp_last_unbraced:Nf
        \xfss_split_name:w { \tl_to_str:N \g_xfss_font_cs_tl } \q_nil
      \xfss_try_load_fontshape: % try always
      \cs_if_exist:cTF {\g_xfss_curr_font_shape_tl}
        { \xfss_extract_font: }
        { \xfss_wrong_font_shape: }
    \group_end:
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\group_begin:
  \char_set_catcode_other:N \/
  \cs_new:Npn \xfss_split_name:w #1/#2/#3/#4/#5 \q_nil
    {
      \tl_set:Nn \g_xfss_encoding_tl {#1}
      \tl_set:Nn \g_xfss_family_tl   {#2}
      \tl_set:Nn \g_xfss_series_tl   {#3}
      \tl_set:Nn \g_xfss_shape_tl    {#4}
      \tl_set:Nn \g_xfss_fsize_tl     {#5}
    }
\group_end:
%    \end{macrocode}
%
%    \begin{macrocode}
\tl_gset:Nn \g_xfss_curr_font_shape_tl
  {
    \g_xfss_encoding_tl / \g_xfss_family_tl /
    \g_xfss_series_tl   / \g_xfss_shape_tl
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \xfss_try_load_fontshape:
  {
    \cs_if_exist:cF {\g_xfss_encoding_tl+\g_xfss_family_tl}
      {
        \msg_info:nnx {xfss} {try-load} {\g_xfss_encoding_tl+\g_xfss_family_tl}
        \tl_gclear:c {\g_xfss_encoding_tl+\g_xfss_family_tl}
        \xfss_switch_catcodes:
        \cs_null:N \xfss_switch_catcodes: % fixme: better as "clear"?
        \use:x
          {
            \tex_lowercase:D
              {
                \exp_not:N \file_if_exist:nT
                  { \g_xfss_encoding_tl\g_xfss_family_tl.fd }
                  { \file_input:n { \g_xfss_encoding_tl\g_xfss_family_tl.fd } }
              }
          }
      }
  }
%    \end{macrocode}
%
% fixme: why use "split_name"??
%    \begin{macrocode}
\DeclareDocumentCommand \DeclareErrorFont {mm mmm}
  {
    \cs_gset:Npx \xfss_error_font_shape:
      {
        \exp_not:n { \exp_after:wN \xfss_split_name:w \token_to_str:N }
        \exp_not:c {#1/#2/#3/#4/#5}
        \exp_not:N \q_nil
      }
    \tl_gset:Nn \g_xfss_default_family_tl {#2}
    \tl_gset:Nn \g_xfss_default_series_tl {#3}
    \tl_gset:Nn \g_xfss_default_shape_tl  {#4}
    \tl_gset_eq:NN \g_xfss_family_tl \g_xfss_default_family_tl
    \tl_gset_eq:NN \g_xfss_series_tl \g_xfss_default_series_tl
    \tl_gset_eq:NN \g_xfss_shape_tl  \g_xfss_default_shape_tl
    \tl_gset:Nn \g_xfss_fsize_tl {#5}
    \tl_gset:Nn \g_xfss_baselineskip_tl {#5pt}
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new:Nn \xfss_wrong_font_shape:
  {
    % install defaults if in math:
    \use:c {xfss_defaults_setup_ \g_xfss_encoding_tl :}
    \tl_set:Nx \l_xfss_tmpa_tl { \use:c {\g_xfss_curr_font_shape_tl} }
    \tl_if_eq:NNTF \l_xfss_last_font_shape_tl \l_xfss_tmpa_tl
      {
         \errmessage{Corrupted NFSS tables}
         \xfss_error_font_shape:
      }
      {
        \tl_set:Nn \g_xfss_shape_tl \g_xfss_default_shape_tl
        \cs_if_exist:cF {\g_xfss_curr_font_shape_tl}
          {
            \tl_set_eq:NN \g_xfss_series_tl \g_xfss_default_series_tl
            \cs_if_exist:cF {\g_xfss_curr_font_shape_tl}
              { \tl_set_eq:NN \g_xfss_family_tl \g_xfss_default_family_tl }
          }
      }
    \msg_warning:nnxxx {xfss} {missing-font-shape}
      { \tl_to_str:N \l_xfss_tmpa_tl }
      {\g_xfss_curr_font_shape_tl} {\l_xfss_wrong_font_char_msg_tl}
    \tl_gset_eq:NN \l_xfss_last_font_shape_tl \l_xfss_tmpa_tl
    \cs_gset:Npn \xfss_subst_warning:
      { \msg_warning:nn {xfss} {some-font-shapes-unavail} }
    \tl_gset_eq:Vc {\l_xfss_tmpa_tl} {\g_xfss_curr_font_shape_tl}
    \tl_gset:Nx \g_xfss_font_cs_tl
      { \use:c{ \g_xfss_curr_font_shape_tl/\g_xfss_fsize_tl } }
    \xfss_maybe_define_new_font:
  }
%    \end{macrocode}
%
%
%    \begin{macrocode}
\tl_clear:N \l_xfss_wrong_font_char_msg_tl
\cs_null:N \xfss_subst_warning:
\cs_new_eq:NN \xfss_install_math_alphabet:Nn \cs_gset:Npn
\cs_clear:N \xfss_assign_math_fonts:
\cs_new_protected:Npn \xfss_extract_alph_from_version:nnn #1#2#3
  {
    \cs_set:Npn \cs_tmp:w ##1 \xfss_install_math_alphabet:Nn #3##2##3 \q_nil
      {
        \tl_set:Nn \l_xfss_tmpb_tl {##2}
        \cs_set:Npn \xfss_tmpc:w ####1 { \tl_gset:Nn #1 { ##1 ####1 ##3 } }
      }
    \exp_after:wN \cs_tmp:w #1 \q_nil
    \cs_set:Npn \cs_tmp:w \xfss_select_math_group:Nnnn #3 ##1 ##2 \q_nil
      {
        \xfss_tmpc:w
          {
            \xfss_get_and_define_fonts:nn {#2} ##2
            \xfss_install_math_alphabet:Nn #3
              {
                \mode_if_math:F
                  {
                    \msg_error:nnx {xfss}
                      {only-math-cmd} { \token_to_str:N #3 }
                  }
                \xfss_use_math_group:nn ##1 {#2}
              }
          }
        \tl_gset:Nn #3
          {
            \mode_if_math:F
              { \msg_error:nnx {xfss} {only-math-cmd} { \token_to_str:N #3 } }
            \xfss_use_math_group:nn ##1 {#2}
          }
      }
    \exp_after:wN \cs_tmp:w \l_xfss_tmpb_tl \q_nil
  }
\cs_new_protected:Npn \xfss_math_egroup:n #1 { #1 \egroup }
\cs_new:Nn \xfss_calculate_math_sizes:
  {
    \msg_info:nnx {xfss} {calc-math-sizes} {\g_xfss_fsize_tl}
    \dim_set:Nn \l_xfss_tmpa_dim {\g_xfss_fsize_tl pt}
    \dim_set:Nn \l_xfss_tmpb_dim {\defaultscriptratio \l_xfss_tmpa_dim}
    \dim_set:Nn \l_xfss_tmpa_dim {\defaultscriptscriptratio \l_xfss_tmpa_dim}
    \cs_gset:cpx {xfss_set_font_size_\g_xfss_fsize_tl :}
      {
        \tl_gset:Nn \exp_not:N \g_xfss_tf_size_tl  {\g_xfss_fsize_tl}
        \tl_gset:Nn \exp_not:N \g_xfss_sf_size_tl
          { \dim_strip_pt:N \l_xfss_tmpb_dim }
        \tl_gset:Nn \exp_not:N \g_xfss_ssf_size_tl
          { \dim_strip_pt:N \l_xfss_tmpa_dim }
        \exp_not:N \bool_set_true:N \g_xfss_math_fonts_bool
      }
  }
%    \end{macrocode}
%
% fixme: what to do in initex?
%    \begin{macrocode}
%<*package>
\tl_set_eq:NN \g_no_accents_tl \noaccents@
%</package>
%<*initex>
\tl_clear:N \g_no_accents_tl
%</initex>
%    \end{macrocode}
%
% \section{Selecting and tracing fonts}
% From File: ltfsstrc.dtx
%
%    \begin{macrocode}
\cs_set:Npn \tracingfonts
  {
    \FIXME % implement
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new:Nn \xfss_extract_font:
  {
    \xfss_get_external_font:
    \exp_args:No \fontface_gset:Nn \g_xfss_font_cs_tl {\l_xfss_external_font_tl}
    \g_xfss_font_cs_tl
    \scan_stop:
    \use:c {\g_xfss_encoding_tl+\g_xfss_family_tl}
    \use:c {\g_xfss_curr_font_shape_tl}
    \scan_stop:
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new:Nn \xfss_get_external_font:
  {
    \tl_clear:N \l_xfss_external_font_tl
    \tl_set:Nx \l_xfss_font_info_tl
      {
        \exp_after:wN \exp_after:wN \exp_after:wN \token_to_str:N
        \csname \g_xfss_curr_font_shape_tl \endcsname
      }
    \xfss_try_size_range:F
      {
        \xfss_try_size_subst:F
          {
            \msg_error:nnx {xfss} {font-not-found}
              { \tl_to_str:N \g_xfss_font_cs_tl }
            \xfss_error_font_shape:
            \xfss_get_external_font:
          }
      }
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareDocumentCommand \selectfont {}
  {
    \tl_if_eq:NNF \g_xfss_linespread_tl \baselinestretch
      {
        \xfss_set_fontsize:nnn \baselinestretch
          \g_xfss_fsize_tl \g_xfss_baselineskip_tl
      }
    \tl_gset:Nx \g_xfss_font_cs_tl
      { \use:c {\g_xfss_curr_font_shape_tl/\g_xfss_fsize_tl} }
    \xfss_maybe_define_new_font:
    \g_xfss_font_cs_tl
    \xfss_update_sizes:
    \xfss_maybe_update_encoding:
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected:Npn \xfss_set_fontsize:nnn #1#2#3
  {
    \xfss_default_units:w \l_xfss_tmpb_dim#2 pt \relax \q_nil
    \tl_set:Nx \g_xfss_fsize_tl {\dim_strip_pt:N\l_xfss_tmpb_dim}
    \xfss_default_units:w \l_xfss_tmp_skip #3 pt \relax \q_nil
    \tl_set:Nx \g_xfss_baselineskip_tl { \skip_use:N \l_xfss_tmp_skip }
    \tl_set:Nx \g_xfss_linespread_tl {#1}
    \tl_set_eq:NN \baselinestretch \g_xfss_linespread_tl
    \cs_set:Npn \xfss_update_sizes:
      {
        \dim_set:Nn \baselineskip {\g_xfss_baselineskip_tl}
        \dim_set:Nn \baselineskip {\g_xfss_linespread_tl\baselineskip}
        \dim_set:Nn \normalbaselineskip {\baselineskip}
        \hbox_set:Nn \strutbox
          {
            \vrule height .7\baselineskip
                   depth  .3\baselineskip
                   width 0pt
          }
        \cs_clear:N \xfss_update_sizes:
      }
  }
\cs_clear:N \xfss_update_sizes:
%    \end{macrocode}
%
%    \begin{macrocode}
\tl_set:Nn \g_xfss_global_settings_tl
  {
    \cs_if_exist:cF {xfss_set_font_size_\g_xfss_fsize_tl :}
    {\xfss_calculate_math_sizes:}
    \use:c {xfss_set_font_size_\g_xfss_fsize_tl :}
    \bool_if:NT \g_xfss_math_fonts_bool {
      \group_begin:
        \int_set:Nn \tex_escapechar:D {\c_minus_one}
        \use:c {mv_\l_xfss_math_version_tl}
        \tex_globaldefs:D \c_one
        \xfss_assign_math_fonts:
        \tl_set_eq:NN \xfss_gsetup_currsize: \g_xfss_fsize_tl
      \group_end:
      \toks_use:N \g_xfss_every_math_size_toks
    }
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\toks_new:N \g_xfss_every_math_size_toks
%<*!initex>
\toks_set:Nn \g_xfss_every_math_size_toks { \toks_use:N \every@math@size }
%</!initex>
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \xfss_check_math_fonts:
  {
    \tl_if_eq:NNF \xfss_gsetup_currsize: \g_xfss_fsize_tl
    {
       \g_xfss_global_settings_tl
       \xfss_init_restore_glb_settings:
    }
    \tl_set_eq:NN \g_xfss_curr_math_size_tl \g_xfss_fsize_tl
    \cs_set:Npn \xfss_init_restore_glb_settings: {
      \group_insert_after:N \xfss_restore_glb_settings:
    }
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_clear:N \xfss_init_restore_glb_settings:
\cs_new_protected_nopar:Npn \xfss_restore_glb_settings:
  {
    \group_begin:
      \tl_set_eq:NN \g_xfss_fsize_tl \g_xfss_curr_math_size_tl
      \tl_if_eq:NNF \xfss_gsetup_currsize: \g_xfss_fsize_tl
      {\g_xfss_global_settings_tl}
    \group_end:
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected:Npn \xfss_use_math_group:nn #1#2
  {
    \mode_if_math:T {
      \bgroup
        \cs_if_eq:cNF {xfss_setup_math_encoding_ \g_xfss_encoding_tl :} #1 {#1}
        \mathgroup #2 \relax
      \xfss_math_egroup:n
    }
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new:Nn \xfss_get_and_define_fonts:nn
  {
    \tl_gset:Nx \g_xfss_font_cs_tl
      { \use:c { \token_to_str:N #2 / \g_xfss_tf_size_tl } }
    \xfss_maybe_define_new_font:
    \tl_set_eq:NN \l_xfss_textfont_cs_tl \g_xfss_font_cs_tl
    \tl_gset:Nx \g_xfss_font_cs_tl
      { \use:c { \token_to_str:N #2 / \g_xfss_sf_size_tl } }
    \xfss_maybe_define_new_font:
    \tl_set_eq:NN \l_xfss_scriptfont_cs_tl \g_xfss_font_cs_tl
    \tl_gset:Nx \g_xfss_font_cs_tl
      { \use:c { \token_to_str:N #2 / \g_xfss_ssf_size_tl } }
    \xfss_maybe_define_new_font:
    \tl_put_right:Nx \xfss_assign_math_fonts:
      {
        \textfont #1 \l_xfss_textfont_cs_tl
        \scriptfont #1 \l_xfss_scriptfont_cs_tl
        \scriptscriptfont #1 \g_xfss_font_cs_tl
      }
  }
%    \end{macrocode}
%
% \section{Parsing fd files}
%
%    \begin{macrocode}
\cs_new:Npn \xfss_remove_angles:w #1 > { \xfss_set_simple_size_args:w }
\cs_new:Npn \xfss_remove_star:w #1 * {#1}
\cs_new:Npn \xfss_extract_sizefn:w #1 * #2 \q_nil
  {
    \if>#2>
      \xfss_set_size_funct_args:w #1 \q_nil
      \tl_clear:N \l_xfss_sizefn_info_tl
    \else
      \exp_after:wN \xfss_set_size_funct_args:w \xfss_remove_star:w #2 \q_nil
      \tl_set:Nn \l_xfss_sizefn_info_tl {#1}
    \fi
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \xfss_try_simple_size:
  {
    \cs_set:Npn \xfss_tmp: {\cs_set:Npn \xfss_extract_font_info:w ####1 }
    \exp_after:wN \xfss_tmp: \exp_after:wN <\g_xfss_fsize_tl> ##2 < ##3 \q_stop
      {
        \quark_if_nil:NF {##2}
          {
            \xfss_set_simple_size_args:w ##2 < ##3 \q_stop
            \xfss_execute_size_function:n {\l_xfss_sizefn_info_tl}
          }
      }
    \exp_after:wN \exp_after:wN
    \exp_after:wN \xfss_extract_font_info:w
    \exp_after:wN \l_xfss_font_info_tl
    \exp_after:wN <\g_xfss_fsize_tl> \q_nil <\q_stop
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new:Npn \xfss_set_simple_size_args:w #1 <
  {
    \if<#1<
      \exp_after:wN \xfss_remove_angles:w
    \else
      \xfss_extract_sizefn:w #1 * \q_nil
      \exp_after:wN \use_none_delimit_by_q_stop:w
    \fi
  }
\cs_new:Npn \xfss_extract_rangefontinfo:w #1 <#2>
  { \xfss_is_range:wq #2 -> \q_nil #2> }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new:Npn \xfss_is_range:wq #1-#2 \q_nil
  {
    \if >#2
      \exp_after:wN \xfss_check_single:wq
    \else
      \exp_after:wN \xfss_check_range:wq
    \fi
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new:Npn \xfss_check_range:wq #1 - #2 > #3 < #4 \q_stop
  {
    \quark_if_nil:NF {#3}
      {
        \tl_set:Nn \l_xfss_tmpf_tl
          { \xfss_extract_rangefontinfo:w < #4 \q_stop }
        \dim_set:Nn \l_xfss_upper_bound_dim { 0 #2 pt }
        \dim_compare:nNnT \l_xfss_upper_bound_dim = {0pt}
          { \dim_set:Nn \l_xfss_upper_bound_dim {\maxdimen} }
        \dim_compare:nNnT {\g_xfss_fsize_tl pt} < \l_xfss_upper_bound_dim
          {
            \dim_set:Nn \l_xfss_lower_bound_dim { 0 #1 pt }
            \dim_compare:nNnF {\g_xfss_fsize_tl pt} < \l_xfss_lower_bound_dim
              {
                \xfss_set_simple_size_args:w#3<#4\q_stop
                \xfss_execute_size_function:n {\l_xfss_sizefn_info_tl}
                \tl_if_empty:NF \l_xfss_external_font_tl
                { \tl_clear:N \l_xfss_tmpf_tl }
              }
          }
        \l_xfss_tmpf_tl
      }
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\dim_new:N \l_xfss_lower_bound_dim
\dim_new:N \l_xfss_upper_bound_dim
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new:Npn \xfss_check_single:wq #1 > #2 < #3 \q_stop
  {
    \tl_set:Nn \l_xfss_tmpf_tl { \xfss_extract_rangefontinfo:w < #3 \q_stop }
    \dim_compare:nNnT {\g_xfss_fsize_tl pt} = {#1pt}
      {
         \xfss_set_simple_size_args:w #2 < #3 \q_stop
         \xfss_execute_size_function:n {\l_xfss_sizefn_info_tl}
         \tl_if_empty:NF \l_xfss_external_font_tl
           { \tl_clear:N \l_xfss_tmpf_tl }
      }
    \l_xfss_tmpf_tl
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareDocumentCommand \xfss_set_size_funct_args:w { O{} u{ \q_nil } }
  {
    \tl_set:Nn \l_xfss_optional_arg_tl  {#1}
    \tl_set:Nn \l_xfss_mandatory_arg_tl {#2}
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareDocumentCommand \DeclareSizeFunction {mm}
  { \cs_set:cpn {xfss_size_function_ #1 :} {#2} }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected:Npn \xfss_execute_size_function:n #1
  { \use:c {xfss_size_function_ #1 :} }
%    \end{macrocode}
%
%    \begin{macrocode}
\prg_new_conditional:Npnn \xfss_try_size_range: {F}
  {
    \exp_after:wN
    \xfss_extract_rangefontinfo:w \l_xfss_font_info_tl <-*> \q_nil < \q_stop
    \tl_if_empty:NTF \l_xfss_external_font_tl
    \prg_return_false: \prg_return_true:
  }
\prg_new_conditional:Npnn \xfss_try_size_subst: {F}
  {
    \dim_set:Nn \l_xfss_tmpb_dim {\maxdimen}
    \tl_clear:N \l_xfss_best_size_tl
    \exp_after:wN
    \xfss_try_simples:w \l_xfss_font_info_tl <10000> \q_nil < \q_stop
    \tl_if_empty:NTF \l_xfss_external_font_tl
      \prg_return_false: \prg_return_true:
  }
\cs_new_protected_nopar:Npn \xfss_size_diff_warning:
  {
    \dim_compare:nNnT \g_xfss_font_submax_tl > \fontsubfuzz
    { \msg_warning:nnx {xfss} {size-subst} {\g_xfss_font_submax_tl} }
  }
\tl_set:Nn \g_xfss_font_submax_tl {0pt}
\tl_set:Nn \fontsubfuzz{.4pt}
\cs_new_protected:Npn \xfss_try_simples:w #1 <#2>
  {
    \xfss_try_if_simple:w #2 -> \xfss_try_if_simple:w
  }
\cs_new_protected:Npn \xfss_try_if_simple:w #1-#2 \xfss_try_if_simple:w
  {
    \cs_set_eq:NN \xfss_tmpf:w \xfss_try_simples:w
    \if>#2
      \dim_compare:nNnTF {#1 pt} < { 10000pt }
        {
          \dim_set:Nn \l_xfss_tmpc_dim
            { \dim_abs:n { #1pt - \g_xfss_fsize_tl pt} }
          \dim_compare:nNnT \l_xfss_tmpc_dim < \l_xfss_tmpb_dim
            {
              \dim_set:Nn \l_xfss_tmpb_dim {\l_xfss_tmpc_dim}
              \tl_set:Nn \l_xfss_best_size_tl {#1}
            }
        }
        {
          \tl_if_empty:NT \l_xfss_external_font_tl
            {
              \tl_if_empty:NF \l_xfss_best_size_tl
                {
                  \dim_compare:nNnT \l_xfss_tmpb_dim > \g_xfss_font_submax_tl
                    {
                      \tl_gset:Nx \g_xfss_font_submax_tl {\the\l_xfss_tmpb_dim}
                    }
                  \tl_set_eq:NN \l_xfss_user_size_tl \g_xfss_fsize_tl
                  \tl_set_eq:NN \g_xfss_fsize_tl \l_xfss_best_size_tl
                  \dim_compare:nNnT \l_xfss_tmpb_dim > \fontsubfuzz
                    {
                      \msg_warning:nnxxx {xfss} {font-shape-unavail}
                      {\g_xfss_curr_font_shape_tl} {\l_xfss_user_size_tl}
                      {\g_xfss_fsize_tl}
                    }
                  \xfss_try_simple_size:
                  \xfss_activate_subst_correction:
                }
            }
          \cs_set_eq:NN \xfss_tmpf:w \use_none_delimit_by_q_stop:w
        }
    \fi
    \xfss_tmpf:w
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareSizeFunction{} { \xfss_empty_size_fn:N \msg_warning:nn }
\DeclareSizeFunction{s}{ \xfss_empty_size_fn:N \msg_info:nn }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected:Npn \xfss_empty_size_fn:N #1
  {
    \dim_set:Nn \l_xfss_tmpb_dim {\g_xfss_fsize_tl pt}
    \tl_if_empty:NF \l_xfss_optional_arg_tl
      {
        \dim_set:Nn \l_xfss_tmpb_dim
          { \l_xfss_optional_arg_tl \l_xfss_tmpb_dim }
        #1 {xfss} {font-shape-scale}
      }
    \tl_set:Nx \l_xfss_external_font_tl
      { \l_xfss_mandatory_arg_tl\space at \dim_use:N \l_xfss_tmpb_dim }
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareSizeFunction{gen} { \xfss_gen_size_fn:N \msg_warning:nn }
\DeclareSizeFunction{sgen}{ \xfss_gen_size_fn:N \msg_info:nn }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected:Npn \xfss_gen_size_fn:N
  {
    \tl_set:Nx \l_xfss_mandatory_arg_tl
      { \l_xfss_mandatory_arg_tl \g_xfss_fsize_tl }
    \xfss_empty_size_fn:N
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareSizeFunction{genb} { \xfss_genb_size_fn:N \msg_warning:nn }
\DeclareSizeFunction{sgenb}{ \xfss_genb_size_fn:N \msg_info:nn }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected:Npn \xfss_genb_size_fn:N
  {
    \tl_set:Nx \l_xfss_mandatory_arg_tl
      {
        \l_xfss_mandatory_arg_tl
        \exp_after:wN \xfss_gen_aux:w \g_xfss_fsize_tl .. \q_nil
      }
    \xfss_empty_size_fn:N
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new:Npn \xfss_gen_aux:w #1.#2.#3 \q_nil
  {
    \int_compare:nNnT {#1} < {10} {0} \tex_number:w #1 % LaTeX2e's "\two@digits"
    \xfss_gen_aux_ii:w #2 00 \q_nil
  }
\cs_new:Npn \xfss_gen_aux_ii:w #1 #2 #3 \q_nil { #1#2 }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareSizeFunction{sub} { \xfss_sub_size_fn:N \msg_warning:nn }
\DeclareSizeFunction{ssub}{ \xfss_sub_size_fn:N \msg_info:nn }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected:Npn \xfss_sub_size_fn:N #1
  {
    \tl_set:Nx \l_xfss_mandatory_arg_tl
      { \g_xfss_encoding_tl / \l_xfss_mandatory_arg_tl }
    \group_begin:
      \exp_after:wN \xfss_split_name:w \l_xfss_mandatory_arg_tl / \q_nil
      \xfss_try_load_fontshape:
    \group_end:
    \tl_set_eq:NN \l_xfss_user_size_tl \g_xfss_fsize_tl
    \cs_if_exist:cTF {\l_xfss_mandatory_arg_tl}
      {
        #1 {xfss} {font-shape-size-missing}
        \exp_after:wN \xfss_split_name:w \l_xfss_mandatory_arg_tl / \q_nil
      }
      {
        \errmessage{No\space declaration\space for\space
                    shape\space \l_xfss_mandatory_arg_tl}
        \xfss_error_font_shape:
      }
    \tl_set:Nx \g_xfss_fsize_tl {\l_xfss_user_size_tl}
    \xfss_get_external_font:
    \xfss_activate_subst_correction:
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareSizeFunction{subf} { \xfss_subf_size_fn:N \msg_warning:nn }
\DeclareSizeFunction{ssubf}{ \xfss_subf_size_fn:N \msg_info:nn }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected:Npn \xfss_subf_size_fn:N #1
  {
    #1 {xfss} {font-shape-size-instead}
    \xfss_empty_size_fn:N #1
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareSizeFunction{fixed} { \xfss_fixed_size_fn:N \msg_warning:nn }
\DeclareSizeFunction{sfixed}{ \xfss_fixed_size_fn:N \msg_info:nn }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected:Npn \xfss_fixed_size_fn:N #1
  {
    \tl_if_empty:NTF \l_xfss_optional_arg_tl
      { \tl_set_eq:NN \l_xfss_external_font_tl \l_xfss_mandatory_arg_tl }
      {
        \tl_set:Nx \l_xfss_external_font_tl
          { \l_xfss_mandatory_arg_tl\space at\l_xfss_optional_arg_tl pt }
      }
    #1 {xfss} {ext-font-loaded}
  }
%    \end{macrocode}
%
% \section{Font declarations}
% From File: ltfssdcl.dtx
%
%    \begin{macrocode}
\seq_new:N \g_xfss_version_seq
\seq_new:N \g_xfss_alpha_seq
\count18=0 % not sure why "0"
\cs_new:Npn \xfss_select_math_group:Nnnn #1#2#3#4
  {
    {
      \mode_if_math:TF
        {
          \exp_args:Nc \int_compare:nNnTF
            { g_xfss_mversion_ \l_xfss_math_version_tl _int}
            < \c_max_math_fonts_int
            {
              \group_begin:
                \int_set:Nn \tex_escapechar:D {\c_minus_one}
                \exp_args:Nc \xfss_get_and_define_fonts:nn
                  {g_xfss_mversion_ \l_xfss_math_version_tl _int} #3
                \int_set:Nn \tex_globaldefs:D {1}
                \xfss_assign_math_fonts:
              \group_end:
              \xfss_init_restore_version:
              \tl_gset:Nx #1
                {
                  \exp_not:N \xfss_use_math_group:nn \exp_not:N #2
                  { \int_use:c {g_xfss_mversion_ \l_xfss_math_version_tl _int} }
                }
              \int_gincr:c {g_xfss_mversion_ \l_xfss_math_version_tl _int}
            }
            {
              \cs_null:N #1 % fixme: why not "\c_undefined" ?
              \msg_error:nnx {xfss}
                {too-many-alphabets} {\l_xfss_math_version_tl}
            }
        }
        { \msg_error:nnx {xfss} {only-math-cmd} { \token_to_str:N #1 } }
      #1 {#4}
    }
  }
\cs_new_protected_nopar:Npn \xfss_init_restore_version:
  {
    \cs_gclear:N \xfss_init_restore_version:
    \cs_set_nopar:Npx \xfss_restore_mathversion:
      {
        \exp_not:c {mv_\l_xfss_math_version_tl}
        \exp_not:N \int_gset:cn {g_xfss_mversion_ \l_xfss_math_version_tl _int}
        { \int_use:c {g_xfss_mversion_ \l_xfss_math_version_tl _int} }
      }
    \group_insert_after:N \xfss_restore_version:
  }
\cs_new_protected_nopar:Npn \xfss_restore_version:
  {
    \mode_if_math:TF
      { \group_insert_after:N \xfss_restore_version: }
      {
        \cs_set_nopar:Npn \xfss_init_restore_version:
          {
            \cs_gclear:N \xfss_init_restore_version:
            \cs_set_nopar:Npn \xfss_restore_mathversion:
              {
                \exp_not:c {mv_\l_xfss_math_version_tl}
                \exp_not:N \int_gset:cn
                  { g_xfss_mversion_ \l_xfss_math_version_tl _int }
                  { \int_use:c {g_xfss_mversion_ \l_xfss_math_version_tl _int} }
              }
            \group_insert_after:N \xfss_restore_version:
          }
        \group_begin:
          \cs_set_eq:NN \xfss_get_and_define_fonts:nn \use_none:nn
          \xfss_restore_mathversion:
        \group_end:
      }
  }
\cs_new_protected:Npn \xfss_document_select_math_group:Nnnn #1#2#3#4
  {
    {
      \mode_if_math:TF
        {
          \exp_args:Nc
          \int_compare:nNnTF
            {g_xfss_mversion_ \l_xfss_math_version_tl _int}
            < \c_max_math_fonts_int
            {
              \group_begin:
                \int_set:Nn \tex_escapechar:D {\c_minus_one}
                \exp_args:Nc \xfss_get_and_define_fonts:nn
                  {g_xfss_mversion_ \l_xfss_math_version_tl _int} #3
                \int_set:Nn \tex_globaldefs:D {\c_one}
                \xfss_assign_math_fonts:
              \group_end:
              \exp_args:cv % fixme: is it exp_args:Ncv?
                \xfss_extract_alph_from_version:nnn
                {mv_\l_xfss_math_version_tl}
                {g_xfss_mversion_ \l_xfss_math_version_tl _int}
              #1
              \int_gincr:c {g_xfss_mversion_ \l_xfss_math_version_tl _int}
            }
            {
              \cs_null:N #1
              \msg_error:nnx {xfss}
                {too-many-alphabets} {\l_xfss_math_version_tl}
            }
        }
        {
          \msg_error:nnx {xfss} {only-math-cmd} { \token_to_str:N #1 }
        }
      #1{#4}
    }
  }
%    \end{macrocode}
% This is executed in "\begin{document}"
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \xfss_process_table:
  {
    \seq_map_inline:Npn \g_xfss_cdp_seq ##1##2##3##4
      {
        \msg_info:nnx {xfss} {checking-defaults} {##1/##2/##3/##4}
        \cs_if_exist:cF {##1/##2/##3/##4}
          {
            \group_begin:
              \tl_set:Nn \g_xfss_encoding_tl {##1}
              \tl_set:Nn \g_xfss_family_tl {##2}
              \xfss_try_load_fontshape:
            \group_end:
          }
        \cs_if_exist:cTF {##1/##2/##3/##4}
          { \msg_info:nn {xfss} {okay!} }
          { \msg_error:nnxx {xfss} {xfss-broken} {##1} {##2/##3/##4} }
      }
    \group_begin:
      \int_set:Nn \tex_escapechar:D {\c_minus_one}
      \xfss_error_font_shape:
      \cs_if_exist:cF {\g_xfss_curr_font_shape_tl}
        {
          \group_begin:
            \xfss_try_load_fontshape:
          \group_end:
        }
      \cs_if_exist:cF {\g_xfss_curr_font_shape_tl}
        { \msg_error:nn {xfss} {no-error-font} }
    \group_end:
    \cs_set_eq:NN
      \xfss_select_math_group:Nnnn
      \xfss_document_select_math_group:Nnnn
%    \end{macrocode}
% Install the default font attributes they are currently pointing to error
% font shape.
%    \begin{macrocode}
    \fontencoding {\encodingdefault}
    \fontfamily   {\familydefault}
    \fontseries   {\seriesdefault}
    \fontshape    {\shapedefault}
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_nopar:Npn \xfss_symfont_to_str:N
  { \exp_after:wN \use_none:nnnn \token_to_str:N }
\cs_new_nopar:Npn \xfss_mvers_to_str:N
  { \exp_after:wN \use_none:nnnn \token_to_str:N }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareDocumentCommand \DeclareMathVersion {m}
  { \exp_args:Nc \xfss_new_math_version:N {mv_#1} }
\cs_new:Nn \xfss_new_math_version:N
  {
    \seq_if_in:NnTF \g_xfss_version_seq {#1}
      {
        \msg_info:nnx {redecl-mvers} { \xfss_symfont_to_str:N #1 }
      }
      {
        \int_new:c {g_xfss_ \cs_to_str:N #1 _int}
        \seq_put_right:Nn \g_xfss_version_seq {#1}
      }
%    \end{macrocode}
%
%    \begin{macrocode}
    \tl_gclear:N #1
    \seq_map_inline:Nn \g_xfss_group_seq
      {
        \tl_gput_right:Nn #1 { \xfss_get_and_define_fonts:nn ##1 }
      }
    \int_gset:cn {g_xfss_ \cs_to_str:N #1 _int}
      { \seq_length:N \g_xfss_group_seq }
    \seq_map_inline:Npn \g_xfss_alpha_seq ##1 ##2 ##3
      {
        \cs_if_eq:NNTF ##2 \xfss_no_alphabet_error:N
          {
            \tl_gput_right:Nn #1
              {
                \xfss_install_math_alphabet:Nn ##1
                  { \xfss_no_alphabet_error:N ##1 }
              }
          }
          {
            \tl_gput_right:Nn #1
              {
                \xfss_install_math_alphabet:Nn ##1
                { \xfss_select_math_group:Nnnn ##1 ##2 ##3 }
              }
          }
      }
  }
\seq_new:N \g_xfss_group_seq
\DeclareDocumentCommand \DeclareSymbolFont {mm mmm}
  {
    \xfss_if_math_encoding_exists:nT {#2}
      {
        \cs_if_free:cTF {sym#1}
          {
            \mathgroup_new:c {sym#1}
            \exp_args:Nc \xfss_new_symbol_font:Nnnnn {sym#1} {#2}{#3}{#4}{#5}
          }
          {
            \msg_info:nnx {xfss} {redecl-symfont} {#1}
            \seq_gself_map_inline:Npn \g_xfss_group_seq ##1 ##2
              {
                \exp_not:N ##1
                \cs_if_eq:cNTF {sym#1} ##1
                 { \exp_not:c {#2/#3/#4/#5} }
                 { \exp_not:N ##2 }
              }
            \seq_map_inline:Nn \g_xfss_version_seq
              {
                \exp_args:NNcc \xfss_set_symbol_font:NNN ##1
                  {#2/#3/#4/#5} {sym#1}
              }
          }
      }
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected:Npn \xfss_new_symbol_font:Nnnnn #1#2#3#4#5
  {
    \seq_put_right:Nx \g_xfss_group_seq
    { \exp_not:N #1 \exp_not:c {#2/#3/#4/#5} }
    \seq_map_inline:Nn \g_xfss_version_seq
      {
        \cs_set:Npx ##1
          {
            \exp_not:o {##1}
            \exp_not:N \xfss_get_and_define_fonts:nn
            #1
            \exp_not:c {#2/#3/#4/#5}
          }
        \int_gincr:c {g_xfss_ \cs_to_str:N ##1 _int}
      }
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareDocumentCommand \SetSymbolFont {mmm mmm}
  {
    \xfss_if_math_encoding_exists:nT {#3}
    {
      \exp_args:Nccc \xfss_set_symbol_font:NNN
        {mv_#2} {#3/#4/#5/#6} {sym#1}
    }
  }
%    \end{macrocode}
%
%
% \begin{macro}{\xfss_if_symbol_font_exists:nT,\xfss_if_symbol_font_exists:cT}
% If false returns an error.
%    \begin{macrocode}
\bool_new:N \l_reserved_tmpa_bool
\prg_new_conditional:Npnn \xfss_if_symbol_font_exists:N #1 {T,TF}
  {
    \bool_set_false:N \l_reserved_tmpa_bool
    \seq_map_inline:Npn \g_xfss_group_seq ##1 ##2
    { \cs_if_eq:NNT #1 ##1 { \bool_set_true:N \l_reserved_tmpa_bool } }
    \bool_if:NTF \l_reserved_tmpa_bool {\prg_return_true:}
    {
      \msg_error:nnx {xfss} {sym-font-unknown} { \xfss_symfont_to_str:N #1 }
      \prg_return_false:
    }
  }
\cs_generate_variant:Nn \xfss_if_symbol_font_exists:NT  {c}
\cs_generate_variant:Nn \xfss_if_symbol_font_exists:NTF {c}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\xfss_if_text_encoding_exists:nT}
%    \begin{macrocode}
\prg_new_conditional:Npnn \xfss_if_text_encoding_exists:n #1 {T}
  {
    \cs_if_exist:cTF {xfss_setup_text_encoding_ #1 :}
    {\prg_return_true:}
    {
      \msg_error:nnx {xfss} {font-enc-unknown} {#1}
      \prg_return_false:
    }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\xfss_if_math_encoding_exists:nT}
%    \begin{macrocode}
\prg_new_conditional:Npnn \xfss_if_math_encoding_exists:n #1 {T}
  {
    \bool_set_false:N \l_tmpa_bool
    \seq_map_inline:Npn \g_xfss_cdp_seq ##1 ##2 ##3 ##4
      { \tl_if_eq:xnT {#1} {##1} {\bool_set_true:N \l_tmpa_bool} }
    \bool_if:NTF \l_tmpa_bool {\prg_return_true:}
      {
        \msg_error:nnx {xfss} {font-enc-unknown} {#1}
        \prg_return_false:
      }
  }
%    \end{macrocode}
% \end{macro}
%
%
%
% \begin{macro}{\xfss_set_symbol_font:NNN}
% \begin{arguments}
% \item \cs{mv_}\meta{math version}
% \item \meta{NFSS font identifier} (\cs{enc/fam/series/shape})
% \item \cs{sym}\meta{symbol font}
% \end{arguments}
%    \begin{macrocode}
\cs_new_protected:Npn \xfss_set_symbol_font:NNN #1#2#3
  {
    \seq_if_in:NnTF \g_xfss_version_seq {#1}
      {
        \xfss_if_symbol_font_exists:NT #3
          {
            \group_begin:
              \exp_after:wN
              \xfss_get_cdp:wqN \token_to_str:N #2 \q_nil \l_xfss_tmpa_tl
              \toks_clear:N \l_xfss_tmp_toks
              \cs_set:Npn \xfss_install_math_alphabet:Nn ##1 ##2
                {
                  \toks_put_right:Nn \l_xfss_tmp_toks
                  { \xfss_install_math_alphabet:Nn ##1 {##2} }
                }
              \cs_set:Npn \xfss_get_and_define_fonts:nn ##1 ##2
                {
                  \int_compare:nNnTF {##1} = {#3}
                    {
                       \toks_put_right:Nn \l_xfss_tmp_toks
                         { \xfss_get_and_define_fonts:nn #3 #2 }
                       \exp_after:wN \xfss_get_cdp:wqN
                         \token_to_str:N ##2 \q_nil \l_xfss_tmpb_tl
                       \cs_if_eq:NNF \l_xfss_tmpa_tl \l_xfss_tmpb_tl
                         {
                            \msg_info:nnxxxx {xfss} {enc-change}
                              {\l_xfss_tmpb_tl} {\l_xfss_tmpa_tl}
                              {\xfss_symfont_to_str:N #3 }
                              {\xfss_symfont_to_str:N #1 }
                         }
                       \msg_info:nnxxxx {xfss} {overwrite-symfont}
                         { \xfss_symfont_to_str:N #3 }
                         { \xfss_symfont_to_str:N #1 }
                         { \cs_to_str:N ##2 } { \cs_to_str:N #2 }
                    }
                    {
                      \toks_put_right:Nn \l_xfss_tmp_toks
                        { \xfss_get_and_define_fonts:nn ##1 ##2 }
                    }
                }
              #1
              \tl_gset:Nx #1 { \toks_use:N \l_xfss_tmp_toks }
            \group_end:
          }
      }
      {
        \msg_error:nnx {xfss} {math-version-unknown} { \xfss_mvers_to_str:N #1 }
      }
  }
%    \end{macrocode}
% \end{macro}
%
%
%    \begin{macrocode}
\cs_new_protected:Npn \xfss_get_cdp:wqN
  #1 #2 / #3 \q_nil #4 { \tl_set:Nn #4 {#2} }
%    \end{macrocode}
%
%
% \begin{macro}{\DeclareMathAlphabet}
% \begin{arguments}
% \item command to switch math alphabet font
% \item encoding \item fam \item series \item shape
% \end{arguments}
%    \begin{macrocode}
\DeclareDocumentCommand \DeclareMathAlphabet {mm mmm}
  {
    \xfss_if_math_encoding_exists:nT {#2}
      {
        \cs_if_free:NTF #1
          { \xfss_new_math_alphabet:Nnnnn #1 {#2}{#3}{#4}{#5} }
          {
            \cs_meaning_if_in:cnTF {\cs_to_str:N #1\space}
              { \xfss_select_math_group:Nnnn }
              {
                \msg_info:nnx {xfss} {redecl-mathalph} { \token_to_str:N #1 }
                \seq_map_inline:Nn \g_xfss_version_seq
                  {
                    \exp_args:NNccc
                    \xfss_set_math_alphabet:NNNNN ##1
                      {#2/#3/#4/#5} {xfss_setup_math_encoding_ #2 :}
                      {\cs_to_str:N #1\space} #1
                  }
              }
              {
                \cs_meaning_if_in:cnTF {\cs_to_str:N #1\space}
                  { \xfss_use_math_group:nn }
                  {
                    \msg_info:nnx {xfss}
                      {redecl-mathalph} { \token_to_str:N #1 }
                    \xfss_new_math_alphabet:Nnnnn #1 {#2}{#3}{#4}{#5}
                  }
                  {
                    \msg_error:nnx {xfss} {cmd-defined} { \token_to_str:N #1 }
                  }
              }
          }
      }
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected:Npn \xfss_new_math_alphabet:Nnnnn #1#2#3#4#5
  {
    \cs_set:Npx #1
      {
        \exp_not:c {\cs_to_str:N #1\space}
        \tl_if_empty:nTF {#5}
          {
             \exp_not:N \xfss_no_alphabet_error:N
             \exp_not:N \xfss_no_alphabet_error:N
          }
          {
             \exp_not:c {xfss_setup_math_encoding_ #2 :}
             \exp_not:c {#2/#3/#4/#5}
          }
      }
    \seq_put_right:NV \g_xfss_alpha_seq {#1}
    \seq_map_inline:Nn \g_xfss_version_seq {
      \cs_set:Npx ##1
        {
          \exp_not:o {##1}
          \exp_not:N \xfss_install_math_alphabet:Nn
          \exp_not:c {\cs_to_str:N #1 \space}
          {
            \tl_if_empty:nTF {#5}
              { \exp_not:n { \xfss_no_alphabet_error:N #1 } }
              { \exp_not:N \xfss_select_math_group:Nnnn \exp_not:o {#1} }
          }
        }
    }
    \cs_set:cpx {\cs_to_str:N #1\space}
      {
        \tl_if_empty:nTF {#5}
          { \exp_not:n { \xfss_no_alphabet_error:N #1 } }
          { \exp_not:N \xfss_select_math_group:Nnnn \exp_not:o {#1} }
      }
    \cs_set:Npx #1 {\exp_not:N\protect \exp_not:c {\cs_to_str:N #1 \space} }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\SetMathAlphabet}
%
%    \begin{macrocode}
\DeclareDocumentCommand \SetMathAlphabet {mmm mmm}
  {
    \xfss_if_math_encoding_exists:nT {#3}
    {
      \exp_args:Ncccc \xfss_set_math_alphabet:NNNNN
        {mv_#2} {#3/#4/#5/#6} {xfss_setup_math_encoding_ #3 :}
        {\cs_to_str:N #1\space} #1
    }
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new:Npn \use_iv_to_str:nnnN #1#2#3#4 { \cs_to_str:N #4 }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareDocumentCommand \xfss_set_math_alphabet:NNNNN {mm mmm}
  {
    \seq_if_in:NnTF \g_xfss_version_seq {#1}
      {
        \seq_if_anywhere_in:NnTF \g_xfss_alpha_seq {#4}
          {
            \group_begin:
              \toks_clear:N \l_xfss_tmp_toks
              \cs_set:Npn \xfss_get_and_define_fonts:nn ##1 ##2
                {
                  \toks_put_right:Nn \l_xfss_tmp_toks
                  { \xfss_get_and_define_fonts:nn ##1 ##2 }
                }
              \cs_set:Npn \xfss_install_math_alphabet:Nn ##1 ##2
                {
                  \cs_if_eq:NNTF ##1 #4
                    {
                      \toks_put_right:Nn \l_xfss_tmp_toks
                        {
                          \xfss_install_math_alphabet:Nn #4
                            { \xfss_select_math_group:Nnnn #4 #3 #2 }
                        }
                      \msg_info:nnxxxx {xfss} {overwrite-mathalph}
                        { \token_to_str:N #5 } {\xfss_mvers_to_str:N #1}
                        { \use_iv_to_str:nnnN ##2 } { \cs_to_str:N #2 }
                    }
                    {
                      \toks_put_right:Nn \l_xfss_tmp_toks
                        { \xfss_install_math_alphabet:Nn ##1 {##2} }
                    }
                }
              #1
              \tl_gset:Nx #1 { \toks_use:N \l_xfss_tmp_toks }
            \group_end:
          }
          {
            \cs_meaning_if_in:NNTF #4 {\xfss_use_math_group:nn}
              {
                \cs_set:Npn \xfss_tmp:w ##1 \xfss_use_math_group:nn ##2 ##3
                  {
                    \tl_set:Nn \l_xfss_tmpb_tl {##3}
                    \tl_set:Nn \l_xfss_tmpc_tl {##2}
                  }
                \exp_after:wN \xfss_tmp:w #4
                \group_begin:
                  \cs_set:Npn \xfss_install_math_alphabet:Nn ##1 ##2
                    {
                      \toks_put_right:Nn \l_xfss_tmp_toks
                      { \xfss_install_math_alphabet:Nn ##1 {##2} }
                    }
                  \cs_set:Npn \xfss_get_and_define_fonts:nn ##1 ##2
                    {
                      \toks_put_right:Nn \l_xfss_tmp_toks
                        { \xfss_get_and_define_fonts:nn ##1 ##2 }
                      \int_compare:nNnT {##1} = \l_xfss_tmpb_tl
                        {
                          \exp_after:wN \toks_put_right:Nn
                          \exp_after:wN \l_xfss_tmp_toks
                          \exp_after:wN {
                            \exp_after:wN \xfss_install_math_alphabet:Nn
                            \exp_after:wN #4 \exp_after:wN {
                              \exp_after:wN
                              \xfss_select_math_group:Nnnn
                              \exp_after:wN #4 \l_xfss_tmpc_tl ##2
                            }
                          }
                        }
                    }
                  \seq_map_inline:Nn \g_xfss_version_seq
                    {
                      \toks_clear:N \l_xfss_tmp_toks
                      ##1
                      \tl_gset:Nx ##1 { \toks_use:N \l_xfss_tmp_toks }
                    }
                \group_end:
                \seq_gput_right:Nn \g_xfss_alpha_seq
                  { #4 \xfss_no_alphabet_error:N }
                \tl_gset:Nn #4 { \xfss_no_alphabet_error:N #5 }% fake things :-)
                \xfss_set_math_alphabet:NNNNN {#1} {#2} {#3} #4 #5
              }
              {
                \msg_error:nnx {xfss}
                  {no-math-alph-cmd} { \token_to_str:N #5 }
              }
          }
      }
      {
        \msg_error:nnx {xfss}
          {math-version-unknown} { \xfss_mvers_to_str:N #1 }
      }
  }
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\DeclareMathAccent}
%    \begin{macrocode}
\DeclareDocumentCommand \DeclareMathAccent {mmmm}
  {
    \xfss_if_symbol_font_exists:cT {sym#3} {
      \group_begin:
        \token_if_cs:NTF #1
        {
          \cs_meaning_if_in:NNTF #1 \mathaccent
          {
            \math_gset_accent:NNnn #1 #2 { \use:c {sym #3} } {#4}
            \msg_info:nnx {xfss} {redecl-maccent} { \token_to_str:N #1 }
          }
          {
            \cs_if_exist:cTF {\cs_to_str:N#1}
            { \msg_error:nnx {xfss} {cmd-defined} { \token_to_str:N #1 } }
            {
              \math_gset_accent:NNnn #1 #2 { \use:c {sym #3} } {#4}
            }
          }
        }
        { \msg_error:nnx {xfss} {not-cmd} { \token_to_str:N #1 } }
      \group_end:
    }
  }
\cs_null:N \mathalpha % why???
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\DeclareMathSymbol}
%    \begin{macrocode}
\DeclareDocumentCommand \DeclareMathSymbol {mmmm}
  {
    \xfss_if_symbol_font_exists:cT {sym#3}
      {
        \group_begin:
          \token_if_cs:NTF #1
            {
              \cs_meaning_if_in:NNTF #1 \mathchar
                {
                  \math_gset_symbol:NNnn #1 #2 { \use:c {sym #3} } {#4}
                  \msg_info:nnx {xfss} {redecl-symbol} { \token_to_str:N #1 }
                }
                {
                  \cs_if_free:cTF {\cs_to_str:N #1}
                    {
                      \math_gset_symbol:NNnn #1 #2 { \use:c {sym #3} } {#4}
                    }
                    {
                      \msg_error:nnx {xfss} {cmd-defined} { \token_to_str:N #1 }
                    }
                }
            }
            {
              \math_gset_mathcode:NNnn #1 #2 { \use:c{sym #3} } {#4}
            }
        \group_end:
      }
  }
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\DeclareMathDelimiter}
%
%    \begin{macrocode}
\DeclareDocumentCommand \DeclareMathDelimiter {m}
  {
    \token_if_cs:NTF #1
      \xfss_declare_math_delimiter_cs:NNnnnn
      \xfss_declare_math_delimiter_aux:nnnn
    #1
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected:Npn \xfss_declare_math_delimiter_aux:nnnn #1#2#3#4
  {
    \DeclareMathSymbol #1 {#2} {#3} {#4}
    \xfss_declare_math_delimiter_aux_ii:nnnnn #1 {#3} {#4}
  }
\cs_new_protected:Npn \xfss_declare_math_delimiter_aux_ii:nnnnn #1#2#3#4#5
  {
    \xfss_if_symbol_font_exists:cT {sym#2} {
      \xfss_if_symbol_font_exists:cT {sym#4} {
        \math_gset_delcode:Nnnnn #1 {#2} { \use:c {sym #3} } {#4} {#5}
      }
    }
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected:Npn \xfss_declare_math_delimiter_cs:NNnnnn #1#2#3#4#5#6
  {
    \xfss_if_symbol_font_exists:cT {sym#3} {
      \xfss_if_symbol_font_exists:cT {sym#5} {
        \group_begin:
          \cs_meaning_if_in:NNTF #1 \delimiter
          {
            \math_gset_delimiter:NNnnnn #1 #2
              { \use:c {sym #3} } {#4}
              { \use:c {sym #5} } {#6}
            \msg_info:nnx {xfss} {redecl-delim} { \token_to_str:N #1 }
          }
          {
            \cs_if_exist:cTF {\cs_to_str:N#1}
            {
              \msg_error:nnx {xfss} {cmd-defined} { \token_to_str:N #1 }
            }
            {
              \math_gset_delimiter:NNnnnn #1 #2
                { \use:c {sym #3} } {#4}
                { \use:c {sym #5} } {#6}
            }
          }
        \group_end:
      }
    }
  }
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\DeclareMathRadical}
%
%    \begin{macrocode}
\DeclareDocumentCommand \DeclareMathRadical {mm mmm}
  {
    \xfss_if_symbol_font_exists:cT {sym#2} {
      \xfss_if_symbol_font_exists:cT {sym#4} {
        \cs_if_free:NTF #1
        {
          \math_gset_radical:Nnnnn #1
            { \use:c {sym #2} } {#3}
            { \use:c {sym #4} } {#5}
        }
        {
          \cs_meaning_if_in:NNTF #1 \radical
          {
            \msg_info:nnx {xfss} {redecl-radical} { \token_to_str:N #1 }
            \math_gset_radical:Nnnnn #1
              { \use:c {sym #2} } {#3}
              { \use:c {sym #4} } {#5}
          }
          {
            \msg_error:nnx {xfss} {cmd-defined} { \token_to_str:N #1 }
          }
        }
      }
    }
  }
%    \end{macrocode}
% \end{macro}
%
%
%    \begin{macrocode}
\DeclareDocumentCommand \DeclareSymbolFontAlphabet {mm}
  {
    \exp_args:Nc \xfss_declare_symbol_font_alphabet:NnN
      { \cs_to_str:N #1 \space } {#2} #1
  }
\cs_new_protected:Npn \xfss_declare_symbol_font_alphabet:NnN #1#2#3
  {
    \bool_set_true:N \l_xfss_tmp_bool
    \xfss_if_symbol_font_exists:cTF {sym#2}
    {
      \seq_if_anywhere_in:NnTF \g_xfss_alpha_seq {#1}
      {
        \msg_info:nnx {xfss} {redecl-mathalph} { \token_to_str:N #3 }

        \seq_clear:N \l_reserved_tmpa_seq
        \seq_map_inline:Npn \g_xfss_alpha_seq ##1 ##2 ##3 {
          \cs_if_eq:NNF ##1 #1 { \seq_put_right:Nn \g_xfss_alpha_seq ##1##2##3 }
        }
        \seq_gset_eq:NN \g_xfss_alpha_seq \l_reserved_tmpa_seq

        \seq_map_inline:Nn \g_xfss_version_seq {
          \group_begin:
            \toks_clear:N \l_xfss_tmp_toks
            \cs_set:Npn \xfss_get_and_define_fonts:nn ####1 ####2 {
              \toks_put_right:Nn \l_xfss_tmp_toks
                { \xfss_get_and_define_fonts:nn ####1 ####2 }
            }
            \cs_set:Npn \xfss_install_math_alphabet:Nn ####1 ####2 {
              \cs_if_eq:NNF ####1 #1 {
                \toks_put_right:Nn \l_xfss_tmp_toks
                  { \xfss_install_math_alphabet:Nn ####1 {####2} }
              }
            }
            ##1
            \tl_gset_eq:NV ##1 \l_xfss_tmp_toks
          \group_end:
        }

      }{
        \cs_if_exist:cT {\cs_to_str:N #1 \space}
        {
          \cs_meaning_if_in:NNTF #1 {\xfss_use_math_group:nn}
          {
            \msg_info:nnx {xfss} {redecl-mathalph} { \token_to_str:N #3 }
          }
          {
            \bool_set_false:N \l_xfss_tmp_bool
            \msg_error:nnx {xfss} {cmd-defined} { \token_to_str:N #3 }
          }
        }
      }
    }
    {
      \bool_set_false:N \l_xfss_tmp_bool
    }
    \bool_if:NT \l_xfss_tmp_bool
    {
      \cs_set:Npn \cs_tmp:w ##1##2/##3 \q_nil {
        \tl_set:Nn \l_xfss_tmpa_tl {##2}
      }
      \seq_map_inline:Npn \g_xfss_group_seq ##1##2 {
        \cs_if_eq:cNT {sym#2} ##1
        { \exp_after:wN \cs_tmp:w \token_to_str:N ##2 \q_nil }
      }
      \cs_set:Npx #1 {
        \exp_not:n
        {\mode_if_math:F {\msg_error:nnx {xfss} {only-math-cmd} #1 } }
        \exp_not:N \xfss_use_math_group:nn
        \exp_not:c {xfss_setup_math_encoding_ \l_xfss_tmpa_tl :}
        \use:c {sym #2}
      }
      \cs_set_protected:Npn #3 { #1 }
    }
  }
%    \end{macrocode}
%
% \section{Font commands}
% From File: ltfssini.dtx
%    \begin{macrocode}
\DeclareMathVersion{normal}
\DeclareMathVersion{bold}
\DeclareDocumentCommand \rmfamily {}
  {
    \xfss_check_not_math_alphabet:NN\rmfamily\mathrm
    \fontfamily\rmdefault\selectfont
  }
\DeclareDocumentCommand \sffamily {}
  {
    \xfss_check_not_math_alphabet:NN\sffamily\mathsf
    \fontfamily\sfdefault\selectfont
  }
\DeclareDocumentCommand \ttfamily {}
  {
    \xfss_check_not_math_alphabet:NN\ttfamily\mathtt
    \fontfamily\ttdefault\selectfont
  }
\DeclareDocumentCommand \bfseries {}
  {
    \xfss_check_not_math_alphabet:NN\bfseries\mathbf
    \fontseries\bfdefault\selectfont
  }
\DeclareDocumentCommand \mdseries {}
  {
    \xfss_check_not_math_alphabet:NN\mdseries\relax
    \fontseries\mddefault\selectfont
  }
\DeclareDocumentCommand \upshape {}
  {
    \xfss_check_not_math_alphabet:NN\upshape\relax
    \fontshape\updefault\selectfont
  }
\DeclareDocumentCommand \slshape {}
  {
    \xfss_check_not_math_alphabet:NN\slshape\relax
    \fontshape\sldefault\selectfont
  }
\DeclareDocumentCommand \scshape {}
  {
    \xfss_check_not_math_alphabet:NN\scshape\relax
    \fontshape\scdefault\selectfont
  }
\DeclareDocumentCommand \itshape {}
  {
    \xfss_check_not_math_alphabet:NN\itshape\mathit
    \fontshape\itdefault\selectfont
  }
%    \end{macrocode}
%
% fixltx2e version: (different version in fontspec; worth adopting?)
%    \begin{macrocode}
\DeclareDocumentCommand \em {}
  {
    \xfss_check_not_math:N \em
    \dim_compare:nNnTF \fontface_current_slant: > 0 {\eminnershape} {\itshape}
  }
\tl_set:Nn \eminnershape {\upshape}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareDocumentCommand \boldmath {}
  {
    \xfss_check_not_math:N \boldmath
    \mathversion {bold}
  }
\DeclareDocumentCommand \unboldmath {}
  {
    \xfss_check_not_math:N \unboldmath
    \mathversion {normal}
  }

\tl_set:Nn \l_xfss_math_version_tl {normal}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareDocumentCommand \oldstylenums {m}
  {
    \group_begin:
      \font_set_spaceskip:n { \fontface_current_spaceskip: }
      \usefont{OML}{\rmdefault}{\g_xfss_series_tl}{it}
      \mathgroup\symletters #1
    \group_end:
  }
\cs_new_protected:Npn \xfss_text_in_math:n #1 {{\mbox{#1}}}
\DeclareDocumentCommand \normalfont {}
  {
    \usefont
      \encodingdefault
      \familydefault
      \seriesdefault
      \shapedefault
    \scan_stop:
  }
%    \end{macrocode}
%
%
%
% \section{Text and math font initial setup}
% From fonttext.ltx.
%    \begin{macrocode}
\DeclareErrorFont{T1}{lmr}{m}{n}{10}
%    \end{macrocode}
% From omlenc.def.
%    \begin{macrocode}
\DeclareFontEncoding{OML}{}{}
\DeclareTextSymbol{\textless}{OML}{`\<}
\DeclareTextSymbol{\textgreater}{OML}{`\>}
\DeclareTextAccent{\t}{OML}{127}  % "7F
%    \end{macrocode}
%
% Preload "OT1" and "T1" encodings; we'll make the latter the default
% but must keep the legacy one around for backwards compatibility with
% third-party packages.
%    \begin{macrocode}
\file_input:n {ot1enc.def}
\file_input:n {t1enc.def}
%    \end{macrocode}
%
% From {omsenc.def}.
%    \begin{macrocode}
\DeclareFontEncoding{OMS}{}{}
\DeclareTextSymbol{\textasteriskcentered}{OMS}{3}   % "03
\DeclareTextSymbol{\textbackslash}{OMS}{110}        % "6E
\DeclareTextSymbol{\textbar}{OMS}{106}              % "6A
\DeclareTextSymbol{\textbardbl}{OMS}{107}           % "6B
\DeclareTextSymbol{\textbraceleft}{OMS}{102}        % "66
\DeclareTextSymbol{\textbraceright}{OMS}{103}       % "67
\DeclareTextSymbol{\textbullet}{OMS}{15}            % "0F
\DeclareTextSymbol{\textdaggerdbl}{OMS}{122}        % "7A
\DeclareTextSymbol{\textdagger}{OMS}{121}           % "79
\DeclareTextSymbol{\textparagraph}{OMS}{123}        % "7B
\DeclareTextSymbol{\textperiodcentered}{OMS}{1}     % "01
\DeclareTextSymbol{\textsection}{OMS}{120}          % "78
\DeclareTextSymbol{\textbigcircle}{OMS}{13}         % "0D
\DeclareTextCommand{\textcircled}{OMS}[1]
  {
    \mode_leave_vertical:\bgroup
    \ooalign
      {
        \hfil \raise .07ex\hbox {\upshape#1}\hfil \crcr
        \char 13 % "0D
      }
    \egroup
  }
%    \end{macrocode}
% \section{Default document fonts}
%    \begin{macrocode}
\fontencoding{T1}
\DeclareFontEncodingDefaults{}{}
\DeclareFontSubstitution{T1}{lmr}{m}{n}
\group_begin:
  \xfss_switch_catcodes:
  \file_input:n {t1lmr.fd}
\group_end:
\group_begin:
  \xfss_switch_catcodes:
  \file_input:n {t1lmss.fd}
  \file_input:n {t1lmtt.fd}
\group_end:
\DeclareErrorFont{T1}{lmr}{m}{n}{10}
%    \end{macrocode}
%
%    \begin{macrocode}
\tl_set:Nn \rmdefault{lmr}
\tl_set:Nn \sfdefault{lmss}
\tl_set:Nn \ttdefault{lmtt}
\tl_set:Nn \bfdefault{bx}
\tl_set:Nn \mddefault{m}
\tl_set:Nn \itdefault{it}
\tl_set:Nn \sldefault{sl}
\tl_set:Nn \scdefault{sc}
\tl_set:Nn \updefault{n}
\tl_set:Nn \encodingdefault{T1}
\tl_set:Nn \familydefault{\rmdefault}
\tl_set:Nn \seriesdefault{\mddefault}
\tl_set:Nn \shapedefault{\updefault}
%    \end{macrocode}
% Originally fontmath.ltx:
%    \begin{macrocode}
\DeclareFontEncoding{OML}{}{}
\DeclareFontEncoding{OMS}{}{}
\DeclareFontEncoding{OMX}{}{}
\DeclareFontEncoding{U}{}{\g_no_accents_tl}
\DeclareFontSubstitution{OML}{lmm}{m}{it}
\DeclareFontSubstitution{OMS}{lmsy}{m}{n}
\DeclareFontSubstitution{OMX}{lmex}{m}{n}
\DeclareFontSubstitution{U}{cmr}{m}{n}
%    \end{macrocode}
%
%    \begin{macrocode}
\group_begin:
  \xfss_switch_catcodes:
  \file_input:n {omllmm.fd}
  \file_input:n {omslmsy.fd}
  \file_input:n {omxlmex.fd}
  \file_input:n {ucmr.fd}
\group_end:
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareSymbolFont{operators}   {T1}{lmr} {m}{n}
\DeclareSymbolFont{letters}     {OML}{lmm} {m}{it}
\DeclareSymbolFont{symbols}     {OMS}{lmsy}{m}{n}
\DeclareSymbolFont{largesymbols}{OMX}{lmex}{m}{n}
\SetSymbolFont{operators}{bold}{T1}{lmr} {bx}{n}
\SetSymbolFont{letters}  {bold}{OML}{lmm} {b}{it}
\SetSymbolFont{symbols}  {bold}{OMS}{lmsy}{b}{n}
\DeclareSymbolFontAlphabet{\mathrm}    {operators}
\DeclareSymbolFontAlphabet{\mathnormal}{letters}
\DeclareSymbolFontAlphabet{\mathcal}   {symbols}
\DeclareMathAlphabet      {\mathbf}{T1}{lmr}{bx}{n}
\DeclareMathAlphabet      {\mathsf}{T1}{lmss}{m}{n}
\DeclareMathAlphabet      {\mathit}{T1}{lmr}{m}{it}
\DeclareMathAlphabet      {\mathtt}{T1}{lmtt}{m}{n}
\SetMathAlphabet\mathsf{bold}{T1}{lmss}{bx}{n}
\SetMathAlphabet\mathit{bold}{T1}{lmr}{bx}{it}
\DeclareMathSizes{5}{5}{5}{5}
\DeclareMathSizes{6}{6}{5}{5}
\DeclareMathSizes{7}{7}{5}{5}
\DeclareMathSizes{8}{8}{6}{5}
\DeclareMathSizes{9}{9}{6}{5}
\DeclareMathSizes{10}{10}{7}{5}
\DeclareMathSizes{11}{11}{8}{6}
\DeclareMathSizes{12}{12}{8}{6}
\DeclareMathSizes{14}{14}{10}{7}
\DeclareMathSizes{17}{17}{12}{10}
\DeclareMathSizes{20}{20}{14}{12}
\DeclareMathSizes{25}{25}{20}{17}
%    \end{macrocode}
% And now set up all the symbols:
%    \begin{macrocode}
\file_input:n {fontmath3.ltx}
%    \end{macrocode}
% From preload.ltx:
%    \begin{macrocode}
\fontface_set:cn {OMX/lmex/m/n/10} {lmex10}
\fontface_set:Nn \tenln  {line10}
\fontface_set:Nn \tenlnw  {linew10}
\fontface_set:Nn \tencirc {lcircle10}
\fontface_set:Nn \tencircw {lcirclew10}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclarePreloadSizes{T1}{lmr}{m}{n}{5,7,10}
\DeclarePreloadSizes{OML}{lmm}{m}{it}{5,7,10}
\DeclarePreloadSizes{OMS}{lmsy}{m}{n}{5,7,10}
%    \end{macrocode}
%
%
% \section{Font commands}
%
% From file: ltfntcmd.dtx
%
% \begin{macro}{\DeclareTextFontCommand}
%
%    \begin{macrocode}
\DeclareDocumentCommand \DeclareTextFontCommand {mm}
  {
    \DeclareDocumentCommand #1 {m}
      {
        \mode_if_math:TF
          { \xfss_text_in_math:n {#2##1} }
          {
            \mode_leave_vertical:
            \bgroup
              \xfss_text_command:n {##1}
              #2 \xfss_check_ic_l: ##1 \xfss_check_ic_r:
            \egroup
          }
      }
  }
%    \end{macrocode}
%
% \subsection{Italic correction}
%
%    \begin{macrocode}
\cs_null:N \nocorr
\cs_clear:N \xfss_check_ic_l:
\cs_clear:N \xfss_check_ic_r:
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected:Npn \xfss_text_command:n #1
  {
    \tl_if_blank:nTF {#1}
    {
      \cs_clear:N \xfss_check_ic_l:
      \cs_clear:N \xfss_check_ic_r:
    }
    { \xfss_check_nocorr:w #1\nocorr \q_nil }
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected:Npn \xfss_check_nocorr:w #1#2 \nocorr #3 \q_nil
  {
    \cs_set_eq:NN \xfss_check_ic_l: \xfss_maybe_ic:
    \cs_set:Npn \xfss_check_ic_r:
      { \mode_if_vertical:F { \group_insert_after:N \xfss_maybe_ic: } }
    \tl_if_eq:nnTF {\nocorr} {#1}
      {
        \tl_if_empty:nTF {#3}
          { \cs_clear:N \xfss_check_ic_l: }
          {
            \cs_clear:N \xfss_check_ic_l:
            \cs_clear:N \xfss_check_ic_r:
          }
      }
      {
        \tl_if_empty:nF {#3} { \cs_clear:N \xfss_check_ic_r: }
      }
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \xfss_maybe_ic:
  { \peek_after:Nw \xfss_maybe_ic_aux: }
\cs_new_protected_nopar:Npn \xfss_maybe_ic_aux:
  {
    \dim_compare:nNnF \fontface_current_slant: > {0pt}
      {
        \bool_set_true:N \l_xfss_maybe_ic_bool
        \tl_map_function:NN \nocorrlist \xfss_test_nocorr:N
        \bool_if:NT \l_xfss_maybe_ic_bool { \xfss_sw_slant: }
      }
  }
%    \end{macrocode}
% Surely it is faster to do the mapping as a function rather than inline.
%    \begin{macrocode}
\cs_new_protected:Npn \xfss_test_nocorr:N #1
  {
    \token_if_eq_meaning:NNT #1 \l_peek_token
    {
      \bool_set_false:N \l_xfss_maybe_ic_bool
      \tl_map_break:
    }
  }
\cs_new_protected_nopar:Npn \xfss_sw_slant:
  {
    \dim_compare:nNnTF \l_last_skip = {0pt}
    { \xfss_fix_penalty: }
    {
      \l_xfss_tmp_skip \l_last_skip
      \unskip
      \xfss_fix_penalty:
      \hskip \l_xfss_tmp_skip
    }
  }
\cs_new_protected_nopar:Npn \xfss_fix_penalty:
  {
    \int_compare:nNnTF \tex_lastpenalty:D = 0
      { \tex_italiccor:D }
      {
        \int_set:Nn \l_xfss_tmpa_int \tex_lastpenalty:D
        \tex_unpenalty:D
        \tex_italiccor:D
        \tex_penalty:D \l_xfss_tmpa_int
      }
  }
\tl_set:Nn \nocorrlist {,.}
%    \end{macrocode}
% fixme: "\tex_unpenalty:D", etc., wrappers
%
%    \begin{macrocode}
\int_new:N \l_xfss_tmpa_int
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_if_free:NT \xfss_text_in_math:n
  {
    \cs_new_protected:Npn \xfss_text_in_math:n
      { \mode_leave_vertical: \hbox:n }
  }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\DeclareTextFontCommand{\textrm}{\rmfamily}
\DeclareTextFontCommand{\textsf}{\sffamily}
\DeclareTextFontCommand{\texttt}{\ttfamily}
\DeclareTextFontCommand{\textnormal}{\normalfont}
\DeclareTextFontCommand{\textbf}{\bfseries}
\DeclareTextFontCommand{\textmd}{\mdseries}
\DeclareTextFontCommand{\textit}{\itshape}
\DeclareTextFontCommand{\textsl}{\slshape}
\DeclareTextFontCommand{\textsc}{\scshape}
\DeclareTextFontCommand{\textup}{\upshape}
\DeclareTextFontCommand{\emph}{\em}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareDocumentCommand \DeclareOldFontCommand {mmm}
  {
    \msg_warning:nnx {xfss} {deprecated-function}
      { \token_to_str:N \DeclareOldFontCommand }
  }
%    \end{macrocode}
%
% \section{Sizing}
%
%
% \begin{macro}{\xfss_current_fontsize_switch:}
%    \begin{macrocode}
\cs_new:Nn \xfss_current_fontsize_switch: {}
%    \end{macrocode}
% \end{macro}
%
%
%    \begin{macrocode}
\cs_new_protected:Npn \xfss_set_font_size:Nnn #1#2#3
  {
    \xfss_check_not_math:N #1
    \cs_set_eq:NN \xfss_current_fontsize_switch: #1
    \fontsize{#2}{#3}\selectfont
  }
%    \end{macrocode}
%
% Temporary just to get things working. Todo: incorporate packages
% \textsf{relsize} and \textsf{extsizes}. N.B. changing the font size
% should be orthogonal to design decisions, probably.
%
% N.B. \LaTeXe\ uses non-integer sizes here so we're being hugely
% incompatible at the moment.
%
% \begin{macro}{\xfss_set_font_size_commands:n}
% Sets the fontsize changing commands automatically based on the following
% relationships:
% \[
% f = f_0 \times 2^{n/8} \qquad b = f^{1.08}
% \]
% where $f$ and $b$ are the fontsize and baselineskip based on a nominal
% fontsize of $f_0$ and size index $n$.
% These equations were derived empircally pretty quickly
% and could be improved.
%    \begin{macrocode}
\cs_new:Nn \xfss_set_font_size_commands:n
  {
    \xfss_declare_font_cmd:Nnn \tiny         {#1} {-8}
    \xfss_declare_font_cmd:Nnn \scriptsize   {#1} {-4}
    \xfss_declare_font_cmd:Nnn \footnotesize {#1} {-2}
    \xfss_declare_font_cmd:Nnn \small        {#1} {-1}
    \xfss_declare_font_cmd:Nnn \normalsize   {#1} {0}
    \xfss_declare_font_cmd:Nnn \large        {#1} {2}
    \xfss_declare_font_cmd:Nnn \Large        {#1} {4}
    \xfss_declare_font_cmd:Nnn \LARGE        {#1} {6}
    \xfss_declare_font_cmd:Nnn \huge         {#1} {8}
    \xfss_declare_font_cmd:Nnn \Huge         {#1} {10}
    \normalsize
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[internal]{\xfss_declare_font_cmd:Nnn}
% \begin{arguments}
% \item command
% \item nominal size
% \item size index
% \end{arguments}
% As mentioned above, this is the command that does the calculations
% for the font sizing.
%    \begin{macrocode}
\cs_new:Nn \xfss_declare_font_cmd:Nnn
  {
    \fp_set:Nn \l_xfss_pow_fp {1.0905} % 2^(1/8)
    \fp_pow:Nn \l_xfss_pow_fp {#3}
    \fp_set:Nn \l_xfss_fsize_fp {#2}
    \fp_mul:Nn \l_xfss_fsize_fp {\l_xfss_pow_fp}
    \fp_set:Nn \l_xfss_bskip_fp {\l_xfss_fsize_fp}
    \fp_pow:Nn \l_xfss_bskip_fp {1.08} % empirical
    \xfss_declare_font_cmd_aux:Nxx #1
      {\fp_to_dim:N \l_xfss_fsize_fp} {\fp_to_dim:N \l_xfss_bskip_fp}
  }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\cs_new:Nn \xfss_declare_font_cmd_aux:Nnn
  {
    \DeclareDocumentCommand #1
      { } { \xfss_set_font_size:Nnn #1 {#2} {#3} }
  }
\cs_generate_variant:Nn \xfss_declare_font_cmd_aux:Nnn {Nxx}
%    \end{macrocode}
%
% When used in \LaTeXe, extract the font size from \cs{normalsize}
% and replace the font changing commands with \pkg{xfss} methods.
% Note that \cs{small}, etc., no longer contain alterations to list settings,
% and so on.
%    \begin{macrocode}
%<*!initex>
\cs_new:Nn \xfss_extract_normalsize:
  {
    \exp_after:wN \xfss_extract_fsize_aux:Nnnw
    \normalsize \q_nil
  }
\cs_new:Npn \xfss_extract_fsize_aux:Nnnw #1#2#3#4 \q_nil {#3}
\AtBeginDocument
  {
    \exp_args:Nx \xfss_set_font_size_commands:n
      {\xfss_extract_normalsize:}
  }
%</!initex>
%    \end{macrocode}
%
%
% \section{NFSS interaction}
% Not yet comprehensive.
%
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
% \subsection{Unloading the old commands}
%
%    \begin{macrocode}
\cs_undefine:N \font@name
%    \end{macrocode}
%
% \subsection{Supporting NFSS internal commands}
%
%    \begin{macrocode}
\tl_set:Nn \glb@settings {\g_xfss_global_settings_tl}
\tl_set:Nn \tf@size  {\g_xfss_tf_size_tl}
\tl_set:Nn \sf@size  {\g_xfss_sf_size_tl}
\tl_set:Nn \ssf@size {\g_xfss_ssf_size_tl}
\tl_set:Nn \noaccents@ {\g_no_accents_tl}
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_set_protected:Npn \operator@font {\math_operator_font:}
%    \end{macrocode}
%
%    \begin{macrocode}
\tl_replace_once:Nnn \document {\process@table} {\xfss_process_table:}
\tl_replace_once:Nnn \enddocument {\@defaultsubs} {\xfss_subst_warning:}
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_set:Npn \xfss_tmp:w #1 \@dofilelist #2 \q_nil
  { \exp_not:n {#1 \@dofilelist} }
\tl_set:Nx \l_tmpa_tl { \exp_after:wN \xfss_tmp:w \enddocument \q_nil }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_set:Npn \xfss_tmp:w #1 \xfss_subst_warning: #2 \q_nil
  {
    \exp_not:V \l_tmpa_tl
    \exp_not:n { \xfss_size_diff_warning: \xfss_subst_warning: #2 }
  }
\tl_set:Nx \enddocument { \exp_after:wN \xfss_tmp:w \enddocument \q_nil }
\cs_set_eq:NN \reset@font \normalfont
%    \end{macrocode}
%
% fixme: perhaps patch these in the 2e kernel?
%    \begin{macrocode}
\cs_set_eq:NN \@acci \'
\cs_set_eq:NN \@accii \`
\cs_set_eq:NN \@acciii \=
%    \end{macrocode}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \section{Epilogue}
%
% \begin{macro}{\@onlypreamble}
% These are out-commented because for Unicode maths we no
% longer have the restriction of loading a small number of fonts.
%
% Some of them may still be wanted, though, so we'll keep them around
% until we know they're no longer required.
%    \begin{macrocode}
%<*package>
% \@onlypreamble\DeclareTextCommand
% \@onlypreamble\DeclareTextSymbol
% \@onlypreamble\DeclareTextCommandDefault
% \@onlypreamble\DeclareTextAccent
% \@onlypreamble\DeclareTextCompositeCommand
% \@onlypreamble\DeclareTextComposite
% \@onlypreamble\DeclareTextSymbolDefault
% \@onlypreamble\DeclareTextAccentDefault
% \@onlypreamble\UndeclareTextCommand
% \@onlypreamble\mathgroup_new:N
% \@onlypreamble\DeclareFontEncoding
% \@onlypreamble\DeclareFontEncoding@
% \@onlypreamble\DeclareFontSubstitution
% \@onlypreamble\DeclareFontEncodingDefaults
% \@onlypreamble\DeclarePreloadSizes
% \@onlypreamble\DeclareMathSizes
% \@onlypreamble\@DeclareMathSizes
% \@onlypreamble\DeclareErrorFont
% \@onlypreamble\DeclareSizeFunction
% \@onlypreamble\xfss_restore_mathversion:
% \@onlypreamble\xfss_init_restore_version:
% \@onlypreamble\xfss_restore_version:
\@onlypreamble \xfss_process_table:
% \@onlypreamble\DeclareMathVersion
% \@onlypreamble\xfss_new_math_version:N
% \@onlypreamble\DeclareSymbolFont
% \@onlypreamble\xfss_new_symbol_font:Nnnnn
% \@onlypreamble\SetSymbolFont
% \@onlypreamble\xfss_set_symbol_font:NNN
% \@onlypreamble\xfss_get_cdp:wqN
% \@onlypreamble\DeclareMathAlphabet
% \@onlypreamble\xfss_new_math_alphabet:Nnnnn
% \@onlypreamble\SetMathAlphabet
% \@onlypreamble\xfss_set_math_alphabet:NNNNN
% \@onlypreamble\DeclareMathAccent
% \@onlypreamble\math_gset_accent:NNnn
% \@onlypreamble\DeclareMathSymbol
% \@onlypreamble\math_gset_mathcode:NNnn
% \@onlypreamble\math_gset_symbol:NNnn
% \@onlypreamble\DeclareMathDelimiter
% \@onlypreamble\xfss_declare_math_delimiter_aux:nnnn
% \@onlypreamble\xfss_declare_math_delimiter_cs:NNnnnn
% \@onlypreamble\xfss_declare_math_delimiter_aux_ii:nnnnn
% \@onlypreamble\math_gset_delimiter:NNnnnn
% \@onlypreamble\math_gset_delcode:Nnnnn
% \@onlypreamble\DeclareMathRadical
% \@onlypreamble\xfss_mclass_to_int:N
% \@onlypreamble\DeclareSymbolFontAlphabet
% \@onlypreamble\DeclareSymbolFontAlphabet@
% \@onlypreamble\DeclareTextFontCommand
%</package>
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%</package|initex>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
%
% \endinput
