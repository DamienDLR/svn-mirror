%
% Copyright (C) 2011 LaTeX3 Project
%

\documentclass{minimal}
\input{regression-test}

\RequirePackage{l3str}

\begin{document}
\START
\AUTHOR{Bruno Le Floch}
\ExplSyntaxOn
\OMIT
\cs_generate_variant:Nn \str_convert:nnn { nno }
\TIMO

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\TEST{str_if_bytes}{
  \str_set:Nn \l_foo_str {abc~#\^^@\^^ff}
  \TYPE { \str_if_bytes:NTF \l_foo_str { TRUE } { \ERROR } }
  % Needs testing with LuaTeX or XeTeX!
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cs_set:Npn \test_tmp:w #1
  { #10 #11 #12 #13 #14 #15 #16 #17 #18 #19 #1A #1B #1C #1D #1E #1F }
\str_set:Nx \l_foo_str
  { \tl_map_function:nN {0123456789ABCDEF} \test_tmp:w }
\exp_args:NNo \str_aux_gset_other:Nn \g_str_result_tl { \l_foo_str }
\str_convert_input_hex:
\tl_set_eq:NN \l_all_bytes_tl \g_str_result_tl

\TEST{Escaping~hex}{
  \TYPE { \g_str_result_tl }
  \str_convert_output_hex:
  \TYPE { \g_str_result_tl }
  \str_convert_input_hex:
  \tl_if_eq:NNTF \l_all_bytes_tl \g_str_result_tl { \TRUE } { \ERROR }
}
 % need to test on invalid input

\TEST{Escaping~name}{
  \str_convert_output_name:
  \TYPE { \g_str_result_tl }
  \str_convert_input_name:
  \tl_if_eq:NNTF \l_all_bytes_tl \g_str_result_tl { \TRUE } { \ERROR }
}
 % need to test on invalid input

\TEST{Escaping~string}{
  \str_convert_output_string:
  \TYPE { \g_str_result_tl }
  \str_convert_input_string:
  \tl_if_eq:NNTF \l_all_bytes_tl \g_str_result_tl { \TRUE } { \ERROR }
}
 % need to test on invalid input

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\TEST{Escaping~url}{
  \str_convert_output_url:
  \TYPE { \g_str_result_tl }
  \str_convert_input_url:
  \tl_if_eq:NNTF \l_all_bytes_tl \g_str_result_tl { \TRUE } { \ERROR }
}
 % need to test on invalid input

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\char_set_catcode_other:N \^^83

\TEST{str_set_from_UTF_viii:Nn}{
  \str_set_convert:Nnnn \l_tmpa_str { utf8/hex } { native } { c2 83 }
  \str_if_eq:onTF \l_tmpa_str { ^^83 } { \TRUE } { \ERROR }
}

\TEST{str_to_UTF_viii:n}{
  \str_set_convert:Nnnn \l_tmpa_str { native } { utf8/hex } { ^^83 }
  \str_if_eq:xxTF { \l_tmpa_str } { C2 83 } { \TRUE } { \ERROR }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\TEST{iso~encoding}{
  \str_load_encoding:n { iso88592 }
  \str_set_convert:Nnnn \l_tmpa_str { utf16/hex } { iso88592/hex }
    { 0044 3333 0044 005E 0044 017C 0044 017D 0044 }
  \str_if_eq:xxTF { \l_tmpa_str } { 44445E44BF44AE44 } { \TRUE } { \ERROR }
}

\int_compare:nNnF \etex_currentgrouplevel:D = \c_zero { \etex_showgroups:D }
\int_compare:nNnF \etex_currentiflevel:D = \c_one { \etex_showifs:D }

\END
