% \iffalse
%% File: l3doc.dtx Copyright (C) 1990-2008 LaTeX3 project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the ``expl3 bundle'' (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/cgi-bin/cvsweb.cgi/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%<*driver>
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
\input docstrip.tex
\askforoverwritefalse
\preamble


EXPERIMENTAL CODE

Do not distribute this file without also distributing the
source files specified above.

Do not distribute a modified version of this file.


\endpreamble
% stop docstrip adding \endinput
\postamble
\endpostamble
\keepsilent
\generate{\file{l3doc.cls}{\from{l3doc.dtx}{class}}}

\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</driver>
%
%<*driver|class>
\RequirePackage{l3names}
%</driver|class>
%
% Need to protect the file metadata for any modules that load l3doc.
% This is restored after "\ProvideExplClass" below.
%    \begin{macrocode}
%<class>\let        \filenameOld        \filename
%<class>\let     \filenameextOld     \filenameext
%<class>\let        \filedateOld        \filedate
%<class>\let     \fileversionOld     \fileversion
%<class>\let \filedescriptionOld \filedescription
%    \end{macrocode}
%
%<*driver|class>
\GetIdInfo$Id: l3doc.dtx 824 2008-09-17 14:21:11Z will $
          {L3 Experimental documentation class}
%</driver|class>
%
%<*driver>
\ProvidesFile{\filename.\filenameext}
  [\filedate\space v\fileversion\space\filedescription]
\documentclass[full]{l3doc}
\begin{document}
\DocInput{\filename.\filenameext}
\end{document}
%</driver>
%
%<*class>
\ProvidesExplClass
  {\filename}{\filedate}{\fileversion}{\filedescription}
\RequirePackage{expl3}
\let        \filename        \filenameOld
\let     \filenameext     \filenameextOld
\let        \filedate        \filedateOld
\let     \fileversion     \fileversionOld
\let \filedescription \filedescriptionOld
% \fi
%
% \title{The \textsf{l3doc} class\thanks{This file
%         has version number \fileversion, last
%         revised \filedate.}}
% \author{\Team}
% \date{\filedate}
% \maketitle
%
% \section{Introduction}
%
% This is an ad-hoc class for documenting the \textsf{expl3} bundle,
% a collection of modules or packages that make up \LaTeX3's programming 
% environment. Eventually it will replace the "ltxdoc" class for \LaTeX3, 
% but not before the good ideas in "hypdoc", "xdoc"("2"), and "gmdoc" are 
% incorporated.
%
% It is written as a `self-contained' docstrip package: executing 
% "latex l3doc.dtx" 
% will generate the "l3doc.cls" file and typeset this
% documentation; execute "tex l3doc.dtx" to only generate the ".cls" file.
%
% For now, this package is written in \LaTeXe\ syntax, but that will no doubt
% change\dots.
%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}
%
% The Guilty Parties.
%    \begin{macrocode}
\def\Team{%
  The \LaTeX3 Project\thanks{%
  Frank Mittelbach, Denys Duchier, Chris Rowley,
  Rainer Sch\"opf, Johannes Braams, Michael Downes,
  David Carlisle, Alan Jeffrey, Morten H\o gholm, Thomas Lotze,
  Javier Bezos, Will Robertson}}
%    \end{macrocode}
%
% \section{Options}                       
%
%    \begin{macrocode}
\DeclareOption{a5paper}{\@latexerr{Option not supported}{}}
\DeclareOption{full}{\AtBeginDocument{\input{l3full.cfg}}}
\DeclareOption*{\PassOptionsToClass{\CurrentOption}{article}}
\ProcessOptions
%    \end{macrocode}
%
% \section{Class and package loading}
%
%    \begin{macrocode}
\LoadClass{article}
\RequirePackage{color,fixltx2e,trace}
\RequirePackage[T1]{fontenc}
\RequirePackage{lmodern}
\RequirePackage{hypdoc}
%    \end{macrocode}
% hypdoc kills |\function|'s sanitising of _, for some reason, 
% so we load "underscore" (for now) to work around this:
%    \begin{macrocode}
\RequirePackage{underscore}
%    \end{macrocode}
%
% \section{Configuration}
% Input a local configuration file, if it exists.
%    \begin{macrocode}
\InputIfFileExists{l3doc.cfg}
           {\typeout{*************************************^^J%
                     * Local config file l3doc.cfg used^^J%
                     *************************************}}
           {}
%    \end{macrocode}
%
%    \begin{macrocode}
\renewcommand\MakePrivateLetters{%
  \makeatletter
  \catcode`\_=11\relax
  \catcode`\:=11\relax}
%    \end{macrocode}
%
%    \begin{macrocode}
\CodelineNumbered
\DisableCrossrefs
\setcounter{StandardModuleDepth}{1}
%    \end{macrocode}
%
% \section{Design}
%
% Increase the text width slightly so that width the standard fonts
% 72 columns of code may appear in a |macrocode| environment.
%    \begin{macrocode}
\setlength\textwidth{385pt}
%    \end{macrocode}
%
% Increase the marginpar width slightly, for long command names.
% And increase the left margin by a similar amount.
%    \begin{macrocode}
\addtolength\marginparwidth{30pt}
\addtolength\oddsidemargin{20pt}
\addtolength\evensidemargin{20pt}
%    \end{macrocode}
%
%    \begin{macrocode}
\let\@@oldlist\list
\def\list#1#2{\@@oldlist{#1}{#2\listparindent\z@}}
\setlength{\parindent}{0pt}
\setlength{\itemindent}{0pt}
\setlength{\parskip}{\medskipamount}
%    \end{macrocode}
%
% \section{Text markup}
%
%    Make "|" and |"| be `short verb' characters, but not in
%    the document preamble, where an active character may interfere
%    with packages that are loaded.
%    \begin{macrocode}
\AtBeginDocument{%
  \MakeShortVerb\"
  \MakeShortVerb\|}
%    \end{macrocode}
%
%    \begin{macrocode}
\newcommand{\tn}[1]{{\ttfamily\bslash #1}%
   \index{TeX and LaTeX2e commands\actualchar
          \string\TeX{} and \string\LaTeXe{} commands:\levelchar
          #1\actualchar{\string\ttfamily\string\bslash{}#1}}}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareRobustCommand\cs[1]{\texttt{\char`\\#1}}
%    \end{macrocode}
%
%    \begin{macrocode}
\providecommand*\eTeX{%
  \if b\expandafter\@car\f@series\@nil\boldmath\fi
  $\m@th\varepsilon$-\TeX}
%    \end{macrocode}
%
%    \begin{macrocode}
\let\m\meta
%    \end{macrocode}
%
%    \begin{macrocode}
\newenvironment{texnote}%
   {\endgraf\vspace{3mm}\textbf{\TeX{}hackers~note:}\small}
    {\vspace{3mm}}
%    \end{macrocode}    
% stick the function names in a box. Use an active "|" as delimiter and 
% allow |<...>| to be used as markup for |\meta{...}|
%    \begin{macrocode}
\begingroup
\catcode`\|=\active\catcode`\<=\active
%    \end{macrocode}
% index fuction lists (could be better...)
%    \begin{macrocode}
\ExplSyntaxOn
\gdef:Npn \funcindex #1| {
  \tlist_if_blank:nTF{#1}{
    % at the end, look for extra | and remove it
    \@ifnextchar|{\@gobble}{}
  }{
    \def\yyy{#1}\expandafter\vindex\meaning\yyy\@nil  \funcindex
  }
}
\ExplSyntaxOff
%    \end{macrocode}
%    \begin{macrocode}
\gdef\Arg#1{\texttt{\{}\,\meta{#1}\,\texttt{\}}}
%    \end{macrocode}
%    \begin{macrocode}
\gdef\function{%
  \catcode`\<=\active\def<##1>{\meta{##1}}%
  \bigskip
  \bgroup
  \@makeother\\
  \catcode`\~=10
  \catcode`\ =9
  \catcode`\^^M=9
  \catcode`\^^I=9
  \catcode`\|=\active
  \@function}
\gdef\@function#1{%
  \ifx\@function#1\@function\else
    \funcindex#1| |%
  \fi
  \ttfamily
  \endgraf
  \def\nextnewline{\gdef\nextnewline{\\}}
  \global\let\macroname\@empty
  \noindent\hspace*{-2\parindent}%
  \tabular[b]%
     {@{\vline\hskip\tabcolsep}l@{}c@{\hskip\tabcolsep\vline}}%
  \hline
  \showexplmacros#1|\@nil
  \crcr
  \hline
  \noalign{\kern-2pt}%
  \endtabular
  \egroup}
\global\let\variable\function
%    \end{macrocode}
% Will: I wanted to colourise the macros shown in |{function}| blocks;
% this is the ugly code that does that.
%    \begin{macrocode}
\gdef\showexplmacros#1|{%
  \showexplmacro#1::\@nil
  \@ifnextchar\@nil{\@gobble}{\showexplmacros}%
}
\gdef\showexplmacro#1:#2:#3\@nil{%
  \gdef\newmacroname{#1}%
  \gdef\macrosuffix{#2}%
  \parse@meta#2/\@nil
  \ifx\newmacroname\@empty
    \expandafter\@gobble
  \else
    \expandafter\@firstofone
  \fi{%
    \nextnewline
    \ifx\newmacroname\macroname
      \color[gray]{0.5}%
    \else
      \global\let\macroname\newmacroname
      \color{black}%
    \fi
    \detokenize{#1}\unskip
    \ifx\macrosuffix\@empty
      #3% in case we gobbled a : we wanted
    \else
      \color{black}:\before@slash\unskip
    \fi
    &%
    \def\@tempa{{(EXP)}}%
    \expandafter\expandafter\expandafter\in@\expandafter\@tempa\after@slash
    \ifin@
      \hspace{\tabcolsep}$\star$%
    \else
    \fi}%
}
%    \end{macrocode}
% 
%    \begin{macrocode}
\gdef\parse@meta#1/#2\@nil{%
  \gdef\before@slash{#1}%
  \gdef\after@slash{{#2}}}
%    \end{macrocode}
%
% End the scope of having active "|" and "<".
%    \begin{macrocode}
\endgroup
%    \end{macrocode}
%
% syntax for functions
%    \begin{macrocode}
\def\syntax{%
  \minipage[b]{.7\textwidth}%
  \def\meta@font@select{\rmfamily\itshape} % (Will: I HATE italic cmtt!)
  \small\ttfamily\raggedright
  \obeyspaces\obeylines}
\def\endsyntax{%
  \endminipage\hfil\break\global\@ignoretrue}
%    \end{macrocode}
%
% \begin{environment}{macros}
% We want to extend the old definition to allow comma-separated lists of
% macros, rather than one at a time. (Will: like most things I write, this
% code is pretty hacky.)
%    \begin{macrocode}
% Main environment.
%    \begin{macrocode}
\newenvironment{macros}[1]{%
  \let\doc@beginmacros\@empty
  \let\doc@endmacros\@empty
  \@for\@ii:=\@empty#1\do{%
    \expandafter\macros@addto\expandafter{\@ii}%
  }%
  \doc@beginmacros
}{%
  \doc@endmacros
}
%    \end{macrocode}
% Helper.
%    \begin{macrocode}
\newcommand\macros@addto[1]{%
  \g@addto@macro\doc@beginmacros{\begin{macro}{#1}}%
  \g@addto@macro\doc@endmacros{\end{macro}}%
}
%    \end{macrocode}
% \end{environment}
%
% \section{Everything else}
%
%
% This command will be used to input the patch file
% if that file exists.
%    \begin{macrocode}
\newcommand{\includeltpatch}{%
  \def\currentfile{l3patch.ltx}
  \part{l3patch}
  {\let\ttfamily\relax
    \xdef\filekey{\filekey, \thepart={\ttfamily\currentfile}}}%
  Things we did wrong\ldots
  \IndexInput{l3patch.ltx}}
%    \end{macrocode}
% Get the date from ltvers.dtx
%    \begin{macrocode}
\def\patchdate{0}
\begingroup
   %%\def\ProvidesFile#1\fmtversion#2{\date{#2}\endinput}
   \def\ProvidesFile#1[#2#3]{\date{#2}\endinput}
   \input{l3vers.dtx}
   \xdef\@date{\@date}
   \global\let\X@date=\@date
% Add the patch version if available.
   \long\def\Xdef#1#2#3\def#4#5{%
    \xdef\X@date{#2}%
    \xdef\patchdate{#5}%
    \endinput}%
   \InputIfFileExists{l3patch.ltx}
    {\let\def\Xdef}{\global\let\includeltpatch\relax}
\endgroup
%    \end{macrocode}
%    \begin{macrocode}
\ifx\@date\X@date
   \def\Xpatch{0}
   \ifx\patchdate\Xpatch\else
     \edef\@date{\@date\space Patch level \patchdate}
   \fi
\else
   \@warning{l3patch.ltx does not match l3vers.dtx!}
   \let\includeltpatch\relax
\fi
%    \end{macrocode}
%
%    \begin{macrocode}
\def\vindex#1>#2\@nil{%
  \edef\temp{\foo#2<>\@nil}%
  \ifx\temp\space\else
  \expandafter\SpecialMainIndexB\expandafter{\temp}\fi}
%    \end{macrocode}
% remove <foo> from index (quick hack, could be better)
%    \begin{macrocode}
\def\foo#1<#2>#3\@nil{%
 #1\ifx\foo#3\foo
   \else#2\expandafter\foo\fi#3\@nil}
%\def\foo#1<#2>#3\@nil{#1<#2>#3}
\def\foo#1<#2>#3\@nil{#1}
%    \end{macrocode}
%
%
%
% \begin{macro}{\SpecialMainIndexB}
% Heiko's replacement to play nicely with |hypdoc|:
%    \begin{macrocode}
\def\SpecialMainIndexB#1{%
  \index{%
    \@gobble#1%
    \actualchar
    \string\verb\quotechar*\verbatimchar#1\verbatimchar
    \encapchar
    hdpgindex{\thepage}{usage}%
  }%
}
\def\hdpgindex#1#2#3{%
  \csname\ifx\\#2\\relax\else#2\fi\endcsname{%
    \hyperlink{page.#1}{#3}%
  }%
}
%    \end{macrocode}
% \end{macro}
% 
% \section{DocInclude}
%
%    \begin{macrocode}
\@addtoreset{CodelineNo}{part}
%    \end{macrocode}
%
% \begin{macro}{\DocInclude}
% More or less exactly the same as |\include|, but uses |\DocInput|
% on a |dtx| file, not |\input| on a |tex| file.
%    \begin{macrocode}
\def\partname{File}
%    \end{macrocode}
%
%    \begin{macrocode}
\newcommand*{\DocInclude}[1]{%
  \relax
  \clearpage
  \docincludeaux
  \IfFileExists{#1.fdd}{\def\currentfile{#1.fdd}}{\def\currentfile{#1.dtx}}%
  \ifnum\@auxout=\@partaux
    \@latexerr{\string\include\space cannot be nested}\@eha
  \else \@docinclude#1 \fi}
\def\@docinclude#1 {\clearpage
\if@filesw \immediate\write\@mainaux{\string\@input{#1.aux}}\fi
\@tempswatrue\if@partsw \@tempswafalse\edef\@tempb{#1}\@for
\@tempa:=\@partlist\do{\ifx\@tempa\@tempb\@tempswatrue\fi}\fi
\if@tempswa \let\@auxout\@partaux \if@filesw
\immediate\openout\@partaux #1.aux
\immediate\write\@partaux{\relax}\fi
%    \end{macrocode}
% We need to save (and later restore) various index-related
% commands which might be changed by the included file.
%    \begin{macrocode}
\let\@ltxdoc@PrintIndex\PrintIndex
\let\PrintIndex\relax
\let\@ltxdoc@PrintChanges\PrintChanges
\let\PrintChanges\relax
\let\@ltxdoc@theglossary\theglossary
\let\@ltxdoc@endtheglossary\endtheglossary
\part{\currentfile}%
  {\let\ttfamily\relax
  \xdef\filekey{\filekey, \thepart={\ttfamily\currentfile}}}%
\DocInput{\currentfile}%
\let\PrintIndex\@ltxdoc@PrintIndex
\let\PrintChanges\@ltxdoc@PrintChanges
\let\theglossary\@ltxdoc@theglossary
\let\endtheglossary\@ltxdoc@endtheglossary
\clearpage
\@writeckpt{#1}\if@filesw \immediate\closeout\@partaux \fi
\else\@nameuse{cp@#1}\fi\let\@auxout\@mainaux}
%    \end{macrocode}
%
%    \begin{macrocode}
\gdef\codeline@wrindex#1{\if@filesw
        \immediate\write\@indexfile
            {\string\indexentry{#1}%
            {\filesep\number\c@CodelineNo}}\fi}%
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\let\filesep\@empty
%    \end{macrocode}
%
% \begin{macro}{\docincludeaux}
%    \begin{macrocode}
\def\docincludeaux{%
  \def\thepart{\aalph{part}}\def\filesep{\thepart-}%
  \let\filekey\@gobble
  \g@addto@macro\index@prologue{%
    \gdef\@oddfoot{\parbox{\textwidth}{\strut\footnotesize
       \raggedright{\bfseries File Key:} \filekey}}%
    \let\@evenfoot\@oddfoot}%
  \global\let\docincludeaux\relax
 \gdef\@oddfoot{%
   \expandafter\ifx\csname ver@\currentfile\endcsname\relax
    File \thepart: {\ttfamily\currentfile} %
   \else
    \GetFileInfo{\currentfile}%
    File \thepart: {\ttfamily\filename} %
    Date: \filedate\ %
    Version \fileversion
    \fi
    \hfill\thepage}%
 \let\@evenfoot\@oddfoot}%
%    \end{macrocode}
% \end{macro}
%
%
%    \begin{macrocode}
%</class>
%    \end{macrocode}
% \Finale
%
% \endinput
