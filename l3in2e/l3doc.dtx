% \iffalse
%% File: l3doc.dtx Copyright (C) 1990-2008 LaTeX3 project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the ``expl3 bundle'' (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/cgi-bin/cvsweb.cgi/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%<*driver>
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
\input docstrip.tex
\askforoverwritefalse
\preamble


EXPERIMENTAL CODE

Do not distribute this file without also distributing the
source files specified above.

Do not distribute a modified version of this file.


\endpreamble
% stop docstrip adding \endinput
\postamble
\endpostamble
\keepsilent
\generate{\file{l3doc.cls}{\from{l3doc.dtx}{class}}}
\generate{\file{l3doc.cfg}{\from{l3doc.dtx}{doccfg}}}
\generate{\file{l3full.cfg}{\from{l3doc.dtx}{fullcfg}}}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</driver>
%
%<*driver|class>
\RequirePackage{l3names}
%</driver|class>
%
% Need to protect the file metadata for any modules that load l3doc.
% This is restored after "\ProvideExplClass" below.
%    \begin{macrocode}
%<class>\let        \filenameOld        \filename
%<class>\let     \filenameextOld     \filenameext
%<class>\let        \filedateOld        \filedate
%<class>\let     \fileversionOld     \fileversion
%<class>\let \filedescriptionOld \filedescription
%    \end{macrocode}
%
%<*driver|class>
\GetIdInfo$Id: l3doc.dtx 824 2008-09-17 14:21:11Z will $
          {L3 Experimental documentation class}
%</driver|class>
%
%<*driver>
\ProvidesFile{\filename.\filenameext}
  [\filedate\space v\fileversion\space\filedescription]
\documentclass[full]{l3doc}
\begin{document}
\DocInput{\filename.\filenameext}
\end{document}
%</driver>
%
% This isn't included in the typeset documentation because it's a bit ugly:
%<*class>
\ProvidesExplClass
  {\filename}{\filedate}{\fileversion}{\filedescription}
\RequirePackage{expl3}
\let        \filename        \filenameOld
\let     \filenameext     \filenameextOld
\let        \filedate        \filedateOld
\let     \fileversion     \fileversionOld
\let \filedescription \filedescriptionOld
%</class>
% \fi
%
% \title{The \textsf{l3doc} class\thanks{This file
%         has version number \fileversion, last
%         revised \filedate.}}
% \author{\Team}
% \date{\filedate}
% \maketitle
% \tableofcontents
% \section{Introduction}
%
% This is an ad-hoc class for documenting the \textsf{expl3} bundle,
% a collection of modules or packages that make up \LaTeX3's programming 
% environment. Eventually it will replace the "ltxdoc" class for \LaTeX3, 
% but not before the good ideas in "hypdoc", "xdoc"("2"), "mfpdoc", and "gmdoc" are 
% incorporated.
%
% It is written as a `self-contained' docstrip file: executing 
% "latex l3doc.dtx" 
% will generate the "l3doc.cls" file and typeset this
% documentation; execute "tex l3doc.dtx" to only generate the ".cls" file.
%
% \section{Conceptual design}
% 
% Hypothetical improvements:
%
% \begin{verbatim}
%   \begin{expldesc}{
%     \function{seq_push}{Nn,Nx} ,
%     \expfunction{seq_foo}{N} ,
%     \conditional{seq_if_in}{Nn,cn} ,
%     \predicate{seq_if_empty}{N,c} ,
%   \end{expldesc}
% \end{verbatim}
% 
% would look like what this:
% 
%   \begin{function}{
%     \seq_push:Nn | \seq_push:Nx | \seq_foo:N / (EXP) |
%     \seq_if_in:NnTF | \seq_if_in:NnT | \seq_if_in:NnF |
%     \seq_if_empty_p:N / (EXP) | \seq_if_empty:NTF / (EXP) | 
%     \seq_if_empty:NT / (EXP) | \seq_if_empty:NF / (EXP)  }
%   \end{function}
%   
%   which is currently typed long-hand:
%   
% \begin{verbatim}
%   \begin{function}{
%     \seq_push:Nn | \seq_push:Nx | \seq_foo:N / (EXP) |
%     \seq_if_in:NnTF | \seq_if_in:NnT | \seq_if_in:NnF |
%     \seq_if_empty_p:N / (EXP) | \seq_if_empty:NTF / (EXP) | 
%     \seq_if_empty_p:NT / (EXP) | \seq_if_empty_p:NF / (EXP)  }
%   \end{function}
% \end{verbatim}
%
% \section{Documentation}
%
% \subsection{Describing functions in the documentation}
%
% Two heavily-used environments are defined to describe the syntax
% of \textsf{expl3} functions and variables.
% \DescribeEnv{function}
% \DescribeEnv{syntax}
% \begin{verbatim}
% \begin{function}{ list_of | functions }
%   \begin{syntax}
%     "\foo_bar:" \Arg{meta} <test1>
%   \end{syntax}
% <description>
% \end{function}
% \end{verbatim}
%
% \begin{function}{ list_of | functions }
%   \begin{syntax}
%     "\foo_bar:" \Arg{meta} <test1>
%   \end{syntax}
% <description>
% \end{function}
%
% Note that the list of functions use "|" as a separator. 
% 
% \bigskip
% \textbf{MAJOR PROPOSED CHANGE}\qquad
% I think we should probably discourage this sort of free-form markup in
% \LaTeX3 and change this to a plain ol' comma-separated list instead.
%
% Alternatively, we could provide programmatic means of looping through
% lists with arbitary separators and promote this kind of thing.
%
% \subsection{Describing functions in the implementation}
%
% \DescribeEnv{macro}
% The well-used environment from \LaTeXe\ for marking up the implementation
% of macros/functions remains the \env{macro} environment.
% One major change in \pkg{l3doc}: it now accepts comma-separated lists
% of functions, to avoid a very large number of consecutive "\end{macro}"
% statements.
% \begin{verbatim}
% % \begin{macro}{\foo:N,foo:c}
% %   \begin{macrocode}
% ... code for \foo:N and \foo:c ...
% %   \end{macrocode}
% % \end{macro}
% \end{verbatim}
%
% \DescribeEnv{arguments}
% Within a \env{macro} environment, you may use the \env{arguments} environment
% to describe the arguments taken by the function(s). It behaves exactly
% like a list environment.
% \begin{verbatim}
% % \begin{macro}{\foo:nn,foo:CC}
% % \begin{arguments}
% %   \item Name of froozle to be frazzled
% %   \item Name of muble to be jubled
% % \end{arguments}
% %   \begin{macrocode}
% ... code for \foo:nn and \foo:CC ...
% %   \end{macrocode}
% % \end{macro}
% \end{verbatim}
%
% \bigskip
% \textbf{OPTIONS FOR THE FUTURE}\qquad Any improvements to the markup
% for the \env{function} environment would be good to mirror in \env{macro}.
%
% Perhaps this would be a better syntax for describing arguments?
% \begin{verbatim}
% \begin{macro}{\foo:nn,foo:CC}
% \dArg{Name of froozle to be frazzled}
% \dArg{Name of muble to be jubled}
% ...
% \end{verbatim}
% I.e., get rid of the environment and do things like in, say, \pkg{fontspec}
%
% \subsection{Keeping things consistent}
%
% Whenever a function is either documented or defined with \env{function}
% and \env{macro} respectively, its name is stored in a sequence for later
% processing.
%
% At the end of the document (i.e., after the \textsc{dtx} file has finished 
% processing), the list of names is analysed to check whether all defined
% functions have been documented and vice versa. The results are printed
% in the console output.
%
% \begin{function}{\RetrieveFunctions|\RetrieveMacros}
% \begin{syntax}
%   \cs{RetrieveFunctions} \marg{Code to execute for each item}
% \end{syntax}
% If you would like to use this data for your own purposes, two macros
% are provided to retrieve the elements of the two lists. As an example,
% let's say you wanted to typeset each function in a big list; you could
% write something like this:
% \begin{verbatim}
%   \RetrieveFunctions { `\texttt{#1}' }
% \end{verbatim}
% Notice that you do not need to escape the macros in any way; they have
% already been `detokenized'.
% \end{function}
%
% If you need to do more serious work with these lists of names, take a
% look at the implementation for the data structures and methods used to
% store and access them directly.
%
% \section{Implementation}
%
%    \begin{macrocode}
%<*class>
%    \end{macrocode}
%
% The Guilty Parties.
%    \begin{macrocode}
\def_new:Npn\Team{%
  The~\LaTeX3~Project\thanks{%
  Frank~Mittelbach,~Denys~Duchier,~Chris~Rowley,~
  Rainer~Sch\"opf,~Johannes~Braams,~Michael~Downes,~
  David~Carlisle,~Alan~Jeffrey,~Morten~H\o{}gholm,~Thomas~Lotze,~
  Javier~Bezos,~Will~Robertson}}
%    \end{macrocode}
%
% \section{Options}                       
%
%    \begin{macrocode}
\DeclareOption{a5paper}{\@latexerr{Option not supported}{}}
\DeclareOption{full}{\AtBeginDocument{\input{l3full.cfg}}}
\DeclareOption*{\PassOptionsToClass{\CurrentOption}{ltxdoc}}
\ProcessOptions
%    \end{macrocode}
%
% \section{Class and package loading}
%    \begin{macrocode}
\LoadClass{ltxdoc}
\RequirePackage{array,color,fixltx2e,enumitem,trace,underscore}
\RequirePackage[T1]{fontenc}
\RequirePackage{lmodern}
\RequirePackage{hypdoc}
%    \end{macrocode}
%
% \section{Configuration}
% Input a local configuration file, if it exists.
%    \begin{macrocode}
\InputIfFileExists{l3doc.cfg}{
  \typeout{*************************************^^J
           *~Local~config~file~l3doc.cfg~used   ^^J
           *************************************}
}{}
%    \end{macrocode}
%
%    \begin{macrocode}
\def:Npn \MakePrivateLetters {
  \char_make_letter:N \@
  \char_make_letter:N \_
  \char_make_letter:N \:
}
%    \end{macrocode}
%
%    \begin{macrocode}
\CodelineNumbered
\EnableCrossrefs
\setcounter{StandardModuleDepth}{1}
%    \end{macrocode}
%
% \section{Design}
%
% Increase the text width slightly so that width the standard fonts
% 72 columns of code may appear in a |macrocode| environment.
% Increase the marginpar width slightly, for long command names.
% And increase the left margin by a similar amount.
%    \begin{macrocode}
\setlength   \textwidth      { 385pt }
\addtolength \marginparwidth {  30pt }
\addtolength \oddsidemargin  {  20pt }
\addtolength \evensidemargin {  20pt }
%    \end{macrocode}
% (These were introduced when "article" was the documentclass, but
%  I've left them here for now to remind me to do something about them
%  later; we still have the problem of \emph{very long} command names.)
%
% Customise lists:
%    \begin{macrocode}
\let\@@oldlist\list
\def\list#1#2{\@@oldlist{#1}{#2\listparindent\z@}}
\setlength \parindent  { 0pt }
\setlength \itemindent { 0pt }
\setlength \parskip    { \medskipamount }
%    \end{macrocode}
%
% \section{Text markup}
%
%    Make "|" and |"| be `short verb' characters, but not in
%    the document preamble, where an active character may interfere
%    with packages that are loaded.
%    \begin{macrocode}
\AtBeginDocument {
  \MakeShortVerb \"
  \MakeShortVerb \|
}
%    \end{macrocode}
%
%    \begin{macrocode}
\newcommand\tn[1]{
  \texttt{\bslash #1}
  \index{TeX~and~LaTeX2e~commands\actualchar
          \string\TeX{}~and~\string\LaTeXe{}~commands:\levelchar
          #1\actualchar{\string\ttfamily\string\bslash{}#1}}}
%    \end{macrocode}
%
%    \begin{macrocode}
\providecommand*\eTeX{
  \if b\expandafter\@car\f@series\@nil\boldmath\fi
  $\m@th\varepsilon$-\TeX
}
%    \end{macrocode}
%
% \begin{macro}{\m,\file,\env,\pkg,\cls}
% This list may change\dots this is just my preference for markup.
%    \begin{macrocode}
\let:NN \m \meta
\let:NN \file \nolinkurl
\let:NN \env \texttt
\let:NN \pkg \textsf
\let:NN \cls \textsf
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\newcommand\Arg[1]{\texttt{\{}\,\meta{#1}\,\texttt{\}}}
%    \end{macrocode}
%
% \begin{environment}{texnote}
%    \begin{macrocode}
\newenvironment{texnote}{
  \endgraf
  \vspace{3mm}
  \small\textbf{\TeX~hackers~note:}
}{
  \vspace{3mm}
}
%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{arguments}
% This environment is designed to be used within a \env{macro} environment
% to describe the arguments of the macro/function.
%    \begin{macrocode}
\newenvironment{arguments}{
  \enumerate[
    nolistsep,
    label=\texttt{\#\arabic*}~:,
    labelsep=*,
  ]
}{
  \endenumerate
}
%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{function}
% \begin{environment}{variable}
% Environment for documenting function(s).
% Stick the function names in a box. Use a "|" as delimiter and 
% allow |<...>| to be used as markup for |\meta{...}|
%    \begin{macrocode}
\begingroup
\char_make_active:N \<
\gdef_new:Npn \function {
  \char_make_active:N \<
  \let:NN < \doc_open_meta:n
  \begingroup
  \char_make_other:N \|
  \char_make_other:N \\
  \char_make_letter:N \:
  \char_make_space:N \~
  \char_make_ignore:N \ 
  \char_make_ignore:N \^^M
  \char_make_ignore:N \^^I
  \function_aux:n
}
\endgroup
%    \end{macrocode}
% And the "variable" function is exactly the same:
%    \begin{macrocode}
\let:NN \variable \function
%    \end{macrocode}
% \end{environment}
% \end{environment}
% 
%    \begin{macrocode}
\def:Npn \function_aux:n #1 {
  \def\nextnewline{\gdef\nextnewline{\\}}
  \global\let\macroname\@empty
  \bigskip\endgraf\noindent\ttfamily
  \tabular[b]{ | l @{} c | }
    \hline
    \doc_showmacro:w #1 | \@nil \\
    \hline
  \endtabular
  \endgroup
}
%    \end{macrocode}
%
% \begin{macro}{\doc_showmacro}
% Will: I wanted to colourise the macros shown in |{function}| blocks;
% this is the ugly code that does that.
%
% We also have some code here to print out every documented macro at the end
% of the document.
%    \begin{macrocode}
\def:Npn \doc_showmacro:w #1| {
  \tlist_if_blank:nTF {#1} {
    \use_none:n
  }{
    \doc_showmacro_aux:w #1/\@nil
    \@ifnextchar \@nil {\use_none:n}{\doc_showmacro:w}
  }
}
%    \end{macrocode}
%
% This macro is passed one of:
% \begin{quote}
%   "\abc:xyz / (EXP) /\@nil" \\
%   "\abc:xyz /\@nil" \\
% \end{quote}
%    \begin{macrocode}
\def_new:Npn \doc_showmacro_aux:w #1/#2 \@nil {
  \seq_gput_right:Nx \g_allfunc_seq {\detokenize{#1}}
  \def\yyy{#1}
  \exp_after:NN\vindex\meaning\yyy\@nil
  \gdef:Npn \macro@meta {#2}
  \doc_showmacro_aux_ii:w #1::\@nil
}
%    \end{macrocode}
% \end{macro}
% 
% This macro is passed one of:
% \begin{quote}
%   "\showexplmacro" \meta{name} "::\@nil" \\
%   "\showexplmacro \foo   ::\@nil" \\
%   "\showexplmacro \foo:  ::\@nil" \\
%   "\showexplmacro \foo:Z ::\@nil" \\
% \end{quote}
% Notice that only for the "\foo:" case is "#3"$to$":" .
%    \begin{macrocode}
\def:Npn \doc_showmacro_aux_ii:w #1:#2:#3 \@nil {
  \gdef\newmacroname{#1}
  \gdef\macrosuffix{#2}
  \gdef\colonOrEmpty{#3}
  \nextnewline
  \ifx\newmacroname\macroname
    \color[gray]{0.5}
  \else
    \glet:NN \macroname \newmacroname
    \color{black}
  \fi
  \tlp_to_str:N \macroname
  \ifx\macrosuffix\@empty
    \colonOrEmpty
  \else
    \color{black}:\macrosuffix
  \fi
  \tlp_if_in:NnT \macro@meta {(TF)}  { 
    \kern0.5pt\color[gray]{0.4}\underline{\color{black}{TF}} 
  }
  &
  \tlp_if_in:NnT \macro@meta {(EXP)} { \hspace{\tabcolsep}$\star$ }
}
%    \end{macrocode}
%
% Perhaps these belong in \file{l3token}?
%    \begin{macrocode}
\tlist_map_inline:nn {0123456789} { \glet:cN {char_other_#1} #1 }
%    \end{macrocode}
%
% \begin{macro}{\doc_open_meta:n,\doc_close_meta:n}
% This code turns all numbers within "<...>" markup to be set as subscripts.
% You can use escaped numbers to get the real thing (e.g., "\1" = `1').
%    \begin{macrocode}
\group_begin:
  \tlist_map_inline:nn {0123456789} { \char_make_active:N #1 }
  \gdef_new:Npn \doc_open_meta:n {
    \group_begin:
      \tlist_map_function:nN {0123456789} \doc_assign_num:n
      \doc_close_meta:w
  }
\group_end:
\def_new:Npn \doc_close_meta:w #1> { \meta{#1} \group_end: }
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\doc_assign_num:n}
% This function takes a numeral (`0'), defines its escaped self to be equal
% to itself ("\0" $\to$ `0'), makes it active, and turns itself into a subscript
% instead (`0' $\to$ `${}_0$').
%    \begin{macrocode}
\def_new:Npn \doc_assign_num:n #1 {
  \let:cc { \string #1 } { char_other_\string #1 } 
  \char_make_active:N #1 
  \def:Npn #1 { \unskip \, $ {} \sb { \use:c { char_other_\string #1 } } $ }
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{environment}{syntax}
% Syntax block placed next to the list of functions to illustrate their use.
%    \begin{macrocode}
\newenvironment{syntax}{%
  \minipage[b]{.7\textwidth}%
    \def\meta@font@select{\rmfamily\itshape} % (Will: I HATE italic cmtt!)
    \small
    \ttfamily
    \raggedright
    \obeyspaces
    \obeylines
}{%
  \endminipage
  \hfil\break
  \global\@ignoretrue
}
%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{doc_macro}
% Let's start to mess around with "doc"'s "macro" environment. See \file{doc.dtx}
% for a full explanation of the original environment. It's
% rather \emph{enthusiastically} commented.
%    \begin{macrocode}
\def:Npn \doc_macro {
  \group_begin:
    \char_make_other:N \\
    \MakePrivateLetters
    \doc_macro_aux:n
}
%    \end{macrocode}
% We've removed the switch for dealing with |{environment}|\,s, too.
%    \begin{macrocode}
\def_long:Npn \doc_macro_aux:n #1 {
  \group_end:
%    \end{macrocode}
% Before we start with the original stuff, save the macro name for spitting
% out later. ("\detokenize" just to be sure)
%    \begin{macrocode}
  \def:Npx \saved@macroname { \trim_spaces:n { \detokenize {#1} } }
  \seq_gput_right:Nx \g_allmacr_seq {\saved@macroname}
  \topsep\MacroTopsep 
  \trivlist
  \def:Npn \makelabel ##1 { \llap{##1} }
  \if@inlabel
    \let\@tempa\@empty 
    \count@\macro@cnt
    \loop \ifnum\count@>\z@
      \edef\@tempa{\@tempa\hbox{\strut}}
      \advance\count@\m@ne 
    \repeat
    \edef\makelabel ##1 {
      \llap{\vtop to\baselineskip {\@tempa\hbox{##1}\vss}}
    }
    \advance \macro@cnt \@ne
  \else  
    \macro@cnt \@ne  
  \fi
  \edef \@tempa {
    \noexpand\item[\noexpand\PrintMacroName{\detokenize{#1}}]
  } \@tempa
  \global\advance \c@CodelineNo \@ne
  \SpecialMainIndex{#1}\nobreak
  \DoNotIndex{#1}
  \global\advance \c@CodelineNo \m@ne
  \ignorespaces
}
%    \end{macrocode}
% \end{environment}
%
% \begin{macro}{\trim_spaces:N}
% This is from Michael Downes, published in Around the bend \#15; 
% I'm not aware of it existing in any other packages. 
% I've stripped out the comments; see the extensive discussion in 
% the article for more information.
%
% TODO: move "\KV_remove_surrounding_spaces" into \file{l3tlp} and \file{l3toks}
% as a general function to operate on token lists and token registers.
%    \begin{macrocode}
\catcode`\Q=3
\def_long:Npn \trim_spaces:N #1 {
  \begingroup
    \aftergroup\toks \aftergroup0 \aftergroup{
      \expandafter\trim_spaces_N_aux
      \expandafter\noexpand#1Q~Q
    }
    \edef #1 {\the\toks0}
  }
\def_long:Npn\trim_spaces_N_aux #1~Q { \trim_spaces_N_aux_ii #1 Q }
\def_long:Npn\trim_spaces_N_aux_ii #1 Q #2 {
  \afterassignment\endgroup
  \vfuzz\the\vfuzz #1
}
\catcode`\Q=11
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\trim_spaces:n}
% Morten's variation on the above for `tlist' input. (Again, this needs
% to go into a proper module somewhere.)
%    \begin{macrocode}
\catcode`\Q=3
\def_long:Npn \trim_spaces:n #1 { 
  \romannumeral-`\q\trim_spaces_n_aux\noexpand#1Q~Q 
}
\def_long:Npn \trim_spaces_n_aux #1~Q  { \trim_spaces_n_aux_ii #1 Q }
\def_long:Npn \trim_spaces_n_aux_ii #1 Q #2 {#1}
\catcode`\Q=11
%    \end{macrocode}
% \end{macro}
%
% \begin{environment}{macro}
% We want to extend the old definition to allow comma-separated lists of
% macros, rather than one at a time.
%    \begin{macrocode}
\renewenvironment{macro}{
  \let:NN \doc_begin_macros \c_empty_tlp
  \let:NN \doc_end_macros   \c_empty_tlp
  \group_begin:
    \MakePrivateLetters
    \char_make_letter:N \\
    \doc_macro_aux
}{
  \doc_end_macros
}
%    \end{macrocode}
% After changing the catcodes, parse the arguments:
%    \begin{macrocode}
\def_new:Npn \doc_macro_aux #1 {
  \group_end:
  \clist_map_variable:nNn {#1} \l_tmpa_tlp {
    \trim_spaces:N \l_tmpa_tlp
    \expandafter \doc_macros_addto \expandafter {\l_tmpa_tlp}
  }
  \doc_begin_macros
}
%    \end{macrocode}
% Helper to make expansion bearable.
%    \begin{macrocode}
\def_new:Npn \doc_macros_addto #1 {
  \tlp_put_right:Nn \doc_begin_macros { \begin{doc_macro}{#1} }
  \tlp_put_right:Nn \doc_end_macros   { \end{doc_macro}       }
}
%    \end{macrocode}
% \end{environment}
%
%
% \subsection{Some additional markup}
%
% Here are some definitions for additional markup that will help to 
% structure your documentation.
%
% \begin{environment}{danger}
% \begin{environment}{ddanger}
% \begin{syntax}
% |\begin{[d]danger}|\\
% dangerous code\\
% |\end{[d]danger}|
% \end{syntax}
%
% \begin{danger}
%   Provides a danger bend, as known from the \TeX{}book.
% \end{danger}
% The actual character from the font |manfnt|:
%    \begin{macrocode}
\font\manual=manfnt
\def\dbend{{\manual\char127}}
%    \end{macrocode}
%
% Defines the single danger bend. Use it whenever there is a feature in your 
% package that might be tricky to use.
% FIXME: Has to be fixed when in combination with a macro-definition…
%    \begin{macrocode}
\def_new:Npn\danger{
  \begin{trivlist}\item[]\noindent
  \begingroup\hangindent=2pc\hangafter=-2
  \def:Npn\par{\endgraf\endgroup}
  \hbox to0pt{\hskip-\hangindent\dbend\hfill}\ignorespaces
}
\def_new:Npn\enddanger{\par\end{trivlist}}
%    \end{macrocode}
%
% \begin{ddanger}
%   Use the double danger bend if there is something which could cause serious 
%   problems when used in a wrong way. Better the normal user does not know 
%   about such things.
% \end{ddanger}
%    \begin{macrocode}
\def_new:Npn\ddanger{
  \begin{trivlist}\item[]\noindent
  \begingroup\hangindent=3.5pc\hangafter=-2
  \def:Npn\par{\endgraf\endgroup}
  \hbox to0pt{\hskip-\hangindent\dbend\kern2pt\dbend\hfill}\ignorespaces
}
\def_new:Npn\endddanger{\par\end{trivlist}}
%    \end{macrocode}
% \end{environment}
% \end{environment}
%
%
% \section{At end document}
%
%    \begin{macrocode}
\seq_new:N \g_allfunc_seq
\seq_new:N \g_allmacr_seq
\AtEndDocument{
  \typeout{========================================^^J}
  \tlp_clear:N \l_tmpa_tlp
  \seq_map_inline:Nn \g_allfunc_seq { 
    \seq_if_in:NnT \g_allmacr_seq {#1} { \tlp_put_right:Nn \l_tmpa_tlp {#1^^J} }
  }
  \tlp_if_empty:NF \l_tmpa_tlp {
    \typeout{--------------------------------------}
    \typeout{Functions~both~documented~and~defined:}
    \typeout{(In~order~of~being~documented)}
    \typeout{--------------------------------------}
    \typeout{\l_tmpa_tlp} 
  }
  \tlp_clear:N \l_tmpa_tlp
  \seq_map_inline:Nn \g_allfunc_seq { 
    \seq_if_in:NnF \g_allmacr_seq {#1} { \tlp_put_right:Nn \l_tmpa_tlp {#1^^J} }
  }
  \tlp_if_empty:NF \l_tmpa_tlp { 
    \typeout{-------------------------------------}
    \typeout{Functions~documented~but~not~defined:}
    \typeout{-------------------------------------}
    \typeout{\l_tmpa_tlp} 
  }
  \tlp_clear:N \l_tmpa_tlp
  \seq_map_inline:Nn \g_allmacr_seq { 
    \seq_if_in:NnF \g_allfunc_seq {#1} { \tlp_put_right:Nn \l_tmpa_tlp {#1^^J} }
  }
  \tlp_if_empty:NF \l_tmpa_tlp { 
    \typeout{-------------------------------------}
    \typeout{Functions~defined~but~not~documented:}
    \typeout{-------------------------------------}
    \typeout{\l_tmpa_tlp} 
  }
  \typeout{========================================}
}
%    \end{macrocode}
%
% \begin{macro}{\RetrieveMacros,\RetrieveFunctions}
%    \begin{macrocode}
\def_new:Npn \RetrieveMacros #1 {
  \seq_map_inline:Nn \g_allmacr_seq { #1 }
}
\def_new:Npn \RetrieveFunctions #1 {
  \seq_map_inline:Nn \g_allfunc_seq { #1 }
}
%    \end{macrocode}
% \end{macro}
%
% \section{Everything else}
%
% Will: To be honest I'm not entirely sure if the following code is working or
% usable or relevant any more. It may well be, I just don't know exactly
% what it's for\dots
%
%    \begin{macrocode}
\def\vindex#1>#2\@nil{
  \edef\temp{\foo#2<>\@nil}
  \ifx\temp\space\else
  \expandafter\SpecialMainIndexB\expandafter{\temp}\fi}
%    \end{macrocode}
% remove <foo> from index (quick hack, could be better)
%    \begin{macrocode}
\def\foo#1<#2>#3\@nil{
 #1\ifx\foo#3\foo
   \else#2\expandafter\foo\fi#3\@nil}
%\def\foo#1<#2>#3\@nil{#1<#2>#3}
\def\foo#1<#2>#3\@nil{#1}
%    \end{macrocode}
%
%
% \begin{macro}{\SpecialMainIndexB}
% Heiko's replacement to play nicely with |hypdoc|:
%    \begin{macrocode}
\def\SpecialMainIndexB#1{
  \index{
    \@gobble#1
    \actualchar
    \string\verb\quotechar*\verbatimchar#1\verbatimchar
    \encapchar
    hdpgindex{\thepage}{usage}
  }%
}
\def\hdpgindex#1#2#3{
  \csname\ifx\\#2\\relax\else#2\fi\endcsname{
    \hyperlink{page.#1}{#3}
  }
}
%    \end{macrocode}
% \end{macro}
%
% This command will be used to input the patch file
% if that file exists.
%    \begin{macrocode}
\newcommand{\includeltpatch}{
  \def\currentfile{l3patch.ltx}
  \part{l3patch}
  {\let\ttfamily\relax
    \xdef\filekey{\filekey, \thepart={\ttfamily\currentfile}}}
  Things~we~did~wrong\ldots
  \IndexInput{l3patch.ltx}}
%    \end{macrocode}
% Get the date from ltvers.dtx
%    \begin{macrocode}
\def\patchdate{0}
\begingroup
   %%\def\ProvidesFile#1\fmtversion#2{\date{#2}\endinput}
   \def\ProvidesFile#1[#2#3]{\date{#2}\endinput}
   \input{l3vers.dtx}
   \xdef\@date{\@date}
   \global\let\X@date=\@date
% Add the patch version if available.
   \long\def\Xdef#1#2#3\def#4#5{
    \xdef\X@date{#2}
    \xdef\patchdate{#5}
    \endinput}
   \InputIfFileExists{l3patch.ltx}
    {\let\def\Xdef}{\global\let\includeltpatch\relax}
\endgroup
\ifx\@date\X@date
   \def\Xpatch{0}
   \ifx\patchdate\Xpatch\else
     \edef\@date{\@date\space Patch level \patchdate}
   \fi
\else
   \@warning{l3patch.ltx does not match l3vers.dtx!}
   \let\includeltpatch\relax
\fi
%    \end{macrocode}
%
%    \begin{macrocode}
\ExplSyntaxOff
%</class>
%    \end{macrocode}
% \section{Configuration files}
% \subsection{\texttt{l3doc.cfg}}
%    \begin{macrocode}
%<*doccfg>
%    \end{macrocode}
%    \begin{macrocode}
\DisableCrossrefs
\AtEndOfClass{\OnlyDescription}
%    \end{macrocode}
%    \begin{macrocode}
%</doccfg>
%    \end{macrocode}
% \subsection{\texttt{l3full.cfg}}
% This is used when the class option "full" is specified.
%    \begin{macrocode}
%<*fullcfg>
%    \end{macrocode}
% Set up the Index and Change History to use "\part"
%    \begin{macrocode}
\IndexPrologue{%
  \part*{Index}%
  \markboth{Index}{Index}%
  \addcontentsline{toc}{part}{Index}%
  The italic numbers denote the pages where the
  corresponding entry is described,
  numbers underlined point to the definition,
  all others indicate the places where it is used.%
}
%    \end{macrocode}
% 
%    \begin{macrocode}
\GlossaryPrologue{%
  \part*{Change History}%
%    \end{macrocode}
% Allow control names to be hyphenated here...
%    \begin{macrocode}
  {\GlossaryParms\ttfamily\hyphenchar\font=`\-}%
  \markboth{Change History}{Change History}%
  \addcontentsline{toc}{part}{Change History}%
}
%    \end{macrocode}
% 
%    \begin{macrocode}
\RecordChanges
\CodelineIndex
\EnableCrossrefs
\AlsoImplementation
\setcounter{IndexColumns}{2}
%    \end{macrocode}
% 
%    \begin{macrocode}
%</fullcfg>
%    \end{macrocode}
%
% \section{Testing}
%
% \begin{function}{\example_foo:N|\example_foo:c}
% \begin{syntax}
%   "\example_foo:N" <arg1>
% \end{syntax}
% <0123456789> <\0\1\2\3\4\5\6\7\8\9>  
% \end{function}
%
% \begin{function}{ \foo | \foo: | \foo:z | }
% \begin{syntax}
%   "\example_foo:N" <arg1>
% \end{syntax}
% <0123456789> <\0\1\2\3\4\5\6\7\8\9>  
% \end{function}
%
% \begin{function}{\foo:N / (TF) | \foo:c / (TF) (EXP)}
% Test.
% \end{function}
%
% \begin{function}{ \bar / (EXP) | \bar: / (EXP)  | \bar:z / (EXP)  | }
% \begin{syntax}
%   "\example_foo:N" <arg1>
% \end{syntax}
% <0123456789> <\0\1\2\3\4\5\6\7\8\9>  
% \end{function}
%
% \begin{macro}{ \foo , \foo: , \foo:z }
% Testing.
% \end{macro}
%
% \bigskip\bigskip
%
% \begin{macro}{\example_foo:N}
% \begin{arguments}
% \item name
% \item parameters
% \end{arguments}
% Another test.
% \end{macro}
%
% \subsection{Macros}
% \raggedright
% \RetrieveMacros { `\texttt{#1}' \quad }
%
% \subsection{Functions}
% \ExplSyntaxOn
% \RetrieveFunctions { `\texttt{#1}' \quad }
% \ExplSyntaxOff
%
% \Finale
%
% \endinput
