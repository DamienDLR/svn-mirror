% \iffalse
%% File: l3doc.dtx Copyright (C) 1990-2008 LaTeX3 project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the ``expl3 bundle'' (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/cgi-bin/cvsweb.cgi/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%<*driver>
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
\input docstrip.tex
\askforoverwritefalse
\preamble


EXPERIMENTAL CODE

Do not distribute this file without also distributing the
source files specified above.

Do not distribute a modified version of this file.


\endpreamble
% stop docstrip adding \endinput
\postamble
\endpostamble
\keepsilent
\generate{\file{l3doc.cls}{\from{l3doc.dtx}{class}}}
\generate{\file{l3doc.cfg}{\from{l3doc.dtx}{doccfg}}}
\generate{\file{l3full.cfg}{\from{l3doc.dtx}{fullcfg}}}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</driver>
%
%<*driver|class>
\RequirePackage{l3names}
%</driver|class>
%
% Need to protect the file metadata for any modules that load l3doc.
% This is restored after "\ProvideExplClass" below.
%    \begin{macrocode}
%<class>\let        \filenameOld        \filename
%<class>\let     \filenameextOld     \filenameext
%<class>\let        \filedateOld        \filedate
%<class>\let     \fileversionOld     \fileversion
%<class>\let \filedescriptionOld \filedescription
%    \end{macrocode}
%
%<*driver|class>
\GetIdInfo$Id: l3doc.dtx 824 2008-09-17 14:21:11Z will $
          {L3 Experimental documentation class}
%</driver|class>
%
%<*driver>
\ProvidesFile{\filename.\filenameext}
  [\filedate\space v\fileversion\space\filedescription]
\documentclass[full]{l3doc}
\begin{document}
\DocInput{\filename.\filenameext}
\end{document}
%</driver>
%
% This isn't included in the typeset documentation because it's a bit ugly:
%<*class>
\ProvidesExplClass
  {\filename}{\filedate}{\fileversion}{\filedescription}
\RequirePackage{expl3}
\let        \filename        \filenameOld
\let     \filenameext     \filenameextOld
\let        \filedate        \filedateOld
\let     \fileversion     \fileversionOld
\let \filedescription \filedescriptionOld
%</class>
% \fi
%
% \title{The \textsf{l3doc} class\thanks{This file
%         has version number \fileversion, last
%         revised \filedate.}}
% \author{\Team}
% \date{\filedate}
% \maketitle
% \tableofcontents
% \section{Introduction}
%
% This is an ad-hoc class for documenting the \textsf{expl3} bundle,
% a collection of modules or packages that make up \LaTeX3's programming 
% environment. Eventually it will replace the "ltxdoc" class for \LaTeX3, 
% but not before the good ideas in "hypdoc", "xdoc"("2"), "mfpdoc", and "gmdoc" are 
% incorporated.
%
% It is written as a `self-contained' docstrip file: executing 
% "latex l3doc.dtx" 
% will generate the "l3doc.cls" file and typeset this
% documentation; execute "tex l3doc.dtx" to only generate the ".cls" file.
%
% \section{Conceptual design}
% 
% Hypothetical improvements:
%
% \begin{verbatim}
%   \begin{expldesc}{
%     \function{seq_push}{Nn,Nx} ,
%     \expfunction{seq_foo}{N} ,
%     \conditional{seq_if_in}{Nn,cn} ,
%     \predicate{seq_if_empty}{N,c} ,
%   \end{expldesc}
% \end{verbatim}
% 
% would look like what this:
% 
% 
%   \begin{function}{
%     \seq_push:Nn | \seq_push:Nx | \seq_foo:N / (EXP) |
%     \seq_if_in:NnTF | \seq_if_in:NnT | \seq_if_in:NnF |
%     \seq_if_empty_p:N / (EXP) | \seq_if_empty:NTF / (EXP) | 
%     \seq_if_empty:NT / (EXP) | \seq_if_empty:NF / (EXP)  }
%   \end{function}
%   
%   which is currently typed long-hand:
%   
% \begin{verbatim}
%   \begin{function}{
%     \seq_push:Nn | \seq_push:Nx | \seq_foo:N / (EXP) |
%     \seq_if_in:NnTF | \seq_if_in:NnT | \seq_if_in:NnF |
%     \seq_if_empty_p:N / (EXP) | \seq_if_empty:NTF / (EXP) | 
%     \seq_if_empty_p:NT / (EXP) | \seq_if_empty_p:NF / (EXP)  }
%   \end{function}
% \end{verbatim}
%
% \section{Documentation}
%
% Two heavily-used environments are defined to describe the syntax
% of \textsf{expl3} functions and variables.
% \DescribeEnv{function}
% \DescribeEnv{syntax}
% \begin{verbatim}
% \begin{function}{ list_of | functions }
%   \begin{syntax}
%     "\foo_bar:" \Arg{meta} <test1>
%   \end{syntax}
% <description>
% \end{function}
% \end{verbatim}
%
% \begin{function}{ list_of | functions }
%   \begin{syntax}
%     "\foo_bar:" \Arg{meta} <test1>
%   \end{syntax}
% <description>
% \end{function}
%
% Note that the list of functions use "|" as a separator. 
% 
% \textbf{MAJOR PROPOSED CHANGE:}
% I think we should probably discourage this sort of free-form markup in
% \LaTeX3 and change this to a plain ol' comma-separated list instead.
%
% Alternatively, we could provide programmatic means of looping through
% lists with arbitary separators and promote this kind of thing.
%
% \section{Implementation}
%
% For now, this package is written in \LaTeXe\ syntax, but that will no doubt
% change\dots.
%    \begin{macrocode}
%<*class>
%    \end{macrocode}
%
% The Guilty Parties.
%    \begin{macrocode}
\def_new:Npn\Team{%
  The~\LaTeX3~Project\thanks{%
  Frank~Mittelbach,~Denys~Duchier,~Chris~Rowley,~
  Rainer~Sch\"opf,~Johannes~Braams,~Michael~Downes,~
  David~Carlisle,~Alan~Jeffrey,~Morten~H\o{}gholm,~Thomas~Lotze,~
  Javier~Bezos,~Will~Robertson}}
\ExplSyntaxOff
%    \end{macrocode}
%
% \section{Options}                       
%
%    \begin{macrocode}
\DeclareOption{a5paper}{\@latexerr{Option not supported}{}}
\DeclareOption{full}{\AtBeginDocument{\input{l3full.cfg}}}
\DeclareOption*{\PassOptionsToClass{\CurrentOption}{article}}
\ProcessOptions
%    \end{macrocode}
%
% \section{Class and package loading}
%    \begin{macrocode}
\LoadClass{ltxdoc}
\RequirePackage{color,fixltx2e,trace,url}
\RequirePackage[T1]{fontenc}
\RequirePackage{lmodern}
\RequirePackage{hypdoc}
%    \end{macrocode}
% hypdoc kills |\function|'s sanitising of "_", for some reason, 
% so we load "underscore" (for now) to work around this:
%    \begin{macrocode}
\RequirePackage{underscore}
%    \end{macrocode}
%
% \section{Configuration}
% Input a local configuration file, if it exists.
%    \begin{macrocode}
\InputIfFileExists{l3doc.cfg}
           {\typeout{*************************************^^J%
                     * Local config file l3doc.cfg used^^J%
                     *************************************}}
           {}
%    \end{macrocode}
%
%    \begin{macrocode}
\ExplSyntaxOn
\def:Npn\MakePrivateLetters{%
  \makeatletter
  \catcode`\_=11\relax
  \catcode`\:=11\relax}
\ExplSyntaxOff
%    \end{macrocode}
%
%    \begin{macrocode}
\CodelineNumbered
\EnableCrossrefs
\setcounter{StandardModuleDepth}{1}
%    \end{macrocode}
%
% \section{Design}
%
% Increase the text width slightly so that width the standard fonts
% 72 columns of code may appear in a |macrocode| environment.
% Increase the marginpar width slightly, for long command names.
% And increase the left margin by a similar amount.
%    \begin{macrocode}
\setlength   \textwidth      { 385pt }
\addtolength \marginparwidth {  30pt }
\addtolength \oddsidemargin  {  20pt }
\addtolength \evensidemargin {  20pt }
%    \end{macrocode}
% (These were introduced when "article" was the documentclass, but
%  I've left them here for now to remind me to do something about them
%  later; we still have the problem of \emph{very long} command names.)
%
% Customise lists:
%    \begin{macrocode}
\let\@@oldlist\list
\def\list#1#2{\@@oldlist{#1}{#2\listparindent\z@}}
\setlength \parindent  { 0pt }
\setlength \itemindent { 0pt }
\setlength \parskip    { \medskipamount }
%    \end{macrocode}
%
% \section{Text markup}
%
%    Make "|" and |"| be `short verb' characters, but not in
%    the document preamble, where an active character may interfere
%    with packages that are loaded.
%    \begin{macrocode}
\AtBeginDocument{%
  \MakeShortVerb\"%
  \MakeShortVerb\|%
}
%    \end{macrocode}
%
%    \begin{macrocode}
\newcommand\tn[1]{%
  \texttt{\bslash #1}%
  \index{TeX and LaTeX2e commands\actualchar
          \string\TeX{} and \string\LaTeXe{} commands:\levelchar
          #1\actualchar{\string\ttfamily\string\bslash{}#1}}}
%    \end{macrocode}
%
%    \begin{macrocode}
\providecommand*\eTeX{%
  \if b\expandafter\@car\f@series\@nil\boldmath\fi
  $\m@th\varepsilon$-\TeX}
%    \end{macrocode}
%
% \begin{macro}{\m}
% \begin{macro}{\file}
%    \begin{macrocode}
\let\m\meta
\let\file\nolinkurl
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%    \begin{macrocode}
\newcommand\Arg[1]{\texttt{\{}\,\meta{#1}\,\texttt{\}}}
%    \end{macrocode}
%
% \begin{environment}{texnote}
%    \begin{macrocode}
\newenvironment{texnote}{%
  \endgraf
  \vspace{3mm}%
  \small\textbf{\TeX~hackers~note:}%
}{%
  \vspace{3mm}%
}
%    \end{macrocode}
% \end{environment}
%
% Stick the function names in a box. Use an active "|" as delimiter and 
% allow |<...>| to be used as markup for |\meta{...}|
%    \begin{macrocode}
\begingroup
\catcode`\|=\active
\catcode`\<=\active
%    \end{macrocode}
%
% \begin{environment}{function}
% \begin{environment}{variable}
% Environment for documenting function(s).
%    \begin{macrocode}
\ExplSyntaxOn
\gdef\function{%
  \catcode`\<=\active
  \let < \doc_open_meta:n
  \bigskip
  \begingroup
  \@makeother\\
  \catcode`\~=10
  \catcode`\ =9
  \catcode`\^^M=9
  \catcode`\^^I=9
  \catcode`\|=\active
  \@function}
%    \end{macrocode}
% And the "variable" function is exactly the same:
%    \begin{macrocode}
\global\let\variable\function
\ExplSyntaxOff
%    \end{macrocode}
% \end{environment}
% \end{environment}
% 
%    \begin{macrocode}
\gdef\@function#1{%
  \ifx\@function#1\@function\else
    \funcindex#1| |%
  \fi
  \def\nextnewline{\gdef\nextnewline{\\}}
  \global\let\macroname\@empty
%    \end{macrocode}
% 
%    \begin{macrocode}
  \endgraf
  \ttfamily
  \noindent\hspace*{-2\parindent}%
  \tabular[b]{ @{\vline\hskip\tabcolsep}
               l @{} c
               @{\hskip\tabcolsep\vline} }%
    \hline
    \showexplmacros#1|\@nil
    \crcr
    \hline
    \noalign{\kern-2pt}%
  \endtabular
  \endgroup
}
%    \end{macrocode}
%
% index fuction lists (could be better...)
%    \begin{macrocode}
\ExplSyntaxOn
\gdef:Npn \funcindex #1| {
  \tlist_if_blank:nTF {#1} {
%    \end{macrocode}
% at the end, look for extra "|" and remove it:
%    \begin{macrocode}
    \@ifnextchar|{\use_none:n}{}
  }{
    \def\yyy{#1}
    \exp_after:NN\vindex\meaning\yyy\@nil  
    \funcindex
  }
}
\ExplSyntaxOff
%    \end{macrocode}
%
% \begin{macro}{\showexplmacros}
% Will: I wanted to colourise the macros shown in |{function}| blocks;
% this is the ugly code that does that.
%
% We also have some code here to print out every documented macro at the end
% of the document.
%    \begin{macrocode}
\gdef\showexplmacros#1|{%
  \showexplmacro#1::\@nil
  \@ifnextchar\@nil{\@gobble}{\showexplmacros}%
}
%    \end{macrocode}
% \end{macro}
% 
%    \begin{macrocode}
\gdef\showexplmacro#1:#2:#3\@nil{%
  \gdef\newmacroname{#1}%
  \gdef\macrosuffix{#2}%
  \parse@meta#2/\@nil
  \global\let\funcname\before@slash
  \ifx\newmacroname\@empty
    \expandafter\@gobble
  \else
    \expandafter\@firstofone
  \fi
  {%
    \nextnewline
    \ifx\macrosuffix\@empty
      \parse@meta#1/\@nil
    \else
      \parse@meta#1:#2/\@nil
    \fi
    \csname seq_gput_right:Nx\expandafter\endcsname 
        \csname g_allfunc_seq\endcsname {%
      \detokenize\expandafter{\before@slash}%
    }%
    \ifx\newmacroname\macroname
      \color[gray]{0.5}%
    \else
      \global\let\macroname\newmacroname
      \color{black}%
    \fi
    \detokenize{#1}\unskip
    \ifx\macrosuffix\@empty
      #3% in case we gobbled a : we wanted
    \else
      \color{black}:\funcname\unskip
    \fi
    &%
%    \end{macrocode}
% This is `informational' part of the macro; at the moment to show if it's
% expandable or not.
%    \begin{macrocode}
    \def\@tempa{{(EXP)}}%
    \expandafter\expandafter\expandafter\in@\expandafter\@tempa\after@slash
    \ifin@
      \hspace{\tabcolsep}$\star$%
    \else
    \fi
  }%
}
%    \end{macrocode}
%
% This code turns all numbers within "<...>" markup to be set as subscripts.
% You can use escaped numbers to get the real thing (e.g., "\1" = `1').
%    \begin{macrocode}
\ExplSyntaxOn
\glet:NN \char_literal_zero   0
\glet:NN \char_literal_one    1
\glet:NN \char_literal_two    2
\glet:NN \char_literal_three  3
\glet:NN \char_literal_four   4
\glet:NN \char_literal_five   5
\glet:NN \char_literal_six    6
\glet:NN \char_literal_seven  7
\glet:NN \char_literal_eight  8
\glet:NN \char_literal_nine   9
\group_begin:
  \char_make_active:N 0
  \char_make_active:N 1
  \char_make_active:N 2
  \char_make_active:N 3
  \char_make_active:N 4
  \char_make_active:N 5
  \char_make_active:N 6
  \char_make_active:N 7
  \char_make_active:N 8
  \char_make_active:N 9
  \gdef_new:Npn \doc_open_meta:n{%
    \group_begin:
      \let:NN \0 \char_literal_zero 
      \let:NN \1 \char_literal_one  
      \let:NN \2 \char_literal_two  
      \let:NN \3 \char_literal_three
      \let:NN \4 \char_literal_four 
      \let:NN \5 \char_literal_five 
      \let:NN \6 \char_literal_six  
      \let:NN \7 \char_literal_seven
      \let:NN \8 \char_literal_eight
      \let:NN \9 \char_literal_nine 
      \char_make_active:N 0
      \char_make_active:N 1
      \char_make_active:N 2
      \char_make_active:N 3
      \char_make_active:N 4
      \char_make_active:N 5
      \char_make_active:N 6
      \char_make_active:N 7
      \char_make_active:N 8
      \char_make_active:N 9
      \def:Npn 0 { \unskip \, ${}_\char_literal_zero $ }
      \def:Npn 1 { \unskip \, ${}_\char_literal_one  $ }
      \def:Npn 2 { \unskip \, ${}_\char_literal_two  $ }
      \def:Npn 3 { \unskip \, ${}_\char_literal_three$ }
      \def:Npn 4 { \unskip \, ${}_\char_literal_four $ }
      \def:Npn 5 { \unskip \, ${}_\char_literal_five $ }
      \def:Npn 6 { \unskip \, ${}_\char_literal_six  $ }
      \def:Npn 7 { \unskip \, ${}_\char_literal_seven$ }
      \def:Npn 8 { \unskip \, ${}_\char_literal_eight$ }
      \def:Npn 9 { \unskip \, ${}_\char_literal_nine $ }
      \doc_close_meta:w
  }
\group_end:
\gdef_new:Npn \doc_close_meta:w #1> { \meta{#1} \group_end: }
\ExplSyntaxOff
%    \end{macrocode}
%
% End the scope of having active "|" and "<".
%    \begin{macrocode}
\endgroup
%    \end{macrocode}
%
%    \begin{macrocode}
\def\parse@meta#1/#2\@nil{%
  \gdef\before@slash{#1}%
  \gdef\after@slash{{#2}}}
%    \end{macrocode}
%
% \begin{environment}{syntax}
% Syntax block placed next to the list of functions to illustrate their use.
%    \begin{macrocode}
\newenvironment{syntax}{%
  \minipage[b]{.7\textwidth}%
    \def\meta@font@select{\rmfamily\itshape} % (Will: I HATE italic cmtt!)
    \small
    \ttfamily
    \raggedright
    \obeyspaces
    \obeylines
}{%
  \endminipage
  \hfil\break
  \global\@ignoretrue
}
%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{doc@macro}
% Let's start to mess around with "doc"'s "macro" environment. See \file{doc.dtx}
% for a full explanation of the original environment. It's
% rather \emph{enthusiastically} commented.
%    \begin{macrocode}
\def\doc@macro{%
  \begingroup
    \catcode`\\=12\relax
    \MakePrivateLetters
    \m@cro@new
}
%    \end{macrocode}
% We've removed the switch for dealing with |{environment}|\,s, too.
%    \begin{macrocode}
\long\def\m@cro@new#1{%
  \endgroup 
%    \end{macrocode}
% Before we start with the original stuff, save the macro name for spitting
% out later. ("\detokenize" just to be sure)
%    \begin{macrocode}
  \edef\@tempa{\detokenize{#1}}%
  \trim@macro@spaces\@tempa
  \csname seq_gput_right:Nx\expandafter\endcsname 
    \csname g_allmacr_seq\endcsname {\@tempa}%  
  \topsep\MacroTopsep 
  \trivlist
  \edef\saved@macroname{\string#1}%
  \def\makelabel##1{\llap{##1}}%
  \if@inlabel
    \let\@tempa\@empty \count@\macro@cnt
    \loop \ifnum\count@>\z@
      \edef\@tempa{\@tempa\hbox{\strut}}\advance\count@\m@ne \repeat
    \edef\makelabel##1{\llap{\vtop to\baselineskip
                               {\@tempa\hbox{##1}\vss}}}%
    \advance \macro@cnt \@ne
  \else  
    \macro@cnt\@ne  
  \fi
  \edef\@tempa{\noexpand\item[\noexpand\PrintMacroName{\detokenize{#1}}]}%
  \@tempa
  \global\advance \c@CodelineNo \@ne
  \SpecialMainIndex{#1}\nobreak
  \DoNotIndex{#1}%
  \global\advance \c@CodelineNo \m@ne
  \ignorespaces
}
%    \end{macrocode}
% \end{environment}
%
% \begin{macro}{\trim@macro@spaces}
% This is from Michael Downes, published in Around the bend \#15; 
% I'm not aware of it existing in any other packages. 
% I've stripped out the comments; see the extensive discussion in 
% the article for more information.
%
% TODO: move "\KV_remove_surrounding_spaces" into \file{l3tlp} and \file{l3toks}
% as a general function to operate on token lists and token registers.
%    \begin{macrocode}
\catcode`\Q=3
\long\def\trim@macro@spaces#1{%
  \begingroup
    \aftergroup\toks
    \aftergroup0
    \aftergroup{%
      \expandafter\env@trimb
      \expandafter\noexpand#1Q Q}%
  \edef#1{\the\toks0}}
\long\def\env@trimb#1 Q{\env@trimc#1Q}
\long\def\env@trimc#1Q#2{%
  \afterassignment\endgroup \vfuzz\the\vfuzz#1}
\catcode`\Q=11
%    \end{macrocode}
% \end{macro}
%
% \begin{environment}{macro}
% We want to extend the old definition to allow comma-separated lists of
% macros, rather than one at a time.
%    \begin{macrocode}
\ExplSyntaxOn
\renewenvironment{macro}{
  \let:NN \doc_begin_macros \c_empty_tlp
  \let:NN \doc_end_macros   \c_empty_tlp
  \group_begin:
    \MakePrivateLetters
    \char_make_letter:N \\
    \doc_macro_aux
}{
  \doc_end_macros
}
%    \end{macrocode}
% After changing the catcodes, parse the arguments:
%    \begin{macrocode}
\def_new:Npn \doc_macro_aux #1 {%
  \group_end:
  \clist_map_variable:nNn {#1} \l_tmpa_tlp {
    \trim@macro@spaces \l_tmpa_tlp
    \expandafter \doc_macros_addto \expandafter {\l_tmpa_tlp}
  }
  \doc_begin_macros
}
%    \end{macrocode}
% Helper to make expansion bearable.
%    \begin{macrocode}
\def_new:Npn \doc_macros_addto #1 {
  \tlp_put_right:Nn \doc_begin_macros { \begin{doc@macro}{#1} }
  \tlp_put_right:Nn \doc_end_macros   { \end{doc@macro}       }
}
%    \end{macrocode}
% \end{environment}
%
%
% \subsection{Some additional markup}
%
% Here are some definitions for additional markup that will help to 
% structure your documentation.
%
% \begin{environment}{danger}
% \begin{environment}{ddanger}
% \begin{syntax}
% |\begin{[d]danger}|\\
% dangerous code\\
% |\end{[d]danger}|
% \end{syntax}
% \begin{danger}Provides a danger bend, as known from the \TeX{}book.
% \end{danger}
% The actual character from the font |manfnt|:
%    \begin{macrocode}
\font\manual=manfnt
\def\dbend{{\manual\char127}}
%    \end{macrocode}
% Defines the single danger bend. Use it whenever there is a feature in your package that might be tricky to use.
% FIXME: Has to be fixed when in combination with a macro-definition…
%    \begin{macrocode}
\def_new:Npn\danger{
  \begin{trivlist}\item[]\noindent%
  \begingroup\hangindent=2pc\hangafter=-2
  \def:Npn\par{\endgraf\endgroup}%
  \hbox to0pt{\hskip-\hangindent\dbend\hfill}\ignorespaces
}
\def_new:Npn\enddanger{\par\end{trivlist}}
%    \end{macrocode}
% \begin{ddanger}
% Use the double danger bend if there is something which could cause serious problems when used in a wrong way. Better the normal user does not know about such things.
% \end{ddanger}
%    \begin{macrocode}
\def_new:Npn\ddanger{
  \begin{trivlist}\item[]\noindent%
  \begingroup\hangindent=3.5pc\hangafter=-2
  \def:Npn\par{\endgraf\endgroup}%
  \hbox to0pt{\hskip-\hangindent\dbend\kern2pt\dbend\hfill}\ignorespaces
}
\def_new:Npn\endddanger{\par\end{trivlist}}
%    \end{macrocode}
% \end{environment}
% \end{environment}
% \section{At end document}
%    \begin{macrocode}
\seq_new:N \g_allfunc_seq
\seq_new:N \g_allmacr_seq
\AtEndDocument{
  \typeout{========================================^^J}
  \tlp_clear:N \l_tmpa_tlp
  \seq_map_inline:Nn \g_allfunc_seq { 
    \seq_if_in:NnT \g_allmacr_seq {#1} { \tlp_put_right:Nn \l_tmpa_tlp {#1^^J} }
  }
  \tlp_if_empty:NF \l_tmpa_tlp {
    \typeout{--------------------------------------}
    \typeout{Functions~both~documented~and~defined:}
    \typeout{(In~order~of~being~documented)}
    \typeout{--------------------------------------}
    \typeout{\l_tmpa_tlp} 
  }
  \tlp_clear:N \l_tmpa_tlp
  \seq_map_inline:Nn \g_allfunc_seq { 
    \seq_if_in:NnF \g_allmacr_seq {#1} { \tlp_put_right:Nn \l_tmpa_tlp {#1^^J} }
  }
  \tlp_if_empty:NF \l_tmpa_tlp { 
    \typeout{-------------------------------------}
    \typeout{Functions~documented~but~not~defined:}
    \typeout{-------------------------------------}
    \typeout{\l_tmpa_tlp} 
  }
  \tlp_clear:N \l_tmpa_tlp
  \seq_map_inline:Nn \g_allmacr_seq { 
    \seq_if_in:NnF \g_allfunc_seq {#1} { \tlp_put_right:Nn \l_tmpa_tlp {#1^^J} }
  }
  \tlp_if_empty:NF \l_tmpa_tlp { 
    \typeout{-------------------------------------}
    \typeout{Functions~defined~but~not~documented:}
    \typeout{-------------------------------------}
    \typeout{\l_tmpa_tlp} 
  }
  \typeout{========================================}
}
\ExplSyntaxOff
%    \end{macrocode}
%
% \section{Everything else}
%
% Will: To be honest I'm not entirely sure if the following code is working or
% usable or relevant any more. It may well be, I just don't know exactly
% what it's for\dots
%
%    \begin{macrocode}
\def\vindex#1>#2\@nil{%
  \edef\temp{\foo#2<>\@nil}%
  \ifx\temp\space\else
  \expandafter\SpecialMainIndexB\expandafter{\temp}\fi}
%    \end{macrocode}
% remove <foo> from index (quick hack, could be better)
%    \begin{macrocode}
\def\foo#1<#2>#3\@nil{%
 #1\ifx\foo#3\foo
   \else#2\expandafter\foo\fi#3\@nil}
%\def\foo#1<#2>#3\@nil{#1<#2>#3}
\def\foo#1<#2>#3\@nil{#1}
%    \end{macrocode}
%
%
% \begin{macro}{\SpecialMainIndexB}
% Heiko's replacement to play nicely with |hypdoc|:
%    \begin{macrocode}
\def\SpecialMainIndexB#1{%
  \index{%
    \@gobble#1%
    \actualchar
    \string\verb\quotechar*\verbatimchar#1\verbatimchar
    \encapchar
    hdpgindex{\thepage}{usage}%
  }%
}
\def\hdpgindex#1#2#3{%
  \csname\ifx\\#2\\relax\else#2\fi\endcsname{%
    \hyperlink{page.#1}{#3}%
  }%
}
%    \end{macrocode}
% \end{macro}
%
% This command will be used to input the patch file
% if that file exists.
%    \begin{macrocode}
\newcommand{\includeltpatch}{%
  \def\currentfile{l3patch.ltx}
  \part{l3patch}
  {\let\ttfamily\relax
    \xdef\filekey{\filekey, \thepart={\ttfamily\currentfile}}}%
  Things we did wrong\ldots
  \IndexInput{l3patch.ltx}}
%    \end{macrocode}
% Get the date from ltvers.dtx
%    \begin{macrocode}
\def\patchdate{0}
\begingroup
   %%\def\ProvidesFile#1\fmtversion#2{\date{#2}\endinput}
   \def\ProvidesFile#1[#2#3]{\date{#2}\endinput}
   \input{l3vers.dtx}
   \xdef\@date{\@date}
   \global\let\X@date=\@date
% Add the patch version if available.
   \long\def\Xdef#1#2#3\def#4#5{%
    \xdef\X@date{#2}%
    \xdef\patchdate{#5}%
    \endinput}%
   \InputIfFileExists{l3patch.ltx}
    {\let\def\Xdef}{\global\let\includeltpatch\relax}
\endgroup
%    \end{macrocode}
%    \begin{macrocode}
\ifx\@date\X@date
   \def\Xpatch{0}
   \ifx\patchdate\Xpatch\else
     \edef\@date{\@date\space Patch level \patchdate}
   \fi
\else
   \@warning{l3patch.ltx does not match l3vers.dtx!}
   \let\includeltpatch\relax
\fi
%    \end{macrocode}
%
%    \begin{macrocode}
%</class>
%    \end{macrocode}
% \section{Configuration files}
% \subsection{\texttt{l3doc.cfg}}
%    \begin{macrocode}
%<*doccfg>
%    \end{macrocode}
%    \begin{macrocode}
\DisableCrossrefs
\AtEndOfClass{\OnlyDescription}
%    \end{macrocode}
%    \begin{macrocode}
%</doccfg>
%    \end{macrocode}
% \subsection{\texttt{l3full.cfg}}
% This is used when the class option "full" is specified.
%    \begin{macrocode}
%<*fullcfg>
%    \end{macrocode}
% Set up the Index and Change History to use "\part"
%    \begin{macrocode}
\IndexPrologue{%
  \part*{Index}%
  \markboth{Index}{Index}%
  \addcontentsline{toc}{part}{Index}%
  The italic numbers denote the pages where the
  corresponding entry is described,
  numbers underlined point to the definition,
  all others indicate the places where it is used.%
}
%    \end{macrocode}
% 
%    \begin{macrocode}
\GlossaryPrologue{%
  \part*{Change History}%
%    \end{macrocode}
% Allow control names to be hyphenated here...
%    \begin{macrocode}
  {\GlossaryParms\ttfamily\hyphenchar\font=`\-}%
  \markboth{Change History}{Change History}%
  \addcontentsline{toc}{part}{Change History}%
}
%    \end{macrocode}
% 
%    \begin{macrocode}
\RecordChanges
\CodelineIndex
\EnableCrossrefs
\AlsoImplementation
\setcounter{IndexColumns}{2}
%    \end{macrocode}
% 
%    \begin{macrocode}
%</fullcfg>
%    \end{macrocode}
%
% \section{Testing}
%
% \begin{function}{\example_foo:N|\example_foo:c}
% \begin{syntax}
%   "\example_foo:N" <arg1>
% \end{syntax}
% <0123456789> <\0\1\2\3\4\5\6\7\8\9>  
% \end{function}
%
% \begin{macro}{ \foo , \bar, \baz, \example_foo:x }
% Testing.
% \end{macro}
%
% \bigskip\bigskip
%
% \begin{macro}{\example_foo:N}
% Another test.
% \end{macro}
%
% \begin{doc@macro}{\example_foo:c}
% Another test.
% \end{doc@macro}
%
% \Finale
%
% \endinput
