% \iffalse
%% File: l3messages.dtx Copyright (C) 1990-2005 LaTeX3 project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3a of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the ``expl3 bundle'' (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/cgi-bin/cvsweb.cgi/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%
%<*!initex>
% \fi
\def\next#1: #2.dtx,v #3 #4 #5 #6 #7$#8{%^^A}$
  \def\fileversion{#3}%
  \def\filedate{#4}%
%\iffalse
%<*dtx>
%\fi
     \ProvidesFile{#2.dtx}[#4 v#3 #8]%
%\iffalse
%</dtx>
%<package> \ProvidesPackage{#2}[#4 v#3 #8]%
%<driver>  \ProvidesFile{#2.drv}[#4 v#3 #8]%
% \fi
}
%\iffalse
%</!initex>
%\fi
\next$Id$
          {L3 Experimental LaTeX Messages module}
%
% \iffalse
%<*driver>
\documentclass{l3doc}

\begin{document}
\DocInput{l3messages.dtx}
\end{document}
%</driver>
% \fi
%
%
% \section{Error messages}
%
% Error messages in \LaTeX3 are stored in external files which are read
% and searched for the correct error message at the time of the error.
% In this way it is possible to write extensive help texts without
% cluttering \TeX{}'s main memory.
%
% This is the old version of the error interface!
%
% \subsection{Functions}
%
% \begin{function}{\err_file_new:Nn}
% \begin{syntax}
%   "\err_file_new:Nn" <err id> "{"<err file name>"}"
% \end{syntax}
% Opens a new error file to write errors to. <err id> is a unique
% identifier for the external <err file name>. By convention <err id> is
% declared as a constant (i.e., starts with "\c_") und ends with "_tlp".
% If this command is issued while some other error file is open we get
% an internal error message.
% \end{function}
%
% \begin{function}{\err_file_close:N}
% \begin{syntax}
%   "\err_file_close:N" <err id>
% \end{syntax}
% Closes the currently open error file and checks that it matches <err
% id>, i.e., that everything is alright in the code.
% \end{function}
%
% \begin{function}{\err_interrupt_new:NNNnnn}
% \begin{syntax}
%   "\err_interrupt_new:NNNnnn"  <err id> <label> <argno>
%                               "{" <short msg> "}"
%                               "{" <long msg>  "}"
%                               "{" <recovery code> "}"
% \end{syntax}
%  This function declares an new error message which can be addressed
% via "\err_interrupt:NNw". The pair (<err id>, <label>) has to be unique
% where <label> can be some otherwise arbitrary token (usually the
% function name in which the error routine is called. Actually, the pair
% (<err id>, expansion of <label>) has to be unique since for reasons of
% speed tests are carried out using "\if_meaning:NN".

% <argno> specifies the number of extra arguments that will be supplied
% to the error routine when "\err_interrupt:NNw" is called. These
% arguments can be used within <short msg>, <long msg>, and/or <recovery
% code> to provide further information to the user. They are denoted
% with "#1", "#2", etc.\ within these arguments.

%  The <short msg> is displayed directly on the terminal if the error
% occurs, <long msg> is displayed when the user types "h" in response
% to the error prompt of \TeX{}, and <recovery code> is executed
% afterwards.  This means that <recovery code> is inserted after any
% deletions or insertations given by the user. all three arguments are
% expanded while they are written to the error file, therefore one has
% to prevent expansion of tokens with "\token_to_string:N" that should be
% expanded when the error is triggered.
% \end{function}
%
% \begin{function}{\err_interrupt:NNw}
% \begin{syntax}
%   "\err_interrupt:NNw" <err id> <label> <more args>
% \end{syntax}
% This function signals a user error by searching the error file denoted
% by <err id> for an error message associated with <label>, i.e.,
% specified by a corresponding "\err_interrupt_new:NNNnnn" command.
% Depending on the number of arguments specified as <argno> when the
% error message was defined, further arguments are read. Then the error
% message is displayed as explained in "\err_interrupt_new:NNNnnn".
% \end{function}
%
% \begin{function}{%
%                  \err_kernel_interrupt:Nw |
%                  \err_kernel_interrupt_new:NNnnn |
% }
% Abbrivations for writing and accessing kernel error messages that go
% to the error file "\c_kernel_err_tlp".
% \end{function}
%
% \begin{function}{\io_newline:}
% \begin{syntax}
%   "\io_newline:"
% \end{syntax}
% This function starts a new line in an error message. It can be used in
% <short msg> and <long msg> to introduce line breaks.
% \end{function}
%
% \begin{function}{\err_latex_bug:n}
% \begin{syntax}
%   "\err_latex_bug:n" "{"<error message>"}"
% \end{syntax}
% Creates an internal error message. This is intended to be used in
% places that should not be reached in normal operation. Somethings
% wrong with the code.
% \end{function}
%
% \subsection{Internal functions}
%
% \begin{function}{\err_display_aux:w}
% This function is constructed on the fly while reading the error file.
% It grabs following arguments from the code (if any) and then displays
% the error message and inserts the <recovery code>.
% \end{function}
%
% \begin{function}{\err_interrupt_new_aux:w}
% Helper function used to write the error message info onto the error
% file.
% \end{function}

% \begin{function}{\err_msgline_aux:NNnnn}
% \begin{syntax}
%   "\err_msgline_aux:NNnnn"  <argno> <label> "{"<short>"}"
%                             "{"<long msg>"}{"<recovery code>"}"
% \end{syntax}
% Function written in front of every error message on the error file. It
% will be executed when the error file is read back in comparing <label>
% to "\l_err_label_token". If they are the same, "\err_display_aux:w"
% will be defined and the reading process will stop.
% \end{function}
%
% \begin{function}{\err_message:D}
% \begin{syntax}
%   "\err_message:D" "{"<error message>"}"
% \end{syntax}
% Function that directly triggers \TeX{}'s error handler. It should not
% be used directly.
% \begin{texnote}
% This is the \LaTeX3 name for the \tn{errormessage} primitive.
% \end{texnote}
% \end{function}
%
% \subsection{Variables and constants}
%
% \begin{variable}{\c_iow_err_stream}
% Output stream used to access the error files during their generation.
% \end{variable}
%
% \begin{variable}{\c_kernel_err_tlp}
% Identifier denoting the kernel error file. (Its contents is the name
% of the external file.)
% \end{variable}
%
% \begin{variable}{\g_err_curr_fname}
% Global variable containing the name of the currently open error file.
% Empty when no such file is open for writing.
% \end{variable}

% \begin{variable}{\tex_errorcontextlines:D}
% Variable determining the amount of macro expansion contents shown to
% the user when an error is triggered. \LaTeX3 sets this to -1 since to
% the average user this contents is of no interest.
% \begin{texnote}
% This is the \LaTeX3 name for the \TeX3 primitive
% \tn{errorcontextlines}.
% \end{texnote}
% \end{variable}
%
% \begin{variable}{\g_err_help_toks}
% Token register that holds the message that will be shown if the user
% types "h" in response to an error message that was produced by
% "\err_message:D".
% \end{variable}
%
% \begin{variable}{\l_err_label_token}
% Variable holding the <label> to look up in an error file.
% \end{variable}
%
% \StopEventually{}
%
% \subsection{The implementation}
%
%    \begin{macrocode}
%<*initex|package>
%    \end{macrocode}
%
%    Some code that needs to be moved to other modules.
%
% \begin{macro}{\c_other_char_code}
%    A constant used for category code changes.
%    \begin{macrocode}
\const_new:Nn \c_other_char_code {12}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\text_put_sp:}
% \begin{macro}{\text_put_four_sp:}
%    We need these functions for certain error and warning messages
%    right away. the first should probably given back to the user.
%    \begin{macrocode}
\def_new:Npn \text_put_sp: {~}
\def_new:Npn \text_put_four_sp: {\text_put_sp: \text_put_sp: 
                                 \text_put_sp: \text_put_sp: }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% This section contains code that combines Michaels original thoughts
% on the the subject with Denys' further ideas.
%
% \begin{macro}{\c_iow_err_stream}
%    Error messages are logged using the output stream
%    |\c_iow_err_stream|.
%    \begin{macrocode}
\iow_new:N \c_iow_err_stream
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\g_err_curr_fname}
%    A nick name for the currently open error file. It is empty
%    if no error file is currently open.
%    \begin{macrocode}
\tlp_new:Nn \g_err_curr_fname{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\err_file_new:Nn}
%    This function defines a new error file.  The first argument is a
%    token list which should hold the name of the error file, the second
%    argument is the name of the error file.  The token list should be
%    a constant defined by this function.
%    \begin{macrocode}
\def_new:Npn \err_file_new:Nn #1#2{
   \tlp_if_empty:NF\g_err_curr_fname
      {\err_latex_bug:n{Unclosed~error~file~`\g_err_curr_fname'}}
   \iow_open:Nn \c_iow_err_stream {#2}
   \io_put_term:x{Errorfile~`#2'~opened~for~output}
   \tlp_gset:Nn \g_err_curr_fname{#2}
   \tlp_new:Nn #1{#2}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\iow_newline:}
%    |\iow_newline:| is used to introduce a new line in an error
%    message. I would like to use |\\| but this would mean
%    redefinition which should be avoided to make the error message
%    the last action before control is given to the user (otherwise
%    something like |\group_end:| would interfer with
%    insertions/deletions by the user).
%    \begin{macrocode}
\def_new:Npn \iow_newline: {^^J}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\err_file_close:N}
%    This function closes the current error file.
%    \begin{macrocode}
\def_new:Npn \err_file_close:N#1{
%    \end{macrocode}
%    Before we close the stream, we write out a final error handler
%    that catches mismatch within error message labels and their
%    calls. Actually this should be integrated into
%    |\err_file_new:Nn|, too.
%    \begin{macrocode}
  \tlp_eq:NNF#1\g_err_curr_fname
     {\err_latex_bug:n{You~closed~the~wrong~error~file~`#1'.~
         Open~is~`\g_err_curr_fname'.}}
  \iow_long_unexpanded:Nn \c_iow_err_stream {\err_latex_bug:n{Didn't~find~the~
        correct~error~message~to~show.\io_newline:
        Was~searching~for~a~function~
        with~the~following~meaning:\io_newline:
          \token_to_string:N\token_to_meaning:N
          \token_to_string:N\l_err_label_token}
%    \end{macrocode}
%    The |\group_end:| here matches the one from |\err_interrupt:NNw| that
%    is used to hide changes to |\par| etc.
%    \begin{macrocode}
      \group_end:}
  \iow_close:N \c_iow_err_stream
  \io_put_term:x{Errorfile~`\g_err_curr_fname'~closed}
  \tlp_gset_eq:NN\g_err_curr_fname\c_empty_tlp
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\c_kernel_err_tlp}
%    Most error messages will go to the system error file; it's name is
%    stored in |\c_kernel_err_tlp|.
%    \begin{macrocode}
\err_file_new:Nn \c_kernel_err_tlp {nkernel.err}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\err_interrupt_new:NNNnnn}
%    This function declares a new error message.
%    |\err_interrupt_new:NNNnnn| \m{errfile} \m{errlabel} \m{argno}
%    \m{errmsg} \m{helpmsg} \m{code}. That error message is fetched
%    from the error file \m{errfile}. The label to search for is
%    \m{errlabel}, the error handler has \m{argno} number of arguments
%    (actually \m{argno} + 3 since the \m{errmsg}, \m{helpmsg} and
%    \m{code} are also arguments), and \m{errmsg} is the message to
%    display, \m{helpmsg} is the message that is displayed when the
%    user enters |h|, while \m{code} is extra code to perform when the
%    error occurs. \m{code} is perhaps not necessary, we will see.
%
%    We have to check that the label associated with the error message
%    is unique. This means that its replacement text (labels are
%    simply arbitrary functions) is different from the replacement
%    text of any other label in the same error set.
%    \begin{macrocode}
\def_new:Npn \err_interrupt_new:NNNnnn #1{
%    \end{macrocode}
%    Both \m{errmsg} and \m{code} might contain hashmarks denoting
%    arguments to the error handler.
%    \begin{macrocode}
  \group_begin: \tex_catcode:D`\#\c_other_char_code
%    \end{macrocode}
%    We also have to check that output goes to the correct error file.
%    \begin{macrocode}
  \if_meaning:NN#1\g_err_curr_fname
  \else:
      \err_latex_bug:n{Error~text~goes~to~wrong~err~file:~
          `\g_err_curr_fname'~is~open~but~you~requested~
          `#1'}
  \fi:
  \err_interrupt_new_aux:w}
\def_long_new:Npn \err_interrupt_new_aux:w #1#2#3#4#5{
  \iow_long_unexpanded:Nn \c_iow_err_stream
        {\err_msgline_aux:NNnnn #1#2{#3}{#4}{#5}\use_noop:}
  \group_end:}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\err_msgline_aux:NNnnn}
%    This function is executed when an error file is read back by
%    |\err_interrupt:NNw|.  It compares its first argument against
%    |\l_err_label_token| using |\if_meaning:NN| and if this fails the
%    function does nothing; otherwise it defines |\err_display_aux:w| in
%    a way that it will pick up the arguments (if any) from the code and
%    generates a suitable error message.
%    \begin{macrocode}
\def_new:Npn \err_msgline_aux:NNnnn #1#2#3#4#5{
  \if_meaning:NN#1\l_err_label_token
%    \end{macrocode}
%    At the moment we simply use the old \LaTeX{} error code and
%    |\renewcommand| to generate the error handler.  After displaying
%    the error message we insert error code this can be manipulated by
%    the user with the deletion/insertion facility of \TeX{}'s error
%    mechanism.
%
%    The |\group_end:| at the very beginning matches the
%    |\group_begin:| when the file starts.
%    \begin{macrocode}
        \renewcommand\err_display_aux:w [#2]{
           \group_end:
           \toks_gset:Nx\g_err_help_toks{#4}
           \io_put_term:x{LaTeX~error~on~\file_show_lineno:.\io_newline:
               \text_put_sp:\text_put_four_sp: \text_put_sp:
               See~LaTeX~manual~for~explanation.\io_newline:
               \text_put_sp:\text_put_four_sp: \text_put_sp:
               Type~\text_put_sp: H~<return>~\text_put_sp: for~
               immediate~help.}
           \err_message:D{#3}
           #5}
        \tex_endinput:D
   \fi:}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\err_display_aux:w}
%    We should make sure that this function is definable.
%    \begin{macrocode}
\def_new:Npn \err_display_aux:w {}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\err_kernel_interrupt_new:NNnnn}
%    To ease the coding in case of system messages that should all go
%    to one and the same error file (if!) we also have the following
%    function.
%    \begin{macrocode}
\def_new:Npn \err_kernel_interrupt_new:NNnnn {
        \err_interrupt_new:NNNnnn \c_kernel_err_tlp}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\err_interrupt:NNw}
%    |\err_interrupt:NNw| is the function that is called when some error
%    occurs in the code. It takes at least two arguments, the
%    \m{errfile} which is a token list that holds the name of the file
%    where the error message should be fetched from, and the label to
%    identify the error message in the error file. However, it may
%    have additional arguments that are picked up by the error handler
%    extracted from the error file. This is specified in the third
%    argument to |\err_interrupt_new:NNNnnn|.
%    \begin{macrocode}
\def_new:Npn \err_interrupt:NNw #1#2{\let:NwN \l_err_label_token #2
     \group_begin:
%    \end{macrocode}
%    For some reason we get some |\par|s into the file if we use the
%    current definition of |\iow_long_unxepanded:N| to write the messages.
%    This is probably a consequence of using token registers to
%    prohibit the expansion of code.
%    \begin{macrocode}
       \let:NwN \par\use_noop:
%    \end{macrocode}
%    We want to ensure that we are not in programmer's mode (no spaces)
%    but we want to switch on internal naming conventions.
%    \begin{macrocode}
       \CodeStop
       \style_names_start:
%    \end{macrocode}
%    We better clear all short references that are active, otherwise
%    we may get surprising results.
%    \begin{macrocode}
       %\clearshortrefmaps
       \tex_input:D #1~\err_display_aux:w}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\l_err_label_token}
%    This will hold the current error label.
%    \begin{macrocode}
\def_new:Npn \l_err_label_token {}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\tex_errorcontextlines:D}
%    Since we are producing our own error and help messages we can
%    turn off the nasty stack information coming from \TeX{}'s
%    stomach.
%    \begin{macrocode}
\int_set:Nn\tex_errorcontextlines:D\c_minus_one
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\err_kernel_interrupt:Nw}
%    |\err_kernel_interrupt:Nw | is just the abbreviation to read from the
%    standard system error file.
%    \begin{macrocode}
\def_new:Npn \err_kernel_interrupt:Nw {\err_interrupt:NNw \c_kernel_err_tlp}
%    \end{macrocode}
% \end{macro}
%
%
%
%
% The code below is a temporary implementation of a few
% of \LaTeX209 error messages with the new syntax.
%    \begin{macrocode}
%% error help message pieces.
\def:Npn\@eha{Your~command~was~ignored.\io_newline:
  Type \text_put_sp: I~<command>~<return>
  \text_put_sp: to~replace~it~with~another~command,\io_newline:
  or~\text_put_sp: <return>
  \text_put_sp: to~continue~without~it.}
\def:Npn\@ehb{You've~lost~some~text.\text_put_sp: \@ehc}
\def:Npn\@ehc{Try~typing\text_put_sp: <return>
  \text_put_sp: to~proceed.\io_newline:
  If~that~doesn't~work,~type
  \text_put_sp: X~<return>\text_put_sp: to~quit.}

\def:Npn\@ehd{You're~ in~ trouble~ here.  \text_put_sp:\@ehc}

\err_kernel_interrupt_new:NNnnn\cs_free_p:N{1}
   {Command~name~`#1'~already~used}
   {You~tried~to~define~a~command~which~already~has~
    a~meaning.\io_newline:
    If~you~really~want~to~redefine~it~try~
    \token_to_string:N\renewcommand\text_put_sp:
    next~time.\io_newline:
    For~this~run~I~will~ignore~your~definition.}
   {}

\err_kernel_interrupt_new:NNnnn\newline{0}
   {There's~no~line~here~to~end}
   {You~tried~to~end~a~line~at~a~place~where~I~thought~
    we~were~already~between~paragraphs.}
   {}

\err_kernel_interrupt_new:NNnnn\newcnt{0}
   {No~such~counter}
   {The~counter~name~mentioned~in~the~operation~is~not~
    known~to~me.\io_newline:
    Check~the~spelling.}
   {}
%</initex|package>
%    \end{macrocode}
%
%
%    Show token usage:
%    \begin{macrocode}
%<*showmemory>
\showMemUsage
%</showmemory>
\message:D{LaTeX:~old~err~messages,}
%    \end{macrocode}
%
%

% Other error message left unchanged.
%    \begin{macrocode}
\def:Npn\@latexerr#1#2{
\def:Npx\l_tmpc_tlp{#2}\exp_after:NN\g_err_help_toks\exp_after:NN{\l_tmpc_tlp}
\io_put_term:x{LaTeX~error.~\text_put_sp:
               See~LaTeX~manual~for~explanation.\io_newline:
 \text_put_sp:\text_put_four_sp:\text_put_four_sp:
 \text_put_four_sp:~ Type \text_put_sp: H~<return>\text_put_sp: for~
 immediate~help.}\err_message:D{#1}}

\def:Npn\@nodocument{\@latexerr{Missing~
 \token_to_string:N\begin{document}}\@ehd}

\def:Npn\@badmath{\@latexerr{Bad~math~environment~delimiter}\@eha}

\def:Npn\@toodeep{\@latexerr{Too~deeply~nested}\@ehd}

\def:Npn\@badpoptabs{\@latexerr{\token_to_string:N\pushtabs
\text_put_sp: and~\token_to_string:N\poptabs
    \text_put_sp: don't~match}\@ehd}

\def:Npn\@badtab{\@latexerr{Undefined~tab~position}\@ehd}

\def:Npn\@preamerr#1{\@latexerr{\if_case:w #1~Illegal~character\or:
     Missing~@-exp\or: Missing~p-arg\fi:\text_put_sp:
     in~array~arg}\@ehd}

\def:Npn\@badlinearg{\@latexerr{Bad~\token_to_string:N\line
   \text_put_sp: or~\token_to_string:N\vector
   \text_put_sp: argument}\@ehb}

\def:Npn\@parmoderr{\@latexerr{Not~in~outer~par~mode}\@ehb}

\def:Npn\@fltovf{\@latexerr{Too~many~unprocessed~floats}\@ehb}

\def:Npn\@badcrerr {\@latexerr{Bad~use~of~\token_to_string:N\\}\@ehc}

\def:Npn\@noitemerr{\@latexerr{Something's~wrong--perhaps~a~missing~
\token_to_string:N\item}\@ehc}

\def:Npn\@notprerr {\@latexerr{Can~be~used~only~in~preamble}\@eha}
%    \end{macrocode}
%
%
%
%    Show token usage:
%    \begin{macrocode}
%<*showmemory>
\showMemUsage
%</showmemory>
%    \end{macrocode}
%
% \endinput
%
% $log$
