% \iffalse
%% File: l3prg.dtx Copyright (C) 2005 Morten H\o gholm, LaTeX3 project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3a of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the ``expl3 bundle'' (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/cgi-bin/cvsweb.cgi/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
\def\next#1: #2.dtx,v #3 #4 #5 #6 #7$#8{%
  \def\fileversion{#3}%
  \def\filedate{#4}%
%<package> \ProvidesPackage{#2}[#4 #3 #5 #6]%
}
\next$Id$
       {L3 Experimental control structures}
% \fi
%
% \iffalse
%<*driver>
\documentclass{l3doc}

\begin{document}
\DocInput{l3prg.dtx}
\end{document}
%</driver>
% \fi
%
% \def\next#1: #2.dtx,v #3 #4 #5 #6 #7${
%  \def\filename{#2}%
%  \def\fileversion{#3}%
%  \def\filedate{#4}}
% \next$Id$
%
%
% \title{The \textsf{l3prg} package\thanks{This file
%         has version number \fileversion, last
%         revised \filedate.}\\
% Program control structures}
% \author{Morten H\o gholm}
% \date{\filedate}
% \maketitle
%
%
% \section{Map functions}
%
%
%  \LaTeX3 incorporates many data types that all have a list-like
%  structure. Therefore it's convenient to have mapping functions able
%  to act on each element or pair of elements in the list.  Usually
%  these functions are found in their respective modules so you'd find
%  "\clist_map_xpnd:NN" (the expandable map function) in the
%  \textsf{l3clist} module. However there are a few types that don't
%  have a module of their own; either because they are very general
%  or because the mapping function is only useful as an intermediate
%  function. These functions are prefixed with "prg" and this prefix
%  may be removed at a later point if the particular data type gets
%  a module of its own.
%
%
%
%  \subsection{Token lists}
%
%  Here are the corresponding macros for token lists.
%
%  \begin{function}{%
%                   \prg_tlist_map_xpnd:nN |
%                   \prg_tlist_map_xpnd:NN |
%  }
%  \begin{syntax}
%     "\prg_tlist_map_xpnd:nN" "{"<tlist>"}" <function> \\
%     "\prg_tlist_map_xpnd:NN" <tlist> <function>
%  \end{syntax}
%  Runs through all elements in a |tlist| from left to right and places
%  <function> in front of each element. Thus <function> should be a
%  function with a |:N| suffix. Uses a purely expandable loop function
%  and will stay so as long as <function> is expandable too. The <tlist>
%  is not supposed to contain brace groups and if still used with these
%  functions it may cause weird errors.
%  \end{function}
%
%  \begin{function}{%
%                   \prg_tlist_map_inline:nn |
%                   \prg_tlist_map_inline:Nn |
%  }
%  \begin{syntax}
%     "\prg_tlist_map_inline:nn" "{"<tlist>"}" "{"<inline~function>"}" \\
%     "\prg_tlist_map_inline:Nn" <tlist> "{"<inline~function>"}"
%  \end{syntax}
%  Allows a syntax like "\prg_tlist_map_inline:nn" "{"<tlist>"}"
%  "{\token_to_string:N #1}". This renders it non-expandable though.
%  \end{function}
%
%  \begin{function}{%
%                   \prg_tlist_map_break:w |
%  }
%  \begin{syntax}
%     "\prg_tlist_map_break:w"
%  \end{syntax}
%  For breaking out of a loop. You should take note of the ":w" as
%  it's usage must be precise!
%  \end{function}
%
%  \subsubsection{Internal macros}
%
%  \begin{function}{%
%                   \prg_tlist_map_inline_function:N |
%  }
%  \begin{syntax}\end{syntax}
%  Internal function used in the "inline" function.
%  \end{function}
%
%  \begin{function}{%
%                   \prg_tlist_map_xpnd_aux:NN |
%                   \prg_tlist_map_inline_aux:N |
%  }
%  \begin{syntax}\end{syntax}
%  Internal helper functions for the <tlist> loops.
%  \end{function}
%
%
%
%  \subsection{Brace lists}
%
%  A brace list is something like "{1}{aaa}{3}{bbb}{-1}{ccc}". Here
%  are functions for running through them.\footnote{I don't know if we
%  really need this type, but here it is just in case.} The "_i" type
%  means it picks up one argument at a time while the "_ii" type picks
%  up two at a time.
%
%  \begin{function}{%
%                   \prg_brlist_i_map_xpnd:nN |
%                   \prg_brlist_i_map_xpnd:NN |
%  }
%  \begin{syntax}
%     "\prg_brlist_i_map_xpnd:NN" <bracelist> <function>
%  \end{syntax}
%  Similar to the loop functions for <tlist> but this type puts braces
%  around the elements, so <function> should have a ":n" suffix.
%  \end{function}
%
%  \begin{function}{%
%                   \prg_brlist_i_map_inline:nn |
%                   \prg_brlist_i_map_inline:Nn |
%  }
%  \begin{syntax}
%     "\prg_brlist_i_map_inline:Nn" <bracelist> "{"<inline~function>"}"
%  \end{syntax}
%  Inline version of the "brlist_i" loop function.
%  \end{function}
%
%  \begin{function}{%
%                   \prg_brlist_i_map_break:w |
%  }
%  \begin{syntax}
%     "\prg_brlist_i_map_break:w"
%  \end{syntax}
%  For breaking out of a loop.
%  \end{function}
%
%
%  \begin{function}{%
%                   \prg_brlist_ii_map_xpnd:nN |
%                   \prg_brlist_ii_map_xpnd:NN |
%  }
%  \begin{syntax}
%     "\prg_brlist_ii_map_xpnd:NN" <bracelist> <function>
%  \end{syntax}
%  Similar to the loop functions for <tlist> but this type puts braces
%  around both elements picked up, so <function> should have a ":nn"
%  suffix.
%  \end{function}
%
%  \begin{function}{%
%                   \prg_brlist_ii_map_inline:nn |
%                   \prg_brlist_ii_map_inline:Nn |
%  }
%  \begin{syntax}
%     "\prg_brlist_ii_map_inline:Nn" <bracelist> "{"<inline~function>"}"
%  \end{syntax}
%  Inline version of the "brlist_ii" loop function.
%  \end{function}
%
%  \begin{function}{%
%                   \prg_brlist_ii_map_break:w |
%  }
%  \begin{syntax}
%     "\prg_brlist_ii_map_break:w"
%  \end{syntax}
%  For breaking out of a loop.
%  \end{function}
%
%  \subsubsection{Internal macros}
%
%  \begin{function}{%
%                   \prg_brlist_i_map_inline_function:n |
%  }
%  \begin{syntax}\end{syntax}
%  Internal function used in the "inline" function.
%  \end{function}
%
%  \begin{function}{%
%                   \prg_brlist_i_map_xpnd_aux:Nn |
%                   \prg_brlist_i_map_inline_aux:n |
%  }
%  \begin{syntax}\end{syntax}
%  Internal helper functions for the <brlist_i> loops.
%  \end{function}
%
%
%  \begin{function}{%
%                   \prg_brlist_ii_map_inline_function:nn |
%  }
%  \begin{syntax}\end{syntax}
%  Internal function used in the "inline" function.
%  \end{function}
%
%  \begin{function}{%
%                   \prg_brlist_ii_map_xpnd_aux:Nnn |
%                   \prg_brlist_ii_map_inline_aux:nn |
%  }
%  \begin{syntax}\end{syntax}
%  Internal helper functions for the <brlist_ii> loops.
%  \end{function}
%
%
%  \section{Conditionals and logical operations}
%
%
%  \LaTeX3 has two primary forms of conditional flow processing. The
%  one type deals with the truth value of a test directly as in
%  "\cs_free:NTF" where you test if a control sequence was undefined
%  and then execute either the \m{true} or \m{false} part depending on
%  the result and after exiting the underlying "\if...\fi:" structure.
%  The second type has to do with predicate functions like
%  "\cs_free_p:N" which return either "\c_true" or "\c_false" to be
%  used in testing with "\if:w".
%
%
%  This section describes a boolean data type which is closely
%  connected to both parts as sometimes you want to execute some code
%  depending on the value of a switch (e.g.,~draft/final) and other
%  times you perhaps want to use it as a predicate function in an
%  "\if:w" test. Here \TeX's original concept with "\iffalse" and
%  "\iftrue" is a little difficult to handle so the easiest is simply
%  to let a boolean either be "\c_true" or "\c_false". This also means
%  we get the logical operations And, Or, and Not which can then be
%  used on both the boolean type and predicate functions.
%
%
%  \subsection{The boolean data type}
%
%  \begin{function}{%
%                   \bool_new:N |
%                   \bool_set_true:N |
%                   \bool_set_false:N |
%                   \bool_gset_true:N |
%                   \bool_gset_false:N |
%
%  }
%  \begin{syntax}
%     "\bool_new:N" <bool> \\
%     "\bool_gset_false:N" <bool>
%  \end{syntax}
%  Define new and setting of boolean variables. When a boolean is
%  defined it is initialized to <false>. A boolean is actually just
%  either "\c_true" or "\c_false".
%  \end{function}
%
%  \begin{function}{%
%                   \bool_if:NTF |
%                   \bool_if:NT |
%                   \bool_if:NF |
%                   \bool_if_p:N |
%
%  }
%  \begin{syntax}
%     "\bool_if:NTF" <bool> "{"\m{true}"}" "{"\m{false}"}"   \\
%     "\bool_if_p:N" <bool>
%  \end{syntax}
%  Test the truth value of the boolean and execute the \m{true} or
%  \m{false} code. "\bool_if_p:N" is a predicate function for use in
%  "\if:w" tests.
%  \end{function}
%
%  \begin{function}{%
%                   \bool_while:NT |
%                   \bool_while:NF |
%                   \bool_dowhile:NT |
%                   \bool_dowhile:NF |
%
%  }
%  \begin{syntax}
%     "\bool_while:NT" <bool> "{"\m{true}"}"  \\
%     "\bool_while:NF" <bool> "{"\m{false}"}"  \\
%  \end{syntax}
%  The "T" versions execute the \m{true} code as long as the boolean is
%  true and the "F" versions execute the \m{false} code as long as the
%  boolean is false. The "while" functions execute the body after
%  testing the boolean and the "dowhile" functions executes the body
%  first and then tests the boolean.
%  \end{function}
%
%
%  \begin{function}{%
%                   \l_tempa_bool |
%                   \g_tempa_bool |
%
%  }
%  \begin{syntax}
%  \end{syntax}
%  Reserved booleans.
%  \end{function}
%
%  \subsection{Logical operations}
%
%  Somewhat related to the subject of conditional flow processing is
%  logical operators as these deal with \m{true} and \m{false}
%  statements which is precisely what the predicate functions return.
%
%
%  \begin{function}{%
%                   \prg_logic_test:nTF |
%                   \prg_logic_test:nT |
%                   \prg_logic_test:nF |
%  }
%  \begin{syntax}
%     "\prg_logic_test:nTF" "{"<predicate>"}" "{"\m{true}"}" "{"\m{false}"}" \\
%     "\prg_logic_test:nTF" "{"<logic tests>"}" "{"\m{true}"}" "{"\m{false}"}"
%  \end{syntax}
%  The first argument can either be a predicate function like
%  "\cs_free_p:N \foo" or one of the logic tests below.
%  \end{function}
%
%
%
%
%  \begin{function}{%
%                   \prg_logic_ors:n |
%                   \prg_logic_or:nn |
%                   \prg_logic_ands:n |
%                   \prg_logic_and:nn |
%                   \prg_logic_not:n |
%  }
%  \begin{syntax}
%     "\prg_logic_ors:n" "{"<predicate>,<predicate>,..."}"  \\
%     "\prg_logic_or:nn" "{"<predicate>"}" "{"<predicate>"}" \\
%     "\prg_logic_ands:n" "{"<predicate>,<predicate>,..."}"  \\
%     "\prg_logic_and:nn" "{"<predicate>"}" "{"<predicate>"}" \\
%     "\prg_logic_not:n" "{"<predicate>"}"
%  \end{syntax}
%  "\prg_logic_or:nn" compares the outcome of two predicate functions
%  (or other logic tests) and if either turns out to be \m{true}
%  returns \m{true} itself. "\prg_logic_and:nn" works in a similar way
%  but requires both outcomes to be \m{true} in order for it to return
%  \m{true} itself. "\prg_logic_not:n" reverses the truth value of a
%  predicate test or a logic operation. Thus
%  \begin{quote}
%  "\prg_logic_not:n {\prg_logic_not:n {\c_true}}"
%  \end{quote}
%  ultimately returns \m{true}.
%  The functions "\prg_logic_ors:n" and "\prg_logic_ands:n" take comma
%  separated lists of predicate functions and return either \m{true} or
%  \m{false}.\footnote{I could have made an interface where you put it
%  in braces but that was just begging for typos.}
%  \end{function}
%
%
% \section{Implementation}
%
%
%    We start by ensuring that the required packages are loaded.
%    \begin{macrocode}
%<*package>
\RequirePackage{l3basics,l3quark}\par
%    \end{macrocode}
%
%
%
%
%
%
%  As \LaTeX3 uses a lot of mapping functions on its internal list
%  structures there is little point in adopting the implementation of
%  the \LaTeXe{} macros \tn{@for} and \tn{@tfor} as those two functions
%  have a running time proportional to $n^2$. Instead we make use of
%  tail recursion ensuring a running time proportional to $n$. Although
%  this requires a change in the user interface it also enables us to
%  implement expandable mapping functions.
%
%  Some data types have their own modules and in those cases the
%  corresponding mapping functions have been moved there as that seems
%  more natural. Currently this is the case for the modules
%  \textsf{l3clist}, \textsf{l3prop}, and \textsf{l3seq}.
%
%
%
%
%  \subsection{Token lists}
%  The contents of a token list is a series of single tokens, so no
%  brace groups allowed. The brace group supported type is available
%  under the names "\prg_brlist_i_map_..."
%
%  \begin{macro}{\prg_tlist_map_xpnd:nN}
%  \begin{macro}{\prg_tlist_map_xpnd:NN}
%  \begin{macro}{\prg_tlist_map_xpnd_aux:NN}
%  Expandable loop macro for |tlist|s. These have the advantage of not
%  needing to test if the argument is empty, because if it is, the stop
%  marker will be read immediately and the loop terminated. This is the
%  "N" type where we expect a single token in the stream. Although it
%  will also pick up a brace group "{..}" this is not intended and don't
%  come asking for help if it doesn't work as you expected.
%    \begin{macrocode}
\def_new:Npn \prg_tlist_map_xpnd:nN #1#2{
  \prg_tlist_map_xpnd_aux:w #2 #1 \q_stop
}
\def_new:Npn \prg_tlist_map_xpnd:NN #1#2{
  \exp_after:NN \prg_tlist_map_xpnd_aux:w
  \exp_after:NN #2 #1 \q_stop
}
\def_new:Npn \prg_tlist_map_xpnd_aux:NN #1#2{
  \if_meaning:NN \q_stop #2
  \else:
    #1#2
    \exp_after:NN \prg_tlist_map_xpnd_aux:NN
    \exp_after:NN #1
  \fi:
}
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%
%
%  \begin{macro}{\prg_tlist_map_break:}
%  The break statement.
%    \begin{macrocode}
\def_new:Npn \prg_tlist_map_break: #1 \q_stop { \fi: }
%    \end{macrocode}
%  \end{macro}
%
%  \begin{macro}{\prg_tlist_map_inline:nn}
%  \begin{macro}{\prg_tlist_map_inline:Nn}
%  \begin{macro}{\prg_tlist_map_inline_aux:N}
%  \begin{macro}{\prg_tlist_map_inline_function:N}
%  The inline functions are straight forward by now.
%    \begin{macrocode}
\def_new:Npn \prg_tlist_map_inline:nn #1#2{
  \def:Npn \prg_tlist_map_inline_function:N ##1{#2}
  \prg_tlist_map_inline_aux:N #1 \q_stop
}
\def_new:Npn \prg_tlist_map_inline:Nn #1#2{
  \def:Npn \prg_tlist_map_inline_function:N ##1{#2}
  \exp_after:NN \prg_tlist_map_inline_aux:N #1 \q_stop
}
\def_new:Npn \prg_tlist_map_inline_aux:N #1{
  \if_meaning:NN \q_stop #1
  \else:
    \prg_tlist_map_inline_function:N #1
    \exp_after:NN \prg_tlist_map_inline_aux:N
  \fi:
}
\let_new:NN \prg_tlist_map_inline_function:N \use_none:n
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%
%
%  \subsection{Braced lists}
%  The contents of a brace list is something like "{aa}{bb}{}{ddd}". I
%  don't know if this will be useful at all but at least it's here if
%  anyone needs it.\footnote{I have an idea of making a function type
%  that makes \tn{ifcase} easier to use by taking an
%  input like \texttt{\bslash
%    prg_case_choose:nn^^A
%    \{}\m{number}\texttt{\}\{\{1\}\{one\}^^A
%    \{3\}\{three\}\{-1\}\{other\}\}^^A
%    } and then picking the right one.}
%
%
%  \begin{macro}{\prg_brlist_i_map_xpnd:nN}
%  \begin{macro}{\prg_brlist_i_map_xpnd:NN}
%  \begin{macro}{\prg_brlist_i_map_xpnd_aux:Nn}
%  Pretty much the same as for |tlist|s except this type puts the
%  braces back in when processing the list elements.
%    \begin{macrocode}
\def_new:Npn \prg_brlist_i_map_xpnd:nN #1#2{
  \prg_brlist_i_map_xpnd_aux:Nn #2 #1 \q_stop
}
\def_new:Npn \prg_brlist_i_map_xpnd:NN #1#2{
  \exp_after:NN \prg_brlist_i_map_xpnd_aux:Nn
  \exp_after:NN #2 #1 \q_stop
}
\def_new:Npn \prg_brlist_i_map_xpnd_aux:Nn #1#2{
  \if_meaning:NN \q_stop #2
  \else:
    #1{#2}
    \exp_after:NN \prg_brlist_i_map_xpnd_aux:Nn
    \exp_after:NN #1
  \fi:
}
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%
%
%  \begin{macro}{\prg_brlist_i_map_break:w}
%  The break statement.
%    \begin{macrocode}
\def_new:Npn \prg_brlist_i_map_break:w #1 \q_stop { \fi: }
%    \end{macrocode}
%  \end{macro}
%
%  \begin{macro}{\prg_brlist_i_map_inline:nn}
%  \begin{macro}{\prg_brlist_i_map_inline:Nn}
%  \begin{macro}{\prg_brlist_i_map_inline_aux:n}
%  \begin{macro}{\prg_brlist_i_inline_function:n}
%  The inline functions are straight forward by now.
%    \begin{macrocode}
\def_new:Npn \prg_brlist_i_map_inline:nn #1#2{
  \def:Npn \prg_brlist_i_map_inline_function:n ##1{#2}
  \prg_brlist_i_map_inline_aux:n #1 \q_stop
}
\def_new:Npn \prg_brlist_i_map_inline:Nn #1#2{
  \def:Npn \prg_brlist_i_map_inline_function:n ##1{#2}
  \exp_after:NN \prg_brlist_i_map_inline_aux:n #1 \q_stop
}
\def_new:Npn \prg_brlist_i_map_inline_aux:n #1{
  \if_meaning:NN \q_stop #1
  \else:
    \prg_brlist_i_map_inline_function:n {#1}
    \exp_after:NN \prg_brlist_i_map_inline_aux:n
  \fi:
}
\let_new:NN \prg_brlist_i_map_inline_function:n \use_none:n
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%
%
%
%
%
%  \begin{macro}{\prg_brlist_ii_map_xpnd:nN}
%  \begin{macro}{\prg_brlist_ii_map_xpnd:NN}
%  \begin{macro}{\prg_brlist_ii_map_xpnd_aux:Nn}
%  Same as above but with two arguments at a time.
%    \begin{macrocode}
\def_new:Npn \prg_brlist_ii_map_xpnd:nN #1#2{
  \prg_brlist_ii_map_xpnd_aux:Nnn #2 #1 \q_stop \q_stop
}
\def_new:Npn \prg_brlist_ii_map_xpnd:NN #1#2{
  \exp_after:NN \prg_brlist_ii_map_xpnd_aux:Nnn
  \exp_after:NN #2 #1 \q_stop \q_stop
}
\def_new:Npn \prg_brlist_ii_map_xpnd_aux:Nnn #1#2#3{
  \if_meaning:NN \q_stop #2
  \else:
    #1{#2}{#3}
    \exp_after:NN \prg_brlist_ii_map_xpnd_aux:Nnn
    \exp_after:NN #1
  \fi:
}
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%
%
%  \begin{macro}{\prg_brlist_ii_map_break:w}
%  The break statement.
%    \begin{macrocode}
\def_new:Npn \prg_brlist_ii_map_break:w #1 \q_stop \q_stop { \fi: }
%    \end{macrocode}
%  \end{macro}
%
%  \begin{macro}{\prg_brlist_ii_map_inline:nn}
%  \begin{macro}{\prg_brlist_ii_map_inline:Nn}
%  \begin{macro}{\prg_brlist_ii_map_inline_aux:n}
%  \begin{macro}{\prg_brlist_ii_inline_function:nn}
%  The inline functions are straight forward by now.
%    \begin{macrocode}
\def_new:Npn \prg_brlist_ii_map_inline:nn #1#2{
  \def:Npn \prg_brlist_ii_map_inline_function:nn ##1{#2}
  \prg_brlist_ii_map_inline_aux:nn #1 \q_stop \q_stop
}
\def_new:Npn \prg_brlist_ii_map_inline:Nn #1#2{
  \def:Npn \prg_brlist_ii_map_inline_function:nn ##1{#2}
  \exp_after:NN \prg_brlist_ii_map_inline_aux:nn #1 \q_stop \q_stop
}
\def_new:Npn \prg_brlist_ii_map_inline_aux:nn #1#2{
  \if_meaning:NN \q_stop #1
  \else:
    \prg_brlist_ii_map_inline_function:nn {#1}{#2}
    \exp_after:NN \prg_brlist_ii_map_inline_aux:nn
  \fi:
}
\let_new:NN \prg_brlist_ii_map_inline_function:nn \use_none:nn
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%
%
%
%
% \subsection{Booleans}
%  For normal booleans we set them to either "\c_true" or "\c_false"
%  and then use "\if:w" to choose the right branch. The functions
%  return either the TF, T, or F case \emph{after} ending the |\if:w|.
%  We only define the |N| versions here as the |c| versions can easily
%  be constructed with the expansion module.
%
%  \begin{macro}{\bool_new:N}
%  \begin{macro}{\bool_set_true:N}
%  \begin{macro}{\bool_set_false:N}
%  \begin{macro}{\bool_gset_true:N}
%  \begin{macro}{\bool_gset_false:N}
%  Defining and setting a boolean is easy.
%    \begin{macrocode}
\def_new:Npn \bool_new:N #1   { \def_new:Npn #1 { \c_false } }
\def_new:Npn \bool_set_true:N   #1 { \let:NN  #1 \c_true }
\def_new:Npn \bool_set_false:N  #1 { \let:NN  #1 \c_false }
\def_new:Npn \bool_gset_true:N  #1 { \glet:NN #1 \c_true }
\def_new:Npn \bool_gset_false:N #1 { \glet:NN #1 \c_false }
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%
%  \begin{macro}{\l_tempa_bool}
%  \begin{macro}{\g_tempa_bool}
%    \begin{macrocode}
\bool_new:N \l_tempa_bool
\bool_new:N \g_tempa_bool
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%
%  \begin{macro}{\bool_if:NTF}
%  \begin{macro}{\bool_if:NT}
%  \begin{macro}{\bool_if:NF}
%  Straight forward here.
%    \begin{macrocode}
\def_new:Npn \bool_if:NTF #1 {
  \if:w #1
    \exp_after:NN \use_arg_i:nn
  \else:
    \exp_after:NN \use_arg_ii:nn
  \fi:
}
\def_new:Npn \bool_if:NT #1 {
  \if:w #1
    \exp_after:NN \use_arg_ii:nn
  \fi:
  \use_none:n
}
\def_new:Npn \bool_if:NF #1 {
  \if:w #1
    \exp_after:NN \use_none:n
  \else:
    \exp_after:NN \use_arg_i:n
  \fi:
}
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%
%  \begin{macro}{\bool_while:NT}
%  \begin{macro}{\bool_while:NF}
%  A "while" loop where the boolean is tested before executing the
%  statement. The "NT" version executes the "T" part as long as the
%  boolean is true while the "NF" version executes the "F" part as
%  long as the boolean is false.
%\begin{macrocode}
\def_new:Npn \bool_while:NT #1 #2 {
  \bool_if:NT #1 {#2 \bool_while:NT #1 {#2}}
}
\def_new:Npn \bool_while:NF #1 #2 {
  \bool_if:NF #1 {#2 \bool_while:NF #1 {#2}}
}
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%
%  \begin{macro}{\bool_dowhile:NT}
%  \begin{macro}{\bool_dowhile:NF}
%  A "do-while" loop where the body is performed at least once and the
%  boolean is tested after executing the body. Otherwise identical to
%  the above functions.
%    \begin{macrocode}
\def_new:Npn \bool_dowhile:NT #1 #2 {
  #2 \bool_if:NT #1 {\bool_dowhile:NT #1 {#2}}
}
\def_new:Npn \bool_dowhile:NF #1 #2 {
  #2 \bool_if:NF #1 {\bool_dowhile:NF #1 {#2}}
}
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%
%  \begin{macro}{\bool_if_p:N}
%  We also make a predicate function for the "bool" data type but since
%  we use "\c_true" and "\c_false" it's rather simple\dots{}
%  Not that there's anything wrong in simplicity -- on the contrary!
%    \begin{macrocode}
\def_new:Npn \bool_if_p:N #1 { #1 }
%    \end{macrocode}
%  \end{macro}
%
%
%  \begin{macro}{\prg_logic_test:nTF}
%  \begin{macro}{\prg_logic_test:nT}
%  \begin{macro}{\prg_logic_test:nF}
%  As the boolean type is actually a predicate function, the next ones
%  are just aliases.
%    \begin{macrocode}
\let_new:NN \prg_logic_test:nTF \bool_if:NTF
\let_new:NN \prg_logic_test:nT  \bool_if:NT
\let_new:NN \prg_logic_test:nF  \bool_if:NF
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%
%
%  \begin{macro}{\prg_logic_or:nn}
%  \begin{macro}{\prg_logic_and:nn}
%  \begin{macro}{\prg_logic_not:n}
%  The logic operations require a little more work. The idea is to have
%  the end result of the logic "and" and "or" functions return "00" and
%  "01" resp.\ to be used in an "\if:w" test. The arguments of the
%  functions are always something expanding to "\c_true" or "\c_false"
%  which is usually resulting from a predicate function or from another
%  logical operation. All the functions start with a "0" and depending
%  on the results of the tests return either "0" or "1" to the input
%  stream to form a new true or false statement.
%    \begin{macrocode}
\def_new:Npn \prg_logic_or:nn #1#2{
%    \end{macrocode}
% Start out with the "0".
%    \begin{macrocode}
  0
%    \end{macrocode}
% Form a number of the input which is one of "0000", "0001", "0100", or
% "0101". If the truth value of both tests are false we get the "0101"
% else we get a number less than that. So we check if the number formed
% is less than $101$.
%    \begin{macrocode}
  \if_num:w #1#2<\c_hundred_one
%    \end{macrocode}
% If it is we put a "0" back into the input stream after closing the
% conditional giving us $"00" = \m{true}$.
%    \begin{macrocode}
    \exp_after:NN 0
  \else:
%    \end{macrocode}
% Else we put in a "1" resulting in $"01" = \m{false}$.
%    \begin{macrocode}
    \exp_after:NN 1
  \fi:
}
%    \end{macrocode}
%  The "and" function is a little different. Again we can have input of
%  the types "0000", "0001", "0100", or "0101". As we require both
%  values to be \m{true} in order to continue we simply check if the
%  number formed by the input is "0" or not and then put the
%  corresponding "0" or "1" back in the input stream as above. We could
%  use "\if_num:w" for this test as well but that'll require us to read
%  the additional "=\c_zero" which runs a little slower than using
%  "\tex_ifcase:D" directly, so we use the latter.
%    \begin{macrocode}
\def_new:Npn \prg_logic_and:nn #1#2{
  0
  \tex_ifcase:D #1#2 ~
    \exp_after:NN 0
  \else:
    \exp_after:NN 1
  \fi:
}
%    \end{macrocode}
%  The "not" function checks a single truth value and reverses it. Here
%  we either get a "00" or "01". If the input equals "0" we put a "1"
%  in the input stream, else we put a "0". Again we use "\tex_ifcase:D"
%  because it's slightly faster.
%    \begin{macrocode}
\def_new:Npn \prg_logic_not:n #1{
  0
  \tex_ifcase:D #1 ~
    \exp_after:NN 1
  \tex_or:D
    \exp_after:NN 0
  \fi:
}
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%
%
%  \begin{macro}{\prg_logic_ors:n}
%  \begin{macro}{\prg_logic_ors_aux:w}
%  \begin{macro}{\prg_logic_ands:n}
%  \begin{macro}{\prg_logic_ands_aux:w}
%  For longer lists of predicates we can't rely on such structures as
%  above. The "\prg_logic_ands:n" would have been easy to program as simply
%  \begin{verbatim}
\def_new:Npn \prg_logic_and:n #1 {
  0\tex_ifcase:D #1 ~ \exp_after:NN 0 \else: \exp_after:NN 1 \fi:
}
%  \end{verbatim}
%  but this would fail with a "! Number too big." in case we were
%  testing six predicate functions where the first was false. This
%  would mean we would have to first convert the string from binary
%  into numerical and then check. While challenging and interesting
%  in itself (See \textsf{binhex}) it still imposes a restriction of
%  15 predicate functions\footnote{We would probably never hit that
%  limit but why create a restriction when we can avoid it?} and we
%  haven't dealt with the "or" case either.
%
%  The solution is to use a mapping function similar to the one in the
%  \textsf{l3clist} module.
%
%    \begin{macrocode}
\def_new:Npn \prg_logic_ors:n #1{
%    \end{macrocode}
% Start out with the "0" as usual and then call a recursive loop.
%    \begin{macrocode}
  0 \prg_logic_ors_aux:w #1, \q_stop ,
}
%    \end{macrocode}
%    \begin{macrocode}
\def_new:Npn \prg_logic_ors_aux:w #1,{
%    \end{macrocode}
% If we hit the stop marker it means we didn't find a single
% true predicate function so we return "1" to make it all false.
%    \begin{macrocode}
  \if_meaning:NN \q_stop #1
    \exp_after:NN 1
  \else:
%    \end{macrocode}
% If we find a true predicate we return "0" to the input stream and
% break the loop. If not we call this function recursively.
%    \begin{macrocode}
    \tex_ifcase:D #1 ~
      \exp_after:NN 0
      \exp_after:NN \prg_logic_andor_break:w
    \fi:
    \exp_after:NN \prg_logic_ors_aux:w
  \fi:
}
%    \end{macrocode}
%  The "and" function is quite similar. Only here we break the loop
%  if we find a \m{false}.
%    \begin{macrocode}
\def_new:Npn \prg_logic_ands:n #1{
%    \end{macrocode}
% Start out with the "0" as usual and then call a recursive loop.
%    \begin{macrocode}
  0 \prg_logic_ands_aux:w #1, \q_stop ,
}
\def_new:Npn \prg_logic_ands_aux:w #1,{
%    \end{macrocode}
% If we hit the stop marker it means we didn't find a single
% false predicate function so we return "0" to make it all true.
%    \begin{macrocode}
  \if_meaning:NN \q_stop #1
    \exp_after:NN 0
  \else:
%    \end{macrocode}
% If we find a false predicate we return "1" to the input stream and
% break the loop. If not we call this function recursively.
%    \begin{macrocode}
    \tex_ifcase:D #1 ~
    \tex_or:D
      \exp_after:NN 1
      \exp_after:NN \prg_logic_andor_break:w
    \fi:
    \exp_after:NN \prg_logic_ands_aux:w
  \fi:
}
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%
%  \begin{macro}{\prg_logic_andor_break:w}
%    \begin{macrocode}
\def_new:Npn \prg_logic_andor_break:w #1 \q_stop, {\fi:}
%    \end{macrocode}
%  \end{macro}
%
%  That's it (for now).
%    \begin{macrocode}
%</package>
%<*showmemory>
\showMemUsage
%</showmemory>
%    \end{macrocode}
