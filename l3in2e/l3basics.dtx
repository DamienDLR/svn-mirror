% \iffalse
%% File: l3basics.dtx Copyright (C) 1990-2008 LaTeX3 project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the ``expl3 bundle'' (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/cgi-bin/cvsweb.cgi/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%<*driver|package>
\RequirePackage{l3names}
%</driver|package>
%\fi
\GetIdInfo$Id$
       {L3 Experimental basic definitions}
%\iffalse
%<*driver>
%\fi
\ProvidesFile{\filename.\filenameext}
  [\filedate\space v\fileversion\space\filedescription]
%\iffalse
\documentclass[full]{l3doc}
\begin{document}
\DocInput{\filename.\filenameext}
\end{document}
%</driver>
% \fi
%
%
% \title{The \textsf{l3basics} package\thanks{This file
%         has version number \fileversion, last
%         revised \filedate.}\\
% Basic Definitions}
% \author{\Team}
% \date{\filedate}
% \maketitle
%
%
% As the name suggest this package holds some basic definitions which
% are needed by most or all other packages in this set.
%
% \section{Basics}
%
% Here we describe those functions that used all over the place. With
% that we mean functions dealing with the construction and testing of
% control sequences. Furthermore the basic parts of conditional
% processing are covered; conditional processing dealing with specific
% data types is described in the modules specific for the respective
% data types.
%
% \subsection{Predicates and conditionals}
% \label{sec:predicates}
%
% \LaTeX3 has three concepts for conditional flow processing:
% \begin{description}
%
% \item[Branching conditionals]
% Functions that carry out a test and then execute, depending on its
% result, either the code supplied in the \m{true arg} or the \m{false
% arg}.
% These arguments are denoted with "T" and "F" repectively. An
% example would be
% \begin{quote}
%  "\cs_if_free:cTF{abc}" \Arg{true code} \Arg{false code}
% \end{quote}
% a function that will turn the first argument into a control sequence
% (since it's marked as "c") then checks whether this control sequence is
% still free and then depending on the result carry out the code in the
% second argument (true case) or in the third argument (false case).
%
% These type of functions are known as `conditionals'; whenever a "TF"
% function is defined it will be accompanied by "T" and "F" functions
% as well. These are provided for convenience when the branch only needs to
% go a single way. A `reversed' conditional ending with "FT" is also defined;
% this should only be used when the result of a test with opposite sense needs 
% to be passed through to another function. Do not use "FT" functions
% in open code~--- it is too easy to mistake the order of the branches.
%
% These conditional functions may or may not be fully expandable, but if they 
% are expandable they will be accompanied by a `predicate' for the same test 
% as described below.
%
% \item[Predicates and predicate conditionals]
% `Predicates' are functions that return a special type of boolean value which 
% can be tested by the primitive function "\if:w". All functions of this type 
% are expandable and have names that end with "_p" in the description part. 
% For example,
% \begin{quote}
%  "\cs_if_free_p:N"
% \end{quote}
% would be a predicate function for the same type of test as the
% conditional described above. It would return `true' if its argument (a 
% single token denoted by "N") is still free for definition. It would be used 
% in constructions like
% \begin{quote}
%  "\if:w \cs_if_free_p:N \l_foo_bar" \m{true code} "\else:" \m{false code} "\fi:"
% \end{quote}
%
% For each predicate defined, a `predicate conditional' will also exist that
% behaves like a conditional described above.
%
% Important to note is that branching conditionals with \m{true code} and/or
% \m{false code} are always defined in a way that the code of the chosen
% alternative can operate on following tokens in the input stream while
% the predicate implementations (with "\if:w") always have an "\else:" or "\fi:"
% interfering. This can be important in scanner implementations. `Predicate
% conditionals' are usually recommended for exactly this reason.
%
% \item[Primitive conditionals]
% There is a third variety of conditional, which is the original concept used in
% plain \TeX{} and \LaTeX. Their use is discouraged in \pkg{expl3} (although
% still used in low-level definitions) because they are more fragile and
% in many cases require more expansion control (hence more code) than the two 
% types of conditionals described above.
% \end{description}
%
% 
% \subsubsection{Primitive conditionals} 
%
% The \eTeX\ engine itself provides many different conditionals. Some
% expand whatever comes after them and others don't. Hence the names
% for these underlying functions will often contain a |:w| part but
% higher level functions are often available. See for instance
% |\int_compare_p:nNn| which is a wrapper for |\if_num:w|.
%
% Certain conditionals deal with specific data types like boxes and
% fonts and are described there. The ones described below are either
% the universal conditionals or deal with control sequences. We will
% prefix primitive conditionals with |\if_|.
% 
% \begin{function}{ \if_true:     / (EXP) |
%                   \if_false:    / (EXP) |
%                   \else:        / (EXP) |
%                   \fi:          / (EXP) |
%                   \reverse_if:N / (EXP) }
% \begin{syntax}
%   "\if_true:" <true code> "\else:" <false code> "\fi:" \\
%   "\if_false:" <true code> "\else:" <false code> "\fi:" \\
%   "\reverse_if:N" <primitive conditional>
% \end{syntax}
% "\if_true:" always executes <true code>, while "\if_false:" always
% executes <false code>. "\reverse_if:N" reverses any two-way primitive
% conditional. "\else:" and "\fi:" delimit the branches of the conditional.
% \begin{texnote}
% These are equivalent to their corresponding \TeX\ primitive 
% conditionals; |\reverse_if:N| is \eTeX's |\unless|.
% \end{texnote}
% \end{function}
% 
% \begin{function}{ \if_meaning:w / (EXP) }
% \begin{syntax}
%   "\if_meaning:w" <arg1> <arg2> <true code> "\else:" <false code> "\fi:"
% \end{syntax}
% "\if_meaning:w" executes <true code> when <arg1> and <arg2> are the same, 
% otherwise it executes <false code>. 
% <arg1> and <arg2> could be functions, variables, tokens; in all cases the
% \emph{unexpanded} definitions are compared.
% \begin{texnote}
% This is \TeX's |\ifx|.
% \end{texnote}
% \end{function}
%
% \begin{function}{ \if:w          / (EXP) |
%                   \if_charcode:w / (EXP) |
%                   \if_catcode:w  / (EXP) }
% \begin{syntax}
%   "\if:w" <token1> <token2> <true code> "\else:" <false code> "\fi:" \\
%   "\if_catcode:w" <token1> <token2> <true code> "\else:" <false
%   code> "\fi:"
% \end{syntax}
% These conditionals will expand any following tokens until two
% unexpandable tokens are left. If you wish to prevent this expansion,
% prefix the token in question with "\exp_not:N". "\if_catcode:w"
% tests if the category codes of the two tokens are the same whereas
% "\if:w" tests if the character codes are
% identical. "\if_charcode:w" is an alternative name for "\if:w".
% \end{function}
%
% \begin{function}{ \if_cs_exist:N  / (EXP) |
%                   \if_cs_exist:w  / (EXP) }
% \begin{syntax}
%   "\if_cs_exist:N" <cs> <true code> "\else:" <false code> "\fi:" \\
%   "\if_cs_exist:w" <tokens> "\cs_end:" <true code> "\else:" <false
%   code> "\fi:"
% \end{syntax}
% Check if <cs> appears in the hash table or if the control sequence
% that can be formed from <tokens> appears in the hash table. The
% latter function does not turn the control sequence in question into
% "\scan_stop:"! This can be useful when dealing with control
% sequences which cannot be entered as a single token.
% \end{function}
%
% \begin{function}{
%     \if_mode_horizontal: / (EXP) |
%     \if_mode_vertical:   / (EXP) |
%     \if_mode_math:       / (EXP) |
%     \if_mode_inner:      / (EXP) }
% \begin{syntax}
%   "\if_mode_horizontal:" <true code> "\else:" <false code> "\fi:"
% \end{syntax}
% Execute <true code> if currently in horizontal mode, otherwise
% execute <false code>. Similar for the other functions.
% \end{function}
%
% \subsubsection{Non-primitive conditionals}
%
% \begin{function}{%
%                  \cs_if_eq_name_p:NN 
% }
% \begin{syntax}
%   "\cs_if_eq_name_p:NN" <cs1> <cs2>
% \end{syntax}
% Returns `true' if <cs1> and <cs2> are textually the same, i.e.\ have
% the same name, otherwise it returns `false'.
% \end{function}
%
% \begin{function}{ \cs_if_eq:NN / (TF)(EXP) |
%                   \cs_if_eq:cN / (TF)(EXP) |
%                   \cs_if_eq:Nc / (TF)(EXP) |
%                   \cs_if_eq:cc / (TF)(EXP) }
% \begin{syntax}
%    "\cs_if_eq:NNTF" <cs1> <cs2> \Arg{true code} \Arg{false code}
% \end{syntax}
% These functions check if <cs1> and <cs2> have same meaning and then
% execute either <true code> or <false code>.
% \end{function}
%
%
% \begin{function}{ \cs_if_free_p:N / (EXP) }
% \begin{syntax}
%   "\cs_if_free_p:N" <cs>
% \end{syntax}
% Returns `true' if <cs> is either undefined or equal to "\scan_stop:".
% However, it returns `false' if <cs> is textually "\c_undefined" (the
% constantly undefined function), or  textually "\scan_stop:".
% \end{function}
%
% \begin{function}{ \cs_if_free:N / (TF)(EXP) |
%                   \cs_if_free:c / (TF)(EXP) }
% \begin{syntax}
%    "\cs_if_free:NTF" <cs> \Arg{true code} \Arg{false code}
% \end{syntax}
% These functions check if <cs> is free and then execute either <true
% code> or <false code>.
% \begin{texnote}
%   The conditional "\cs_if_free:cTF" is the \LaTeX3 implementation of
%   the \LaTeX2 function \tn{@ifundefined}. The other functions
%   haven't been around before.
% \end{texnote}
% \end{function}
%
% \begin{function}{ \cs_if_really_free:c / (TF)(EXP) }
% \begin{syntax}
%   "\cs_if_really_free:cTF" \Arg{tokens} \Arg{true code} \Arg{false code}
% \end{syntax}
% Similar to "\cs_if_free:cTF" but does not put anything previously
% undefined into the hash table. Useful for special control sequences
% like "\foo/bar" which cannot be entered as one token.
% \end{function}
%
% \begin{function}{ \cs_if_exist_p:N / (EXP) }
% \begin{syntax}
%   "\cs_if_exist_p:N" <cs>
% \end{syntax}
% This function does the opposite of "\cs_if_free_p:N".
% \end{function}
%
% \begin{function}{ \cs_if_exist:N / (TF)(EXP) |
%                   \cs_if_exist:c / (TF)(EXP) }
% \begin{syntax}
%    "\cs_if_exist:NTF" <cs> \Arg{true code} \Arg{false code}
% \end{syntax}
% These functions check if <cs> exists and then execute either <true
% code> or <false code>. Exactly the opposite of "\cs_if_free:NTF".
% \end{function}
%
% \begin{function}{ \cs_if_really_exist:c / (TF)(EXP) }
% \begin{syntax}
%   "\cs_if_really_exist:cTF" \Arg{tokens} \Arg{true code} \Arg{false code}
% \end{syntax}
% The opposite of "\cs_if_really_free:cTF".
% \end{function}
%
%
% \begin{function}{ \chk_if_new_cs:N }
% \begin{syntax}
%   "\chk_if_new_cs:N" <cs>
% \end{syntax}
% This function checks that <cs> is so far either undefined or equals
% "\scan_stop:" (the function that is assigned to newly created
% control sequences by \TeX{} when "\cs:w" "..." "\cs_end:" is
% used). If it does exist an error is generated.
% \end{function}
%
% \begin{function}{ \chk_if_exist_cs:N |
%                   \chk_if_exist_cs:c }
% \begin{syntax}
%   "\chk_if_exist_cs:N" <cs>
% \end{syntax}
% This function checks that <cs> is defined. If it is not an error
% is generated.
% \end{function}
%
%
% \begin{variable}{ \c_true | \c_false }
% \begin{syntax}
% \end{syntax}
% Constants that represent `true' or `false', respectively. Used to
% implement predicates.
% \end{variable}
%
% \subsubsection{Applications}
%
% \begin{function}{ \str_if_eq_p:nn / (EXP) }
% \begin{syntax}
%   "\str_if_eq_p:nn" \Arg{string1} \Arg{string2}
% \end{syntax}
% Expands to `true' if <string1> is the same as <string2>, 
% otherwise `false'. Ignores spaces within the strings.
% \end{function}
%
% \begin{function}{ \str_if_eq_var_p:nf / (EXP) }
% \begin{syntax}
%   "\str_if_eq_var_p:nf" \Arg{string1} \Arg{string2}
% \end{syntax}
% A variant of "\str_if_eq_p:nn" which has the advantage of 
% obeying spaces in at least the second argument. (Er, vague description much?)
% \end{function}
%
%
% \subsection{Control sequences}
%
% \begin{function}{ \cs_show:N |
%                   \cs_show:c }
% \begin{syntax}
%   "\cs_show:N" <cs>
%   "\cs_show:c" \Arg{arg}
% \end{syntax}
% This function shows in the console output the \emph{meaning} of the control 
% sequence <cs> or that created by <arg>.
% \begin{texnote}
%   This is \TeX's |\show| and associated csname version of it.
% \end{texnote}
% \end{function}
%
% \begin{function}{ \cs_meaning:N / (EXP) |
%                   \cs_meaning:c / (EXP) }
% \begin{syntax}
%   "\cs_meaning:N" <cs>
%   "\cs_meaning:c" \Arg{arg}
% \end{syntax}
% This function expands to the \emph{meaning} of the control sequence <cs> or 
% that created by <arg>.
% \begin{texnote}
%   This is \TeX's |\meaning| and associated csname version of it.
% \end{texnote}
% \end{function}
%
% \subsection{Selecting and discarding tokens from the input stream}
%
%  The conditional processing cannot be implemented without
%  being able to gobble and select which tokens to use from the input
%  stream.
% 
%
% \begin{function}{ \use:n    / (EXP) |
%                   \use:nn   / (EXP) |
%                   \use:nnn  / (EXP) |
%                   \use:nnnn / (EXP) }
% \begin{syntax}
%   "\use:n"  \Arg{arg}
% \end{syntax}
% Functions that returns all of their arguments to the input stream after 
% removing the surrounding braces around each argument.
% \begin{texnote}
% "\use:n" is \LaTeXe's "\@firstofone"/"\@iden".
% \end{texnote}
% \end{function}
%
% \begin{function}{ \use:c / (EXP) }
% \begin{syntax}
%   "\use:c"  \Arg{cs}
% \end{syntax}
% Function that returns to the input stream the control sequence created from 
% its argument. Requires two expansions before a control sequence is returned.
% \begin{texnote}
% "\use:c" is \LaTeXe's "\@nameuse".
% \end{texnote}
% \end{function}
%
% \begin{function}{ \use_none:n         / (EXP) |
%                   \use_none:nn        / (EXP) |
%                   \use_none:nnn       / (EXP) |
%                   \use_none:nnnn      / (EXP) |
%                   \use_none:nnnnn     / (EXP) |
%                   \use_none:nnnnnn    / (EXP) |
%                   \use_none:nnnnnnn   / (EXP) |
%                   \use_none:nnnnnnnn  / (EXP) |
%                   \use_none:nnnnnnnnn / (EXP) }
% \begin{syntax}
%    "\use_none:n"  \Arg{arg1}\\
%    "\use_none:nn" \Arg{arg1} \Arg{arg2}
% \end{syntax}
%  These functions gobble the tokens or brace groups from the input
%  stream.
% \begin{texnote}
% "\use_none:n", "\use_none:nn", "\use_none:nnnn" are \LaTeXe's 
% "\@gobble", "\@gobbletwo", and "\@gobblefour".
% \end{texnote}
% \end{function}
%
% \begin{function}{ \use_i:nn  / (EXP) |
%                   \use_ii:nn / (EXP) }
% \begin{syntax}
%   "\use_i:nn"  \Arg{code1} \Arg{code2}
% \end{syntax}
% Functions that execute the first or second argument respectively,
% after removing the surrounding braces. Primarily used to implement
% conditionals.
% \begin{texnote}
% These are \LaTeXe's "\@firstoftwo" and "\@secondoftwo", respectively.
% \end{texnote}
% \end{function}
%
% \begin{function}{ \use_i:nnn   / (EXP) |
%                   \use_ii:nnn  / (EXP) |
%                   \use_iii:nnn / (EXP) }
% \begin{syntax}
%   "\use_i:nnn"  \Arg{arg1} \Arg{arg2} \Arg{arg3}
% \end{syntax}
% Functions that pick up one of three arguments and execute them after
% removing the surrounding braces.
% \begin{texnote}
% \LaTeXe\ has only "\@thirdofthree".
% \end{texnote}
% \end{function}
%
% \begin{function}{ \use_i:nnnn   / (EXP) |
%                   \use_ii:nnnn  / (EXP) |
%                   \use_iii:nnnn / (EXP) |
%                   \use_iv:nnnn  / (EXP) }
% \begin{syntax}
%   "\use_i:nnnn"  \Arg{arg1} \Arg{arg2} \Arg{arg3} \Arg{arg4}
% \end{syntax}
% Functions that pick up one of four arguments and execute them after
% removing the surrounding braces.
% \end{function}
%
% \subsubsection{Extending the interface}
%
% \begin{function}{ \use_i_ii:nnn / (EXP) }
% \begin{syntax}
%   "\use_i_ii:nnn"  \Arg{arg1} \Arg{arg2} \Arg{arg3}
% \end{syntax}
% This function used in the expansion module reads three arguments and
% returns (without braces) the first and second argument while
% discarding the third argument. 
%
% If you wish to select multiple arguments while discarding others,
% use a syntax like this. Its definition is
% \begin{verbatim}
%   \cs_new:NNn \use_i_ii:nnn 3 {#1#2}
% \end{verbatim}
% \end{function}
% 
% \subsubsection{Selecting tokens from delimited arguments}
%
% A different kind of function for selecting tokens from the token
% stream are those that use delimited arguments.
%
% \begin{function}{ \use_none_delimit_by_q_nil:w            / (EXP) |
%                   \use_none_delimit_by_q_stop:w           / (EXP) |
%                   \use_none_delimit_by_q_recursion_stop:w / (EXP) }
% \begin{syntax}
%    "\use_none_delimit_by_q_nil:w" <balanced text> "\q_nil"
% \end{syntax}
% Gobbles <balanced text>. Useful in gobbling the remainder in a list
% structure or terminating recursion.
% \end{function}
%
% \begin{function}{ \use_i_delimit_by_q_nil:nw            / (EXP) |
%                   \use_i_delimit_by_q_stop:nw           / (EXP) |
%                   \use_i_delimit_by_q_recursion_stop:nw / (EXP) }
% \begin{syntax}
%    "\use_i_delimit_by_q_nil:nw" \Arg{arg} <balanced text> "\q_nil"
% \end{syntax}
% Gobbles <balanced text> and executes <arg> afterwards. This can also
% be used to get the first item in a token list.
% \end{function}
%
%
% \begin{function}{ \use_i_after_fi:nw     / (EXP) |
%                   \use_i_after_else:nw   / (EXP) |
%                   \use_i_after_or:nw     / (EXP) |
%                   \use_i_after_orelse:nw / (EXP) }
% \begin{syntax}
%    "\use_i_after_fi:nw" \Arg{arg} "\fi:"
%    "\use_i_after_else:nw" \Arg{arg} "\else:" <balanced text> "\fi:"
%    "\use_i_after_or:nw" \Arg{arg} "\or:" <balanced text> "\fi:"
%    "\use_i_after_orelse:nw" \Arg{arg} "\or:/\else:" <balanced text> "\fi:"
% \end{syntax}
% Executes <arg> after executing closing out
% "\fi:". "\use_i_after_orelse:nw" can be used anywhere where
% "\use_i_after_else:nw" or "\use_i_after_or:nw" are used.
% \end{function}
%
% \subsection{Internal functions}
%
% \begin{function}{ \cs:w / (EXP) | \cs_end: / (EXP) }
% \begin{syntax}
%   "\cs:w" <tokens> "\cs_end:"
% \end{syntax}
% This is the \TeX{} internal way of generating a  control sequence from
% some token list. <tokens> get expanded and must ultimately result in a
% sequence of characters.
% \begin{texnote}
% These functions are the primitives \tn{csname} and \tn{endcsname}.
% "\cs:w" is considered weird because it expands tokens until it reaches
% "\cs_end:".
% \end{texnote}
% \end{function}
%
% \begin{function}{ \pref_global:D    |
%                   \pref_long:D      |
%                   \pref_protected:D }
% \begin{syntax}
%   "\pref_global:D" "\cs_set_nopar:Npn"
% \end{syntax}
% Prefix functions that can be used in front of some definition
% functions (namely \ldots). The result of prefixing a function
% definition with "\pref_global:D" makes the definition global,
% "\pref_long:D" change the argument scanning mechanism so that it
% allows "\par" tokens in the argument of the prefixed function,
% and "\pref_protected:D" makes the definition robust in "\write"s etc.
%
%
% None of these internal functions should be used by a programmer since
% the necessary combinations are all available as separate function,
% e.g., "\cs_set:Npn" is internally implemented as "\pref_long:D"
% "\cs_set_nopar:Npn".
% \begin{texnote}
%   These prefixes are the primitives \tn{global}, \tn{long}, and
%   \tn{protected}.  The \tn{outer} isn't used at all within \LaTeX3
%   because \ldots
% \end{texnote}
% \end{function}
%
%
% \begin{function}{ \exp_after:wN / (EXP) }
% \begin{syntax}
% "\exp_after:wN" <token1> <token2>
% \end{syntax}
% Expands <token2> once and then continues processing from <token1>.
% \begin{texnote}
% This is \TeX's \tn{expandafter}.
% \end{texnote} 
% \end{function}
%
% \begin{function}{ \exp_not:N / (EXP) | \exp_not:n / (EXP) }
% \begin{syntax}
% "\exp_not:N" <token>
% "\exp_not:n" \Arg{tokens}
% \end{syntax}
% In an expanding context, this function prevents <token> or <tokens> from
% expanding.
% \begin{texnote}
% These are \TeX's \tn{\noexpand} and \eTeX's \tn{unexpanded}, respectively.
% \end{texnote}
% \end{function}
%
% \begin{function}{ \prg_do_nothing: / (EXP) }
% This is as close as we get to a null operation or no-op.
% \begin{texnote}
% Definition as in \LaTeX's \tn{\@empty} but not used for the same thing.
% \end{texnote}
% \end{function}
%
% 
% \subsection{That which belongs in other modules but needs to be defined earlier}
%
% \begin{function}{ \io_put_log:x       |
%                   \io_put_term:x      |
%                   \io_put_deferred:Nx }
% \begin{syntax}
% "\io_put_log:x" \Arg{message}
% "\io_put_deferred:Nx" <write_stream> \Arg{message}
% \end{syntax}
%  Writes <message> to either to log or the terminal.
% \end{function}
%
% \begin{function}{ \err_latex_bug:x }
% \begin{syntax}
% "\err_latex_bug:x" \Arg{message}
% \end{syntax}
% Internal function for calling errors in our code.
% \end{function}
%
% \begin{function}{ \cs_record_meaning:N }
% Placeholder for a function to be defined by \file{l3chk}.
% \end{function}
%
% \begin{variable}{ \c_minus_one | \c_zero | \c_sixteen }
% Numeric constants.
% \end{variable}
% 
% 
%
% \subsection{Defining functions}
%
%
% There are two types of function definitions in \LaTeX3:  versions
% that check if the function name is still unused, and versions that
% simply make the definition. The latter are used for internal scratch
% functions that get new meanings all over the place.
%
% For each type there is an additional choice to be made: Does the
% function to be defined contain delimited arguments? The answer in
% 99\% of the cases is no, so in most cases the programmer just want
% to input the number of arguments, which is basically how
% \tn{newcommand} in \LaTeXe{} works. Therefore we provide functions
% that expect a number as the primary type and later on in this module
% you can find the ones with the more primitive syntax.
%
% A definition of a new function can be done locally and globally. Currently
% nearly all function definitions are done locally on top level, in
% other words they are global but don't show it. Therefore I think it may
% be better to remove the local variants in the future and declare all
% checked function definitions global.
%
% \begin{texnote}
% While \TeX{} makes all definition functions directly available to the
% user \LaTeX3 hides them very carefully to avoid the problems with
% definitions that are overwritten accidentally. Many functions that are in
% \TeX{} a combination of prefixes and definition functions are provided
% as individual functions.
% \end{texnote}
%
% A slew of functions are defined in the following sections for defining
% new functions. Here's a quick summary to get an idea of what's available:
% {\centering 
%  "\cs_"("g")("new"/"set")("_protected")("_nopar")":"("N"/"c")("N"/"p")("n"/"x")
%  \par}
% That stands for, respectively, the following variations:
% \begin{description}
% \item[\texttt g] Global or local;
% \item[\texttt{new}/\texttt{set}] 
%    Define a new function or re-define an existing one;
% \item[\texttt{protected}] 
%    Prevent expansion of the function in "x" arguments;
% \item[\texttt{nopar}] Restrict the argument(s) from containing "\par";
% \item[\texttt N/\texttt c] Either a control sequence or a `csname';
% \item[\texttt N/\texttt p] 
%    Either the number of arguments or a primitive \TeX\ argument;
% \item[\texttt n/\texttt x] Either an unexpanded or an expanded definition.
% \end{description}
% That adds up to 128 variations (!). However, the system is very
% logical and only a handful will usually be required often.
%
% \subsubsection{Defining new functions}
%
% Firstly comes to variants most used namely those taking a number to
% denote the number of arguments.
%
% \begin{function}{\cs_new:NNn |
%                  \cs_new:NNx |
%                  \cs_new:cNn |
%                  \cs_new:cNx
% }
% \begin{syntax}
%   "\cs_new:NNn" <cs> <num> \Arg{code}
% \end{syntax}
% Defines a new function, making sure that <cs> is unused so far.
% <num> is the number of arguments which is in the interval $[0,9]$
% otherwise an error is raised. It is under the responsibility of the
% programmer to name the new function according to the rules laid out
% in the previous section.  <code> is either passed literally or may
% be subject to expansion (under the "x" variants).
% \begin{texnote}
% Internally, these use \TeX's "\long". These forms are
% recommended for low-level definitions as experience has shown that "\par"
% tokens often turn up in programming situations that wouldn't have been 
% expected.
% \end{texnote}
% \end{function}
%
% \begin{function}{\cs_gnew:NNn |
%                  \cs_gnew:NNx |
%                  \cs_gnew:cNn |
%                  \cs_gnew:cNx
% }
% \begin{syntax}
%   "\cs_gnew:NNn" <cs> <num> \Arg{code}
% \end{syntax}
% Global versions of the above functions.
% \end{function}
%
% \begin{function}{\cs_new_nopar:NNn |
%                  \cs_new_nopar:NNx |
%                  \cs_new_nopar:cNn |
%                  \cs_new_nopar:cNx
% }
% \begin{syntax}
%   "\cs_new_nopar:NNn" <cs> <num> \Arg{code}
% \end{syntax}
% Version of the above in which "\par" is not allowed to appear within the 
% argument(s) of the defined functions.
% \end{function}
%
% \begin{function}{\cs_gnew_nopar:NNn |
%                  \cs_gnew_nopar:NNx |
%                  \cs_gnew_nopar:cNn |
%                  \cs_gnew_nopar:cNx 
% }
% \begin{syntax}
%   "\cs_gnew_nopar:NNn" <cs> <num> \Arg{code}
% \end{syntax}
% Global versions of the above functions.
% \end{function}
%
% \begin{function}{\cs_new_protected:NNn |
%                  \cs_new_protected:NNx |
%                  \cs_new_protected:cNn |
%                  \cs_new_protected:cNx
% }
% \begin{syntax}
%   "\cs_new_protected:NNn" <cs> <num> \Arg{code}
% \end{syntax}
% Defines a function that is both robust and may contain "\par" tokens
% in the argument(s) when called.
% \end{function}
%
% \begin{function}{\cs_gnew_protected:NNn |
%                  \cs_gnew_protected:NNx |
%                  \cs_gnew_protected:cNn |
%                  \cs_gnew_protected:cNx
% }
% \begin{syntax}
%   "\cs_gnew_protected:NNn" <cs> <num> \Arg{code}
% \end{syntax}
% Global versions of the above functions.
% \end{function}
%
% \begin{function}{\cs_new_protected_nopar:NNn |
%                  \cs_new_protected_nopar:NNx |
%                  \cs_new_protected_nopar:cNn |
%                  \cs_new_protected_nopar:cNx
% }
% \begin{syntax}
%   "\cs_new_protected_nopar:NNn" <cs> <num> \Arg{code}
% \end{syntax}
% Defines a function that does not expand when inside an |x| type
% expansion. "\par" is not allowed in the argument(s) of the defined function.
% \end{function}
%
% \begin{function}{\cs_gnew_protected_nopar:NNn |
%                  \cs_gnew_protected_nopar:NNx |
%                  \cs_gnew_protected_nopar:cNn |
%                  \cs_gnew_protected_nopar:cNx
% }
% \begin{syntax}
%   "\cs_gnew_protected_nopar:NNn" <cs> <num> \Arg{code}
% \end{syntax}
% Global versions of the above functions.
% \end{function}
%
%
%
% Secondly comes the ones where the programmer can use delimited
% arguments. Rarely needed outside the kernel.
%
%
% \begin{function}{\cs_new:Npn |
%                  \cs_new:Npx |
%                  \cs_new:cpn |
%                  \cs_new:cpx
% }
% \begin{syntax}
%   "\cs_new:Npn" <cs> <parms> \Arg{code}
% \end{syntax}
% Defines a function that may contain "\par" tokens in the argument(s)
% when called. This is not allowed for normal functions.
% \end{function}
%
% \begin{function}{\cs_gnew:Npn |
%                  \cs_gnew:Npx |
%                  \cs_gnew:cpn |
%                  \cs_gnew:cpx
% }
% \begin{syntax}
%   "\cs_gnew:Npn" <cs> <parms> \Arg{code}
% \end{syntax}
% Global versions of the above functions.
% \end{function}
%
% \begin{function}{\cs_new_nopar:Npn |
%                  \cs_new_nopar:Npx |
%                  \cs_new_nopar:cpn |
%                  \cs_new_nopar:cpx
% }
% \begin{syntax}
%   "\cs_new_nopar:Npn" <cs> <parms> \Arg{code}
% \end{syntax}
% Defines a new function, making sure that <cs> is unused so far.
% <parms> may consist of arbitrary parameter specification in \TeX{}
% syntax. It is under the responsibility of the programmer to name the
% new function according to the rules laid out in the previous section.
% <code> is either passed literally or may be subject to expansion
% (under the "x" variants).
% \end{function}
%
% \begin{function}{\cs_gnew_nopar:Npn |
%                  \cs_gnew_nopar:Npx |
%                  \cs_gnew_nopar:cpn |
%                  \cs_gnew_nopar:cpx 
% }
% \begin{syntax}
%   "\cs_gnew_nopar:Npn" <cs> <parms> \Arg{code}
% \end{syntax}
% Like "\cs_new_nopar:Npn" but defines the new function globally. See
% comments above.
% \end{function}
%
% \begin{function}{\cs_new_protected:Npn |
%                  \cs_new_protected:Npx |
%                  \cs_new_protected:cpn |
%                  \cs_new_protected:cpx
% }
% \begin{syntax}
%   "\cs_new_protected:Npn" <cs> <parms> \Arg{code}
% \end{syntax}
% Defines a function that is both robust and may contain "\par" tokens
% in the argument(s) when called.
% \end{function}
%
% \begin{function}{ \cs_gnew_protected:Npn |
%                   \cs_gnew_protected:Npx |
%                   \cs_gnew_protected:cpn |
%                   \cs_gnew_protected:cpx }
% \begin{syntax}
%   "\cs_gnew_protected:Npn" <cs> <parms> \Arg{code}
% \end{syntax}
% Global versions of the above functions.
% \end{function}
%
% \begin{function}{\cs_new_protected_nopar:Npn |
%                  \cs_new_protected_nopar:Npx |
%                  \cs_new_protected_nopar:cpn |
%                  \cs_new_protected_nopar:cpx
% }
% \begin{syntax}
%   "\cs_new_protected_nopar:Npn" <cs> <parms> \Arg{code}
% \end{syntax}
% Defines a function that does not expand when inside an |x| type
% expansion.
% \end{function}
%
% \begin{function}{\cs_gnew_protected_nopar:Npn |
%                  \cs_gnew_protected_nopar:Npx |
%                  \cs_gnew_protected_nopar:cpn |
%                  \cs_gnew_protected_nopar:cpx
% }
% \begin{syntax}
%   "\cs_gnew_protected_nopar:Npn" <cs> <parms> \Arg{code}
% \end{syntax}
% Global versions of the above functions.
% \end{function}
%
%
%
%
%
% \subsubsection{Undefining functions}
%
% \begin{function}{ \cs_gundefine:N }
% \begin{syntax}
%   "\cs_gundefine:N" <cs>
% \end{syntax}
% Undefines the control sequence globally.
% \end{function}
%
% \subsubsection{Defining internal functions (no checks)}
%
% Besides the function definitions that check whether or not their
% argument is an unused function we need function definitions that
% overwrite currently used definitions. The following functions are
% provided for this purpose.
%
% First comes the versions expecting a number to denote the number of
% arguments.
%
% \begin{function}{\cs_set:NNn |
%                  \cs_set:NNx |
%                  \cs_set:cNn |
%                  \cs_set:cNx |
% }
% \begin{syntax}
%   "\cs_set:NNn" <cs> <num> \Arg{code}
% \end{syntax}
% Like "\cs_set_nopar:NNn" but allows "\par" tokens in the arguments of the
% function being defined.
% \end{function}
%
% \begin{function}{\cs_gset:NNn |
%                  \cs_gset:NNx |
%                  \cs_gset:cNn |
%                  \cs_gset:cNx |
% }
% \begin{syntax}
%   "\cs_gset:NNn" <cs> <num> \Arg{code}
% \end{syntax}
% Global variant of "\cs_set:NNn".
% \end{function}
%
% \begin{function}{\cs_set_nopar:NNn |
%                  \cs_set_nopar:NNx |
%                  \cs_set_nopar:cNn |
%                  \cs_set_nopar:cNx |
% }
% \begin{syntax}
%   "\cs_set_nopar:NNn" <cs> <num> \Arg{code}
% \end{syntax}
% Like "\cs_new_nopar:NNn" etc.\ but does not check the <cs> name.
% \end{function}
%
% \begin{function}{\cs_gset_nopar:NNn |
%                  \cs_gset_nopar:NNx |
%                  \cs_gset_nopar:cNn |
%                  \cs_gset_nopar:cNx |
% }
% \begin{syntax}
%   "\cs_gset_nopar:NNn" <cs> <num> \Arg{code}
% \end{syntax}
% Like "\cs_set_nopar:NNn" but defines the <cs> globally.
% \end{function}
%
% \begin{function}{\cs_set_protected:NNn |
%                  \cs_set_protected:cNn |
%                  \cs_set_protected:NNx |
%                  \cs_set_protected:cNx |
% }
% \begin{syntax}
%   "\cs_set_protected:NNn" <cs> <num> \Arg{code}
% \end{syntax}
% Naturally robust macro that won't expand in an |x| type argument.
% These varieties also allow |\par| tokens in the arguments of the
% function being defined.
% \end{function}
%
% \begin{function}{\cs_gset_protected:NNn |
%                  \cs_gset_protected:cNn |
%                  \cs_gset_protected:NNx |
%                  \cs_gset_protected:cNx |
% }
% \begin{syntax}
%   "\cs_gset_protected:NNn" <cs> <num> \Arg{code}
% \end{syntax}
% Global versions of the above functions.
% \end{function}
%
% \begin{function}{\cs_set_protected_nopar:NNn |
%                  \cs_set_protected_nopar:cNn |
%                  \cs_set_protected_nopar:NNx |
%                  \cs_set_protected_nopar:cNx |
% }
% \begin{syntax}
%   "\cs_set_protected_nopar:NNn" <cs> <num> \Arg{code}
% \end{syntax}
% Naturally robust macro that won't expand in an |x| type argument.
% This also comes as a |long| version. If you for some reason want to
% expand it inside an |x| type expansion, prefix it with
% |\exp_after:wN \prg_do_nothing:|.
% \end{function}
%
% \begin{function}{\cs_gset_protected_nopar:NNn |
%                  \cs_gset_protected_nopar:cNn |
%                  \cs_gset_protected_nopar:NNx |
%                  \cs_gset_protected_nopar:cNx |
% }
% \begin{syntax}
%   "\cs_gset_protected_nopar:NNn" <cs> <num> \Arg{code}
% \end{syntax}
% Global versions of the above functions.
% \end{function}
%
% Secondly the ones that use the primitive parameter build-up:
%
% \begin{function}{\cs_set:Npn |
%                  \cs_set:Npx |
%                  \cs_set:cpn |
%                  \cs_set:cpx |
% }
% \begin{syntax}
%   "\cs_set:Npn" <cs> <parms> \Arg{code}
% \end{syntax}
% Like "\cs_set_nopar:Npn" but allows "\par" tokens in the arguments of the
% function being defined.
% \begin{texnote}
% These are equivalent to \TeX's "\long\def" and so on. These forms are
% recommended for low-level definitions as experience has shown that "\par"
% tokens often turn up in programming situations that wouldn't have been 
% expected.
% \end{texnote}
% \end{function}
%
% \begin{function}{\cs_gset:Npn |
%                  \cs_gset:Npx |
%                  \cs_gset:cpn |
%                  \cs_gset:cpx |
% }
% \begin{syntax}
%   "\cs_gset:Npn" <cs> <parms> \Arg{code}
% \end{syntax}
% Global variant of "\cs_set:Npn".
% \end{function}
%
% \begin{function}{\cs_set_nopar:Npn |
%                  \cs_set_nopar:Npx |
%                  \cs_set_nopar:cpn |
%                  \cs_set_nopar:cpx |
% }
% \begin{syntax}
%   "\cs_set_nopar:Npn" <cs> <parms> \Arg{code}
% \end{syntax}
% Like "\cs_new_nopar:Npn" etc.\ but does not check the <cs> name.
% \begin{texnote}
% "\cs_set_nopar:Npn" is the \LaTeX3 name for \TeX{}'s \tn{def} and 
% "\cs_set_nopar:Npx" corresponds to the primitive \tn{edef}. The 
% "\cs_set_nopar:cpn" function was known in \LaTeX2 as \tn{@namedef}. 
% "\cs_set_nopar:cpx" has no equivalent.
% \end{texnote}
% \end{function}
%
% \begin{function}{\cs_gset_nopar:Npn |
%                  \cs_gset_nopar:Npx |
%                  \cs_gset_nopar:cpn |
%                  \cs_gset_nopar:cpx |
% }
% \begin{syntax}
%   "\cs_gset_nopar:Npn" <cs> <parms> \Arg{code}
% \end{syntax}
% Like "\cs_set_nopar:Npn" but defines the <cs> globally.
% \begin{texnote}
% "\cs_gset_nopar:Npn" and "\cs_gset_nopar:Npx"
% are \TeX's \tn{gdef} and \tn{xdef}.
% \end{texnote}
% \end{function}
%
%
% \begin{function}{\cs_set_protected:Npn |
%                  \cs_set_protected:Npx |
%                  \cs_set_protected:cpn |
%                  \cs_set_protected:cpx |
% }
% \begin{syntax}
%   "\cs_set_protected:Npn" <cs> <parms> \Arg{code}
% \end{syntax}
% Naturally robust macro that won't expand in an |x| type argument.
% These varieties allow |\par| tokens in the arguments of the
% function being defined.
% \end{function}
%
% \begin{function}{\cs_gset_protected:Npn |
%                  \cs_gset_protected:Npx |
%                  \cs_gset_protected:cpn |
%                  \cs_gset_protected:cpx |
% }
% \begin{syntax}
%   "\cs_gset_protected:Npn" <cs> <parms> \Arg{code}
% \end{syntax}
% Global versions of the above functions.
% \end{function}
%
% \begin{function}{\cs_set_protected_nopar:Npn |
%                  \cs_set_protected_nopar:Npx |
%                  \cs_set_protected_nopar:cpn |
%                  \cs_set_protected_nopar:cpx |
% }
% \begin{syntax}
%   "\cs_set_protected_nopar:Npn" <cs> <parms> \Arg{code}
% \end{syntax}
% Naturally robust macro that won't expand in an |x| type argument.
% If you want for some reason to expand it inside an |x| type expansion, 
% prefix it with |\exp_after:wN \prg_do_nothing:|.
% \end{function}
%
% \begin{function}{\cs_gset_protected_nopar:Npn |
%                  \cs_gset_protected_nopar:Npx |
%                  \cs_gset_protected_nopar:cpn |
%                  \cs_gset_protected_nopar:cpx |
% }
% \begin{syntax}
%   "\cs_gset_protected_nopar:Npn" <cs> <parms> \Arg{code}
% \end{syntax}
% Global versions of the above functions.
% \end{function}
%
% \subsubsection{Copying function definitions}
%
% \begin{function}{ \cs_new_eq:NN  |
%                   \cs_new_eq:cN  |
%                   \cs_new_eq:Nc  |
%                   \cs_new_eq:cc  |
%                   \cs_gnew_eq:NN |
%                   \cs_gnew_eq:cN |
%                   \cs_gnew_eq:Nc |
%                   \cs_gnew_eq:cc }
% \begin{syntax}
%   "\cs_new_eq:NN" <cs1> <cs2>
% \end{syntax}
% Gives the function <cs1> locally or globally the current meaning of <cs2>. 
% If <cs1> already exists then an error is called.
% \end{function}
%
%
% \begin{function}{\cs_set_eq:NN  |
%                  \cs_set_eq:cN  |
%                  \cs_set_eq:Nc  |
%                  \cs_set_eq:cc  |
%                  \cs_gset_eq:NN |
%                  \cs_gset_eq:cN |
%                  \cs_gset_eq:Nc |
%                  \cs_gset_eq:cc }
% \begin{syntax}
%   "\cs_set_eq:cN" <cs1> <cs2>
% \end{syntax}
% Gives the function <cs1> the current meaning of <cs2>. Again, we may
% always do this globally.
% \end{function}
%
% \begin{function}{\cs_set_eq:NwN}
% \begin{syntax}
%   "\cs_set_eq:NwN"  <cs1> <cs2>
%   "\cs_set_eq:NwN"  <cs1> "=" <cs2>
% \end{syntax}
% These functions assign the meaning of <cs2> locally or globally to the
% function <cs1>. Because the \TeX{} primitive operation is being used
% which may have an equal sign and (a certain number of) spaces between
% <cs1> and <cs2> the name contains a "w". (Not happy about this
% convention!).
% \begin{texnote}
% "\cs_set_eq:NwN" is the \LaTeX3 name for \TeX{}'s \tn{let}.
% \end{texnote}
% \end{function}
%
% \subsubsection{Defining test functions}
%
%
% \begin{function}{
%     \def_test_function:npn |
%     \def_test_function:npx |
%     \def_long_test_function:npn |
%     \def_long_test_function:npx |
%     \def_test_function_new:npn |
%     \def_test_function_new:npx |
%     \def_long_test_function_new:npn |
%     \def_long_test_function_new:npx |
% }
%   \begin{syntax}
%     "\def_test_function_new:npn" \Arg{name} <parms> \Arg{test}
%   \end{syntax}
%   Define all the common test cases for a simple test to reduce the
%   risk of typos. As an example here's how we defined the functions
%   "\cs_if_free:cTF", "\cs_if_free:cT" and "\cs_if_free:cF". You just have to
%   fill in the test.
% \begin{verbatim}
% \def_test_function:npn{cs_if_free:c} #1 {
%   \exp_after:wN \if_meaning:w \cs:w#1\cs_end: \scan_stop:}
% \end{verbatim}
%   Be careful not to use this function inside some primitive
%   conditional as \TeX\ will most likely get confused because of the
%   unmatched conditionals.
% \end{function}
%
%
% \subsection{The innards of a function}
%
% \begin{function}{\cs_to_str:N / (EXP)}
% \begin{syntax}
%   "\cs_to_str:N" <cs>
% \end{syntax}
% This function returns the name of <cs> as a sequence of letters with
% the escape character removed.
% \end{function}
%
% \begin{function}{\token_to_str:N / (EXP) | \token_to_str:c / (EXP)}
% \begin{syntax}
%   "\token_to_str:N" <arg>
% \end{syntax}
% This function return the name of <arg> as a sequence of letters
% including the escape character.
% \begin{texnote}
%   This is \TeX's \tn{string}.
% \end{texnote}
% \end{function}
%
% \begin{function}{\token_to_meaning:N / (EXP)}
% \begin{syntax}
%   "\token_to_meaning:N" <arg>
% \end{syntax}
% This function returns the type and definition of <arg> as a sequence
% of letters.
% \begin{texnote}
%   This is \TeX's \tn{meaning}.
% \end{texnote}
% \end{function}
%
% \begin{function}{\cs_get_function_name:N}
% \begin{syntax}
% "\cs_get_function_name:N" "\"<fn>":"<args>
% \end{syntax}
% Strips off the leading escape character and the trailing argument specification
% (including the colon) to return <fn>.
% \end{function}
%
% Other functions regarding arbitrary tokens can be found in the
% \textsf{l3token} module.
%
%  \subsection{Grouping and scanning}
%
% \begin{function}{\scan_stop:}
% \begin{syntax}
%   "\scan_stop:"
% \end{syntax}
% This function stops \TeX's scanning ahead when ending a number.
% \begin{texnote}
% This is the \TeX{} primitive \tn{relax} renamed.
% \end{texnote}
% \end{function}
%
%
% \begin{function}{\group_begin:|
%                  \group_end:}
% \begin{syntax}
%   "\group_begin:" <...> "\group_end:"
% \end{syntax}
% Encloses <...> inside a group.
% \begin{texnote}
% These are the \TeX{} primitives \tn{begingroup} and \tn{endgroup}
% renamed.
% \end{texnote}
% \end{function}
%
% \begin{function}{\group_execute_after:N}
% \begin{syntax}
%   "\group_execute_after:N" <token>
% \end{syntax}
% Adds <token> to the list of tokens to be inserted after the 
% current group ends (through an explicit or implicit "\group_end:").
% \begin{texnote}
% This is \TeX's \tn{aftergroup}.
% \end{texnote}
% \end{function}
%
%
% \subsection{Checking the engine}
%
% \begin{function}{\xetex_if_engine: / (TF)(EXP)}
% \begin{syntax}
%   "\xetex_if_engine:TF" \Arg{true code} \Arg{false code}
% \end{syntax}
% This function detects if we're running a Xe\TeX-based format.
% \end{function}
%
% \begin{function}{\luatex_if_engine: / (TF)(EXP)}
% \begin{syntax}
%   "\luatex_if_engine:TF" \Arg{true code} \Arg{false code}
% \end{syntax}
% This function detects if we're running a Lua\TeX-based format.
% \end{function}
%
% \begin{variable}{\c_xetex_is_engine_bool,\c_luatex_is_engine_bool}
% Boolean variables used for the above functions.
% \end{variable}
%
%
%
%
% \StopEventually{}
%
%
% \subsection{The Implementation}
%
% We need \textsf{l3names} to get things going but we actually need it very
% early on, so it is loaded at the very top of this file. Also, most
% of the code below won't run until \textsf{l3expan} has been
% loaded.
%
% \subsubsection{Renaming some \TeX{} primitives (again)}
%
% \begin{macro}{\cs_set_eq:NwN}
% Having given all the tex primitives a consistent name, we need to
% give sensible names to the ones we actually want to use.
% These will be defined as needed in the appropriate modules, but
% do a few now, just to get started.\footnote{This renaming gets expensive
% in terms of csname usage, an alternative scheme would be to just use
% the ``tex\ldots D'' name in the cases where no good alternative exists.}
%    \begin{macrocode}
%<package>\ProvidesExplPackage
%<package>  {\filename}{\filedate}{\fileversion}{\filedescription}
%<*initex|package>
\tex_let:D \cs_set_eq:NwN            \tex_let:D
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\if_true:}
% \begin{macro}{\if_false:}
% \begin{macro}{\else:}
% \begin{macro}{\fi:}
% \begin{macro}{\reverse_if:N}
% \begin{macro}{\if:w}
% \begin{macro}{\if_charcode:w}
% \begin{macro}{\if_catcode:w}
% Then some conditionals.
%    \begin{macrocode}
\cs_set_eq:NwN   \if_true:           \tex_iftrue:D
\cs_set_eq:NwN   \if_false:          \tex_iffalse:D
\cs_set_eq:NwN   \else:              \tex_else:D
\cs_set_eq:NwN   \fi:                \tex_fi:D
\cs_set_eq:NwN   \reverse_if:N       \etex_unless:D
\cs_set_eq:NwN   \if:w               \tex_if:D
\cs_set_eq:NwN   \if_charcode:w      \tex_if:D
\cs_set_eq:NwN   \if_catcode:w       \tex_ifcat:D
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\if_meaning:w}
%    \begin{macrocode}
\cs_set_eq:NwN   \if_meaning:w       \tex_ifx:D
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\if_mode_math:}
% \begin{macro}{\if_mode_horizontal:}
% \begin{macro}{\if_mode_vertical:}
% \begin{macro}{\if_mode_inner:}
% \TeX{} lets us detect some if its modes.
%    \begin{macrocode}
\cs_set_eq:NwN   \if_mode_math:       \tex_ifmmode:D
\cs_set_eq:NwN   \if_mode_horizontal: \tex_ifhmode:D
\cs_set_eq:NwN   \if_mode_vertical:   \tex_ifvmode:D
\cs_set_eq:NwN   \if_mode_inner:      \tex_ifinner:D
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \begin{macro}{\if_cs_exist:N}
% \begin{macro}{\if_cs_exist:w}
%    \begin{macrocode}
\cs_set_eq:NwN   \if_cs_exist:N      \etex_ifdefined:D
\cs_set_eq:NwN   \if_cs_exist:w      \etex_ifcsname:D
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\exp_after:wN}
% \begin{macro}{\exp_not:N}
% \begin{macro}{\exp_not:n}
%  The three |\exp_| functions are used in the \textsf{l3expan} module
%  where they are described.
%    \begin{macrocode}
\cs_set_eq:NwN   \exp_after:wN       \tex_expandafter:D
\cs_set_eq:NwN   \exp_not:N          \tex_noexpand:D
\cs_set_eq:NwN   \exp_not:n          \etex_unexpanded:D
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% 
% \begin{macro}{\io_put_deferred:Nx}
% \begin{macro}{\token_to_meaning:N}
% \begin{macro}{\token_to_str:N}
% \begin{macro}{\token_to_str:c}
% \begin{macro}{\cs:w}
% \begin{macro}{\cs_end:}
% \begin{macro}{\cs_meaning:N}
% \begin{macro}{\cs_meaning:c}
% \begin{macro}{\cs_show:N}
% \begin{macro}{\cs_show:c}
%    \begin{macrocode}
\cs_set_eq:NwN   \io_put_deferred:Nx \tex_write:D
\cs_set_eq:NwN   \token_to_meaning:N \tex_meaning:D
\cs_set_eq:NwN   \token_to_str:N     \tex_string:D
\cs_set_eq:NwN   \cs:w               \tex_csname:D
\cs_set_eq:NwN   \cs_end:            \tex_endcsname:D
\cs_set_eq:NwN   \cs_meaning:N       \tex_meaning:D
\tex_def:D \cs_meaning:c #1{\exp_after:wN\cs_meaning:N\cs:w #1\cs_end:}
\cs_set_eq:NwN   \cs_show:N          \tex_show:D
\tex_def:D \cs_show:c #1{\exp_after:wN\cs_show:N\cs:w #1\cs_end:}
\tex_def:D \token_to_str:c #1{\exp_after:wN\token_to_str:N\cs:w #1\cs_end:}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\scan_stop:}
% \begin{macro}{\group_begin:}
% \begin{macro}{\group_end:}
%  The next three are basic functions for which there also exist
%  versions that are safe inside alignments. These safe versions are
%  defined in the \textsf{l3prg} module.
%    \begin{macrocode}
\cs_set_eq:NwN   \scan_stop:         \tex_relax:D
\cs_set_eq:NwN   \group_begin:       \tex_begingroup:D
\cs_set_eq:NwN   \group_end:         \tex_endgroup:D
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \begin{macro}{\group_execute_after:N}
%    \begin{macrocode}
\cs_set_eq:NwN \group_execute_after:N \tex_aftergroup:D      
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\pref_global:D}
% \begin{macro}{\pref_long:D}
% \begin{macro}{\pref_protected:D}
%    \begin{macrocode}
\cs_set_eq:NwN   \pref_global:D      \tex_global:D
\cs_set_eq:NwN   \pref_long:D        \tex_long:D
\cs_set_eq:NwN   \pref_protected:D   \etex_protected:D
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
%
% \subsubsection {Defining functions}
%
%
% We start by providing functions for the typical definition
% functions. First the local ones.
%
% \begin{macro}{\cs_set_nopar:Npn}
% \begin{macro}{\cs_set_nopar:Npx}
% \begin{macro}{\cs_set:Npn}
% \begin{macro}{\cs_set:Npx}
% \begin{macro}{\cs_set_protected_nopar:Npn}
% \begin{macro}{\cs_set_protected_nopar:Npx}
% \begin{macro}{\cs_set_protected:Npn}
% \begin{macro}{\cs_set_protected:Npx}
%   All assignment functions in \LaTeX3 should be naturally robust;
%   after all, the \TeX\ primitives for assignments are and it can be
%   a cause of problems if others aren't.
%    \begin{macrocode}
\cs_set_eq:NwN   \cs_set_nopar:Npn            \tex_def:D
\cs_set_eq:NwN   \cs_set_nopar:Npx            \tex_edef:D
\pref_protected:D \cs_set_nopar:Npn \cs_set:Npn {\pref_long:D \cs_set_nopar:Npn}
\pref_protected:D \cs_set_nopar:Npn \cs_set:Npx {\pref_long:D \cs_set_nopar:Npx}
\pref_protected:D \cs_set_nopar:Npn \cs_set_protected_nopar:Npn {\pref_protected:D \cs_set_nopar:Npn}
\pref_protected:D \cs_set_nopar:Npn \cs_set_protected_nopar:Npx {\pref_protected:D \cs_set_nopar:Npx}
\cs_set_protected_nopar:Npn \cs_set_protected:Npn {
  \pref_protected:D \pref_long:D \cs_set_nopar:Npn
}
\cs_set_protected_nopar:Npn \cs_set_protected:Npx {
  \pref_protected:D \pref_long:D \cs_set_nopar:Npx
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\cs_gset_nopar:Npn}
% \begin{macro}{\cs_gset_nopar:Npx}
% \begin{macro}{\cs_gset:Npn}
% \begin{macro}{\cs_gset:Npx}
% \begin{macro}{\cs_gset_protected_nopar:Npn}
% \begin{macro}{\cs_gset_protected_nopar:Npx}
% \begin{macro}{\cs_gset_protected:Npn}
% \begin{macro}{\cs_gset_protected:Npx}
%   Global versions of the above functions.
%    \begin{macrocode}
\cs_set_eq:NwN   \cs_gset_nopar:Npn           \tex_gdef:D
\cs_set_eq:NwN   \cs_gset_nopar:Npx           \tex_xdef:D
\cs_set_protected_nopar:Npn \cs_gset:Npn {\pref_long:D \cs_gset_nopar:Npn}
\cs_set_protected_nopar:Npn \cs_gset:Npx {\pref_long:D \cs_gset_nopar:Npx}
\cs_set_protected_nopar:Npn \cs_gset_protected_nopar:Npn {\pref_protected:D \cs_gset_nopar:Npn}
\cs_set_protected_nopar:Npn \cs_gset_protected_nopar:Npx {\pref_protected:D \cs_gset_nopar:Npx}
\cs_set_protected_nopar:Npn \cs_gset_protected:Npn {
  \pref_protected:D \pref_long:D \cs_gset_nopar:Npn
}
\cs_set_protected_nopar:Npn \cs_gset_protected:Npx {
  \pref_protected:D \pref_long:D \cs_gset_nopar:Npx
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsubsection{Predicate implementation}
%
% I think Michael originated the idea of expandable boolean tests.  At
% first these were supposed to expand into either \texttt{TT} or
% \texttt{TF} to be tested using |\if:w| but this was later changed to
% \texttt{00} and \texttt{01}, so they can be used in logical
% operations (see the \textsf{l3prg} module). We need this from the
% get-go.
%
% \begin{macro}{\c_true}
% \begin{macro}{\c_false}
%    Here are the canonical boolean values.
%    \begin{macrocode}
\cs_set_nopar:Npn \c_true  {00}
\cs_set_nopar:Npn \c_false {01}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsubsection{Defining and checking (new) functions}
%
% \begin{macro}{\c_minus_one}
% \begin{macro}{\c_zero}
% \begin{macro}{\c_sixteen}
%    We need the constants |\c_minus_one| and |\c_sixteen| now for
%    writing information to the log and the terminal and |\c_zero|
%    which is used by some functions in the \textsf{l3num}module. The
%    rest are defined in the \textsf{l3int} module -- at least for the
%    ones that can be defined with |\tex_chardef:D| or
%    |\tex_mathchardef:D|. For other constants the \textsf{l3int} module is
%    required but it can't be used until the allocation has been set
%    up properly! The actual allocation mechanism is in
%    \textsf{l3alloc} and as \TeX{} wants to reserve count registers
%    0--9, the first available one is~10 so we use that for
%    |\c_minus_one|.
%    \begin{macrocode}
%<*!initex>
\cs_set_eq:NwN \c_minus_one\m@ne
%</!initex>
%<*!package>
\tex_countdef:D \c_minus_one = 10 \scan_stop:
\c_minus_one = -1 \scan_stop:
%</!package>
\tex_chardef:D \c_sixteen = 16\scan_stop:
\tex_chardef:D \c_zero = 0\scan_stop:
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
%    We provide two kinds of functions that can be used to define
%    control sequences. On the one hand we have functions that check
%    if their argument doesn't already exist, they are called
%    |\..._new|. The second type of defining functions doesn't check
%    if the argument is already defined.
%
%    Before we can define them, we need some auxiliary macros that
%    allow us to generate error messages. The definitions here are
%    only temporary, they will be redefined later on.
%
% \begin{macro}{\io_put_log:x}
% \begin{macro}{\io_put_term:x}
%    We define a routine to write only to the log file. And a
%    similar one for writing to both the log file and the terminal.
%
%    \begin{macrocode}
\cs_set_nopar:Npn \io_put_log:x{
      \tex_immediate:D\io_put_deferred:Nx \c_minus_one }
\cs_set_nopar:Npn \io_put_term:x{
      \tex_immediate:D\io_put_deferred:Nx \c_sixteen }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\err_latex_bug:x}
%    This will show internal errors.
%    \begin{macrocode}
\cs_set_nopar:Npn \err_latex_bug:x #1 {
   \io_put_term:x{This~is~a~LaTeX~bug!~Check~coding!}\tex_errmessage:D{#1}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\cs_record_meaning:N}
%    This macro will be used later on for tracing purposes. But we
%    need some more modules to define it, so we just give some dummy
%    definition here.
%    \begin{macrocode}
%<*trace>
\cs_set:Npn \cs_record_meaning:N #1{}
%</trace>
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\use_none:n,\use:n}
% We need these two to make |\chk_if_new_cs:N| bulletproof.
%    \begin{macrocode}
\cs_set:Npn \use_none:n  #1{}
\cs_set:Npn \use:n       #1{#1}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\chk_if_new_cs:N}
%   This command is called by |\cs_new_nopar:Npn| and |\cs_new_eq:NN| etc.\
%   to make sure that the argument sequence is not already in use. If
%   it is, an error is signalled.  It checks if \m{csname} is
%   undefined or |\scan_stop:|. Otherwise an error message is
%   issued. We have to make sure we don't put the argument into the
%   conditional processing since it may be an |\if...| type function!
%    \begin {macrocode}
\cs_set_nopar:Npn \chk_if_new_cs:N #1{
  \if:w \cs_if_free_p:N #1
    \exp_after:wN \use_none:n
  \else:
    \exp_after:wN \use:n
  \fi:
  {    
    \err_latex_bug:x {Command~name~`\token_to_str:N #1'~
                      already~defined!~
                      Current~meaning:~\token_to_meaning:N #1
                    }
  }
%<*trace>
  \cs_record_meaning:N#1
%     \io_put_term:x{Defining~\token_to_str:N #1~on~%}
  \io_put_log:x{Defining~\token_to_str:N #1~on~
                line~\tex_the:D \tex_inputlineno:D}
%</trace>
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\cs_if_exist_p:N}
%    Expands into |\c_true| if the control sequence given as its
%    argument \emph{is} in use.
%    \begin{macrocode}
\cs_set_nopar:Npn \cs_if_exist_p:N #1{
  \if:w \cs_if_free_p:N #1
    \c_false
  \else:
    \c_true \fi:}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\chk_if_exist_cs:N }
% \begin{macro}{\chk_if_exist_cs:c }
%    This function issues a warning message when the control sequence
%    in its argument does not exist.
%    \begin{macrocode}
\cs_set_nopar:Npn \chk_if_exist_cs:N #1 {
  \if:w \cs_if_exist_p:N #1
  \else:
    \err_latex_bug:x{Command~ `\token_to_str:N #1'~
                     not~ yet~ defined!}
  \fi:}
\cs_set_nopar:Npn \chk_if_exist_cs:c #1 {
  \exp_after:wN \chk_if_exist_cs:N \cs:w #1\cs_end: }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\cs_if_free_p:N}
%    Expands into |\c_true| if the control sequence given as its
%    argument is not yet in use.  Note that we make sure to expand
%    into |\c_false| if the control sequence is textually
%    |\c_undefined| or |\scan_stop:|, so that we don't end up
%    (re)defining them.
%    \begin{macrocode}
\cs_set_nopar:Npn \cs_if_free_p:N #1{
  \if_cs_exist:N #1
    \if_meaning:w#1\scan_stop:
      \if:w\cs_if_eq_name_p:NN #1\scan_stop:
        \c_false \else: \c_true \fi:
    \else:
       \c_false
    \fi:
  \else:
    \if:w \cs_if_eq_name_p:NN #1\c_undefined
      \c_false \else: \c_true \fi:
  \fi:
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\str_if_eq_p:nn}
% \begin{macro}[aux]{\str_if_eq_p_aux:w}
%   Takes 2 lists of characters as arguments and expands into
%   |\c_true| if they are equal, and |\c_false| otherwise. Note that
%   in the current implementation spaces in these strings are
%   ignored.\footnote{This is a function which could use
%     \cs{tlist_compare:xx}.}
%    \begin{macrocode}
\cs_set_nopar:Npn \str_if_eq_p:nn #1#2{
  \str_if_eq_p_aux:w #1\scan_stop:\\#2\scan_stop:\\
}
\cs_set_nopar:Npn \str_if_eq_p_aux:w #1#2\\#3#4\\{
  \if_meaning:w#1#3
    \if_meaning:w#1\scan_stop:\c_true \else:
    \if_meaning:w#3\scan_stop:\c_false \else:
    \str_if_eq_p_aux:w #2\\#4\\\fi:\fi:
  \else:\c_false \fi:}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\cs_if_eq_name_p:NN}
%   An application of the above function, already streamlined for
%   speed, so I put it in here.  It takes two control sequences as
%   arguments and expands into true iff they have the same name.
%   We make it long in case one of them is |\par|!
%    \begin{macrocode}
\cs_set:Npn \cs_if_eq_name_p:NN #1#2{
  \exp_after:wN\exp_after:wN
  \exp_after:wN\str_if_eq_p_aux:w
  \exp_after:wN\token_to_str:N
  \exp_after:wN#1
  \exp_after:wN\scan_stop:
  \exp_after:wN\\
  \token_to_str:N#2\scan_stop:\\}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\str_if_eq_var_p:nf}
% \begin{macro}[aux]{\str_if_eq_var_start:nnN}
% \begin{macro}[aux]{\str_if_eq_var_stop:w}
%   A variant of |\str_if_eq_p:nn| which has the advantage of obeying
%   spaces in at least the second argument. See \textsf{l3quark} for
%   an application. From the hand of David Kastrup with slight
%   modifications to make it fit with the remainder of the expl3
%   language.
%
%   The macro builds a string of |\if:w \fi:| pairs from the first
%   argument. The idea is to turn the comparison of |ab| and |cde|
%   into
% \begin{verbatim}
% \tex_number:D
%   \if:w \scan_stop: \if:w b\if:w a cde\scan_stop: '\fi: \fi: \fi:
%  13
% \end{verbatim}
%   The |'| is important here. If all tests are true, the |'| is read
%   as part of the number in which case the returned number is |13| in
%   octal notation so |\tex_number:D| returns |11|. If one test
%   returns false the |'| is never seen and then we get just |13|.  We
%   wrap the whole process in an external |\if:w| in order to make it
%   return either |\c_true| or |\c_false| since some parts of
%   \textsf{l3prg} expect a predicate to return one of these two
%   tokens.
%    \begin{macrocode}
\cs_set_nopar:Npn \str_if_eq_var_p:nf#1{
  \if:w \tex_number:D\str_if_eq_var_start:nnN{}{}#1\scan_stop:
}
\cs_set_nopar:Npn\str_if_eq_var_start:nnN#1#2#3{
  \if:w#3\scan_stop:\exp_after:wN\str_if_eq_var_stop:w\fi:
  \str_if_eq_var_start:nnN{\if:w#3#1}{#2\fi:}
}
\cs_set_nopar:Npn\str_if_eq_var_stop:w\str_if_eq_var_start:nnN#1#2#3{
  #1#3\scan_stop:'#213~\c_true\else:\c_false\fi:
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
%
%
% \subsubsection{More new definitions}
%
%
%
% \begin{macro}{\cs_new_nopar:Npn}
% \begin{macro}{\cs_new_nopar:Npx}
% \begin{macro}{\cs_new:Npn}
% \begin{macro}{\cs_new:Npx}
% \begin{macro}{\cs_new_protected_nopar:Npn}
% \begin{macro}{\cs_new_protected_nopar:Npx}
% \begin{macro}{\cs_new_protected:Npn}
% \begin{macro}{\cs_new_protected:Npx}
%   These are like |\cs_set_nopar:Npn| and |\cs_set_eq:NN|, but they first check that
%   the argument command is not already in use. You may use
%   |\pref_global:D|, |\pref_long:D|, |\pref_protected:D|, and
%   |\tex_outer:D| as prefixes.
%     \begin {macrocode}
\cs_set_protected_nopar:Npn \cs_new_nopar:Npn #1{\chk_if_new_cs:N #1
                         \cs_set_nopar:Npn #1}
\cs_set_protected_nopar:Npn \cs_new_nopar:Npx #1{\chk_if_new_cs:N #1
                         \cs_set_nopar:Npx #1}
\cs_set_protected_nopar:Npn \cs_new:Npn #1{\chk_if_new_cs:N #1
                                 \cs_set:Npn #1}
\cs_set_protected_nopar:Npn \cs_new:Npx #1{\chk_if_new_cs:N #1
                                 \cs_set:Npx #1}
\cs_set_protected_nopar:Npn \cs_new_protected_nopar:Npn #1{\chk_if_new_cs:N #1
                                 \cs_set_protected_nopar:Npn #1}
\cs_set_protected_nopar:Npn \cs_new_protected_nopar:Npx #1{\chk_if_new_cs:N #1
                                 \cs_set_protected_nopar:Npx #1}
\cs_set_protected_nopar:Npn \cs_new_protected:Npn #1{\chk_if_new_cs:N #1
                                 \cs_set_protected:Npn #1}
\cs_set_protected_nopar:Npn \cs_new_protected:Npx #1{\chk_if_new_cs:N #1
                                 \cs_set_protected:Npx #1}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\cs_gnew_nopar:Npn}
% \begin{macro}{\cs_gnew_nopar:Npx}
% \begin{macro}{\cs_gnew:Npn}
% \begin{macro}{\cs_gnew:Npx}
% \begin{macro}{\cs_gnew_protected_nopar:Npn}
% \begin{macro}{\cs_gnew_protected_nopar:Npx}
% \begin{macro}{\cs_gnew_protected:Npn}
% \begin{macro}{\cs_gnew_protected:Npx}
%   Global versions of the above functions.
%     \begin {macrocode}
\cs_new_protected_nopar:Npn \cs_gnew_nopar:Npn #1{\chk_if_new_cs:N #1
                         \cs_gset_nopar:Npn #1}
\cs_new_protected_nopar:Npn \cs_gnew_nopar:Npx #1{\chk_if_new_cs:N #1
                         \cs_gset_nopar:Npx #1}
\cs_new_protected_nopar:Npn \cs_gnew:Npn #1{\chk_if_new_cs:N #1
                                 \cs_gset:Npn #1}
\cs_new_protected_nopar:Npn \cs_gnew:Npx #1{\chk_if_new_cs:N #1
                                 \cs_gset:Npx #1}
\cs_new_protected_nopar:Npn \cs_gnew_protected_nopar:Npn #1{\chk_if_new_cs:N #1
                                 \cs_gset_protected_nopar:Npn #1}
\cs_new_protected_nopar:Npn \cs_gnew_protected_nopar:Npx #1{\chk_if_new_cs:N #1
                                 \cs_gset_protected_nopar:Npx #1}
\cs_new_protected_nopar:Npn \cs_gnew_protected:Npn #1{\chk_if_new_cs:N #1
                                 \cs_gset_protected:Npn #1}
\cs_new_protected_nopar:Npn \cs_gnew_protected:Npx #1{\chk_if_new_cs:N #1
                                 \cs_gset_protected:Npx #1}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% \begin{macro}{\cs_set_nopar:cpn}
% \begin{macro}{\cs_set_nopar:cpx}
% \begin{macro}{\cs_gset_nopar:cpn}
% \begin{macro}{\cs_gset_nopar:cpx}
% \begin{macro}{\cs_new_nopar:cpn}
% \begin{macro}{\cs_new_nopar:cpx}
% \begin{macro}{\cs_gnew_nopar:cpn}
% \begin{macro}{\cs_gnew_nopar:cpx}
%   Like |\cs_set_nopar:Npn| and |\cs_new_nopar:Npn|, except that the first argument
%   consists of the sequence of characters that should be used to form
%   the name of the desired control sequence (the |c| stands for
%   csname argument, see the expansion module.). Global versions are
%   also provided.
%
%    |\cs_set_nopar:cpn|\m{string}\m{rep-text} will turn \m{string} into a
%    csname and then assign \m {rep-text} to it by using |\cs_set_nopar:Npn|.
%    This means that there might be a parameter string between the two
%    arguments.
%    \begin{macrocode}
\cs_new_nopar:Npn \cs_set_nopar:cpn #1{\exp_after:wN \cs_set_nopar:Npn \cs:w #1\cs_end:}
\cs_new_nopar:Npn \cs_set_nopar:cpx #1{\exp_after:wN \cs_set_nopar:Npx \cs:w #1\cs_end:}
\cs_new_nopar:Npn \cs_gset_nopar:cpn #1{\exp_after:wN \cs_gset_nopar:Npn \cs:w #1\cs_end:}
\cs_new_nopar:Npn \cs_gset_nopar:cpx #1{\exp_after:wN \cs_gset_nopar:Npx \cs:w #1\cs_end:}
\cs_new_nopar:Npn \cs_new_nopar:cpn #1{\exp_after:wN \cs_new_nopar:Npn \cs:w #1\cs_end:}
\cs_new_nopar:Npn \cs_new_nopar:cpx #1{\exp_after:wN \cs_new_nopar:Npx \cs:w #1\cs_end:}
\cs_new_nopar:Npn \cs_gnew_nopar:cpn #1{\exp_after:wN \cs_gnew_nopar:Npn \cs:w #1\cs_end:}
\cs_new_nopar:Npn \cs_gnew_nopar:cpx #1{\exp_after:wN \cs_gnew_nopar:Npx \cs:w #1\cs_end:}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
%
% \begin{macro}{\cs_set:cpn}
% \begin{macro}{\cs_set:cpx}
% \begin{macro}{\cs_gset:cpn}
% \begin{macro}{\cs_gset:cpx}
% \begin{macro}{\cs_new:cpn}
% \begin{macro}{\cs_new:cpx}
% \begin{macro}{\cs_gnew:cpn}
% \begin{macro}{\cs_gnew:cpx}
%   Variants of the |\cs_set:Npn| versions which make a csname out
%   of the first arguments. We may also do this globally.
%    \begin{macrocode}
\cs_new_nopar:Npn \cs_set:cpn #1{\exp_after:wN \cs_set:Npn \cs:w #1\cs_end:}
\cs_new_nopar:Npn \cs_set:cpx #1{
  \exp_after:wN\cs_set:Npx\cs:w #1\cs_end:}
\cs_new_nopar:Npn \cs_gset:cpn #1{
  \exp_after:wN \cs_gset:Npn \cs:w #1\cs_end:}
\cs_new_nopar:Npn \cs_gset:cpx #1{
  \exp_after:wN\cs_gset:Npx\cs:w #1\cs_end:}
\cs_new_nopar:Npn \cs_new:cpn #1{
  \exp_after:wN \cs_new:Npn \cs:w #1\cs_end:}
\cs_new_nopar:Npn \cs_new:cpx #1{
  \exp_after:wN \cs_new:Npx \cs:w #1\cs_end:}
\cs_new_nopar:Npn \cs_gnew:cpn #1{
  \exp_after:wN \cs_gnew:Npn \cs:w #1\cs_end:}
\cs_new_nopar:Npn \cs_gnew:cpx #1{
  \exp_after:wN \cs_gnew:Npx \cs:w #1\cs_end:}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\cs_set_protected_nopar:cpn}
% \begin{macro}{\cs_set_protected_nopar:cpx}
% \begin{macro}{\cs_gset_protected_nopar:cpn}
% \begin{macro}{\cs_gset_protected_nopar:cpx}
% \begin{macro}{\cs_new_protected_nopar:cpn}
% \begin{macro}{\cs_new_protected_nopar:cpx}
% \begin{macro}{\cs_gnew_protected_nopar:cpn}
% \begin{macro}{\cs_gnew_protected_nopar:cpx}
%   Variants of the |\cs_set_protected_nopar:Npn| versions which make a csname
%   out of the first arguments. We may also do this globally.
%    \begin{macrocode}
\cs_new_nopar:Npn \cs_set_protected_nopar:cpn #1{
  \exp_after:wN \cs_set_protected_nopar:Npn \cs:w #1\cs_end:}
\cs_new_nopar:Npn \cs_set_protected_nopar:cpx #1{
  \exp_after:wN\cs_set_protected_nopar:Npx\cs:w #1\cs_end:}
\cs_new_nopar:Npn \cs_gset_protected_nopar:cpn #1{
  \exp_after:wN \cs_gset_protected_nopar:Npn \cs:w #1\cs_end:}
\cs_new_nopar:Npn \cs_gset_protected_nopar:cpx #1{
  \exp_after:wN\cs_gset_protected_nopar:Npx\cs:w #1\cs_end:}
\cs_new_nopar:Npn \cs_new_protected_nopar:cpn #1{
  \exp_after:wN \cs_new_protected_nopar:Npn \cs:w #1\cs_end:}
\cs_new_nopar:Npn \cs_new_protected_nopar:cpx #1{
  \exp_after:wN \cs_new_protected_nopar:Npx \cs:w #1\cs_end:}
\cs_new_nopar:Npn \cs_gnew_protected_nopar:cpn #1{
  \exp_after:wN \cs_gnew_protected_nopar:Npn \cs:w #1\cs_end:}
\cs_new_nopar:Npn \cs_gnew_protected_nopar:cpx #1{
  \exp_after:wN \cs_gnew_protected_nopar:Npx \cs:w #1\cs_end:}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\cs_set_protected:cpn}
% \begin{macro}{\cs_set_protected:cpx}
% \begin{macro}{\cs_gset_protected:cpn}
% \begin{macro}{\cs_gset_protected:cpx}
% \begin{macro}{\cs_new_protected:cpn}
% \begin{macro}{\cs_new_protected:cpx}
% \begin{macro}{\cs_gnew_protected:cpn}
% \begin{macro}{\cs_gnew_protected:cpx}
%   Variants of the |\cs_set_protected:Npn| versions which make a csname
%   out of the first arguments. We may also do this globally.
%    \begin{macrocode}
\cs_new_nopar:Npn \cs_set_protected:cpn #1{
  \exp_after:wN \cs_set_protected:Npn \cs:w #1\cs_end:}
\cs_new_nopar:Npn \cs_set_protected:cpx #1{
  \exp_after:wN\cs_set_protected:Npx\cs:w #1\cs_end:}
\cs_new_nopar:Npn \cs_gset_protected:cpn #1{
  \exp_after:wN \cs_gset_protected:Npn \cs:w #1\cs_end:}
\cs_new_nopar:Npn \cs_gset_protected:cpx #1{
  \exp_after:wN\cs_gset_protected:Npx\cs:w #1\cs_end:}
\cs_new_nopar:Npn \cs_new_protected:cpn #1{
  \exp_after:wN \cs_new_protected:Npn \cs:w #1\cs_end:}
\cs_new_nopar:Npn \cs_new_protected:cpx #1{
  \exp_after:wN \cs_new_protected:Npx \cs:w #1\cs_end:}
\cs_new_nopar:Npn \cs_gnew_protected:cpn #1{
  \exp_after:wN \cs_gnew_protected:Npn \cs:w #1\cs_end:}
\cs_new_nopar:Npn \cs_gnew_protected:cpx #1{
  \exp_after:wN \cs_gnew_protected:Npx \cs:w #1\cs_end:}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% \begin{macro}[aux]{\cs_set_aux_0:NNn}
% \begin{macro}[aux]{\cs_set_aux_1:NNn}
% \begin{macro}[aux]{\cs_set_aux_2:NNn}
% \begin{macro}[aux]{\cs_set_aux_3:NNn}
% \begin{macro}[aux]{\cs_set_aux_4:NNn}
% \begin{macro}[aux]{\cs_set_aux_5:NNn}
% \begin{macro}[aux]{\cs_set_aux_6:NNn}
% \begin{macro}[aux]{\cs_set_aux_7:NNn}
% \begin{macro}[aux]{\cs_set_aux_8:NNn}
% \begin{macro}[aux]{\cs_set_aux_9:NNn}
% \begin{macro}[aux]{\cs_set_aux:NNnn}
% \begin{macro}[aux]{\cs_set_aux:Ncnn}
% \begin{macro}[aux]{\cs_set_arg_number_error_msg:Nn}
%   Defining a function with $n$ arguments. First some helper functions.
%    \begin{macrocode}
\cs_new_nopar:cpn {cs_set_aux_0:NNn} #1#2 {#1 #2 }
\cs_new_nopar:cpn {cs_set_aux_1:NNn} #1#2 {#1 #2 ##1 }
\cs_new_nopar:cpn {cs_set_aux_2:NNn} #1#2 {#1 #2 ##1##2 }
\cs_new_nopar:cpn {cs_set_aux_3:NNn} #1#2 {#1 #2 ##1##2##3 }
\cs_new_nopar:cpn {cs_set_aux_4:NNn} #1#2 {#1 #2 ##1##2##3##4 }
\cs_new_nopar:cpn {cs_set_aux_5:NNn} #1#2 {#1 #2 ##1##2##3##4##5 }
\cs_new_nopar:cpn {cs_set_aux_6:NNn} #1#2 {#1 #2 ##1##2##3##4##5##6 }
\cs_new_nopar:cpn {cs_set_aux_7:NNn} #1#2 {#1 #2 ##1##2##3##4##5##6##7 }
\cs_new_nopar:cpn {cs_set_aux_8:NNn} #1#2 {#1 #2 ##1##2##3##4##5##6##7##8 }
\cs_new_nopar:cpn {cs_set_aux_9:NNn} #1#2 {#1 #2 ##1##2##3##4##5##6##7##8##9 }
%    \end{macrocode}
% Then the function itself which checks for the existance of such a
% helper function. If it doesn't exist, return an error. Otherwise
% call it to define \verb|#2| with the correct number of arguments.
%    \begin{macrocode}
\cs_new_protected:Npn \cs_set_aux:NNnn #1#2#3#4 {
  \cs_if_really_exist:cTF {cs_set_aux_\tex_the:D\etex_numexpr:D #3 :NNn}
  {
    \use:c {cs_set_aux_\tex_the:D\etex_numexpr:D #3 :NNn} #1 #2 {#4}
  }
  { \def_arg_number_error_msg:Nn #2{#3} }
}
\cs_new_nopar:Npn \cs_set_aux:Ncnn #1#2{
  \exp_after:wN \cs_set_aux:NNnn \exp_after:wN #1 \cs:w #2\cs_end:}
%    \end{macrocode}
% The error message.
%    \begin{macrocode}
\cs_new_nopar:Npn \def_arg_number_error_msg:Nn #1#2 {
  \err_latex_bug:x{
    You're~ trying~ to~ define~ the~ command~ `\token_to_str:N #1'~
    with~ \use:n{\tex_the:D\etex_numexpr:D #2\scan_stop:} ~
    arguments~ but~ I~ only~ allow~ 0-9~ arguments.~ I~ can~ probably~
    not~ help~ you~ here 
  } 
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}[aux]{\cs_set_aux_use_0_parameter:}
% \begin{macro}[aux]{\cs_set_aux_use_1_parameter:}
% \begin{macro}[aux]{\cs_set_aux_use_2_parameter:}
% \begin{macro}[aux]{\cs_set_aux_use_3_parameter:}
% \begin{macro}[aux]{\cs_set_aux_use_4_parameter:}
% \begin{macro}[aux]{\cs_set_aux_use_5_parameter:}
% \begin{macro}[aux]{\cs_set_aux_use_6_parameter:}
% \begin{macro}[aux]{\cs_set_aux_use_7_parameter:}
% \begin{macro}[aux]{\cs_set_aux_use_8_parameter:}
% \begin{macro}[aux]{\cs_set_aux_use_9_parameter:}
%   Something similar to |\cs_set_aux_9:NNn| but for using the
%   parameters.
%    \begin{macrocode}
\cs_set_nopar:cpn{cs_set_aux_use_0_parameter:}{}
\cs_set_nopar:cpn{cs_set_aux_use_1_parameter:}{{##1}}
\cs_set_nopar:cpn{cs_set_aux_use_2_parameter:}{{##1}{##2}}
\cs_set_nopar:cpn{cs_set_aux_use_3_parameter:}{{##1}{##2}{##3}}
\cs_set_nopar:cpn{cs_set_aux_use_4_parameter:}{{##1}{##2}{##3}{##4}}
\cs_set_nopar:cpn{cs_set_aux_use_5_parameter:}{{##1}{##2}{##3}{##4}{##5}}
\cs_set_nopar:cpn{cs_set_aux_use_6_parameter:}{{##1}{##2}{##3}{##4}{##5}{##6}}
\cs_set_nopar:cpn{cs_set_aux_use_7_parameter:}{{##1}{##2}{##3}{##4}{##5}{##6}{##7}}
\cs_set_nopar:cpn{cs_set_aux_use_8_parameter:}{
  {##1}{##2}{##3}{##4}{##5}{##6}{##7}{##8}}
\cs_set_nopar:cpn{cs_set_aux_use_9_parameter:}{
  {##1}{##2}{##3}{##4}{##5}{##6}{##7}{##8}{##9}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\cs_set_nopar:NNn}
% \begin{macro}{\cs_set_nopar:NNx}
% \begin{macro}{\cs_set_nopar:cNn}
% \begin{macro}{\cs_set_nopar:cNx}
% \begin{macro}{\cs_gset_nopar:NNn}
% \begin{macro}{\cs_gset_nopar:NNx}
% \begin{macro}{\cs_gset_nopar:cNn}
% \begin{macro}{\cs_gset_nopar:cNx}
% \begin{macro}{\cs_new_nopar:NNn}
% \begin{macro}{\cs_new_nopar:NNx}
% \begin{macro}{\cs_new_nopar:cNn}
% \begin{macro}{\cs_new_nopar:cNx}
% \begin{macro}{\cs_gnew_nopar:NNn}
% \begin{macro}{\cs_gnew_nopar:NNx}
% \begin{macro}{\cs_gnew_nopar:cNn}
% \begin{macro}{\cs_gnew_nopar:cNx}
%   Defining macros without delimited arguments is now relatively
%   easy. First local and global versions of the usual |\cs_set_nopar:Npn|
%   operation.
%    \begin{macrocode}
\cs_new_nopar:Npn \cs_set_nopar:NNn { \cs_set_aux:NNnn \cs_set_nopar:Npn }
\cs_new_nopar:Npn \cs_set_nopar:NNx { \cs_set_aux:NNnn \cs_set_nopar:Npx }
\cs_new_nopar:Npn \cs_set_nopar:cNn { \cs_set_aux:Ncnn \cs_set_nopar:Npn }
\cs_new_nopar:Npn \cs_set_nopar:cNx { \cs_set_aux:Ncnn \cs_set_nopar:Npx }
\cs_new_nopar:Npn \cs_gset_nopar:NNn { \cs_set_aux:NNnn \cs_gset_nopar:Npn }
\cs_new_nopar:Npn \cs_gset_nopar:NNx { \cs_set_aux:NNnn \cs_gset_nopar:Npx }
\cs_new_nopar:Npn \cs_gset_nopar:cNn { \cs_set_aux:Ncnn \cs_gset_nopar:Npn }
\cs_new_nopar:Npn \cs_gset_nopar:cNx { \cs_set_aux:Ncnn \cs_gset_nopar:Npx }
\cs_new_nopar:Npn \cs_new_nopar:NNn { \cs_set_aux:NNnn \cs_new_nopar:Npn }
\cs_new_nopar:Npn \cs_new_nopar:NNx { \cs_set_aux:NNnn \cs_new_nopar:Npx }
\cs_new_nopar:Npn \cs_new_nopar:cNn { \cs_set_aux:Ncnn \cs_new_nopar:Npn }
\cs_new_nopar:Npn \cs_new_nopar:cNx { \cs_set_aux:Ncnn \cs_new_nopar:Npx }
\cs_new_nopar:Npn \cs_gnew_nopar:NNn { \cs_set_aux:NNnn \cs_gnew_nopar:Npn }
\cs_new_nopar:Npn \cs_gnew_nopar:NNx { \cs_set_aux:NNnn \cs_gnew_nopar:Npx }
\cs_new_nopar:Npn \cs_gnew_nopar:cNn { \cs_set_aux:Ncnn \cs_gnew_nopar:Npn }
\cs_new_nopar:Npn \cs_gnew_nopar:cNx { \cs_set_aux:Ncnn \cs_gnew_nopar:Npx }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\cs_set:NNn}
% \begin{macro}{\cs_set:NNx}
% \begin{macro}{\cs_set:cNn}
% \begin{macro}{\cs_set:cNx}
% \begin{macro}{\cs_gset:NNn}
% \begin{macro}{\cs_gset:NNx}
% \begin{macro}{\cs_gset:cNn}
% \begin{macro}{\cs_gset:cNx}
% \begin{macro}{\cs_new:NNn}
% \begin{macro}{\cs_new:NNx}
% \begin{macro}{\cs_new:cNn}
% \begin{macro}{\cs_new:cNx}
% \begin{macro}{\cs_gnew:NNn}
% \begin{macro}{\cs_gnew:NNx}
% \begin{macro}{\cs_gnew:cNn}
% \begin{macro}{\cs_gnew:cNx}
% Long versions of the above.
%    \begin{macrocode}
\cs_new_nopar:Npn \cs_set:NNn { \cs_set_aux:NNnn \cs_set:Npn }
\cs_new_nopar:Npn \cs_set:NNx { \cs_set_aux:NNnn \cs_set:Npx }
\cs_new_nopar:Npn \cs_set:cNn { \cs_set_aux:Ncnn \cs_set:Npn }
\cs_new_nopar:Npn \cs_set:cNx { \cs_set_aux:Ncnn \cs_set:Npx }
\cs_new_nopar:Npn \cs_gset:NNn { \cs_set_aux:NNnn \cs_gset:Npn }
\cs_new_nopar:Npn \cs_gset:NNx { \cs_set_aux:NNnn \cs_gset:Npx }
\cs_new_nopar:Npn \cs_gset:cNn { \cs_set_aux:Ncnn \cs_gset:Npn }
\cs_new_nopar:Npn \cs_gset:cNx { \cs_set_aux:Ncnn \cs_gset:Npx }
\cs_new_nopar:Npn \cs_new:NNn { \cs_set_aux:NNnn \cs_new:Npn }
\cs_new_nopar:Npn \cs_new:NNx { \cs_set_aux:NNnn \cs_new:Npx }
\cs_new_nopar:Npn \cs_new:cNn { \cs_set_aux:Ncnn \cs_new:Npn }
\cs_new_nopar:Npn \cs_new:cNx { \cs_set_aux:Ncnn \cs_new:Npx }
\cs_new_nopar:Npn \cs_gnew:NNn { \cs_set_aux:NNnn \cs_gnew:Npn }
\cs_new_nopar:Npn \cs_gnew:NNx { \cs_set_aux:NNnn \cs_gnew:Npx }
\cs_new_nopar:Npn \cs_gnew:cNn { \cs_set_aux:Ncnn \cs_gnew:Npn }
\cs_new_nopar:Npn \cs_gnew:cNx { \cs_set_aux:Ncnn \cs_gnew:Npx }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% \begin{macro}{\cs_set_protected_nopar:NNn}
% \begin{macro}{\cs_set_protected_nopar:NNx}
% \begin{macro}{\cs_set_protected_nopar:cNn}
% \begin{macro}{\cs_set_protected_nopar:cNx}
% \begin{macro}{\cs_gset_protected_nopar:NNn}
% \begin{macro}{\cs_gset_protected_nopar:NNx}
% \begin{macro}{\cs_gset_protected_nopar:cNn}
% \begin{macro}{\cs_gset_protected_nopar:cNx}
% \begin{macro}{\cs_new_protected_nopar:NNn}
% \begin{macro}{\cs_new_protected_nopar:NNx}
% \begin{macro}{\cs_new_protected_nopar:cNn}
% \begin{macro}{\cs_new_protected_nopar:cNx}
% \begin{macro}{\cs_gnew_protected_nopar:NNn}
% \begin{macro}{\cs_gnew_protected_nopar:NNx}
% \begin{macro}{\cs_gnew_protected_nopar:cNn}
% \begin{macro}{\cs_gnew_protected_nopar:cNx}
% Protected versions of the above.
%    \begin{macrocode}
\cs_new_nopar:Npn \cs_set_protected_nopar:NNn { \cs_set_aux:NNnn \cs_set_protected_nopar:Npn }
\cs_new_nopar:Npn \cs_set_protected_nopar:NNx { \cs_set_aux:NNnn \cs_set_protected_nopar:Npx }
\cs_new_nopar:Npn \cs_set_protected_nopar:cNn { \cs_set_aux:Ncnn \cs_set_protected_nopar:Npn }
\cs_new_nopar:Npn \cs_set_protected_nopar:cNx { \cs_set_aux:Ncnn \cs_set_protected_nopar:Npx }
\cs_new_nopar:Npn \cs_gset_protected_nopar:NNn { \cs_set_aux:NNnn \cs_gset_protected_nopar:Npn }
\cs_new_nopar:Npn \cs_gset_protected_nopar:NNx { \cs_set_aux:NNnn \cs_gset_protected_nopar:Npx }
\cs_new_nopar:Npn \cs_gset_protected_nopar:cNn { \cs_set_aux:Ncnn \cs_gset_protected_nopar:Npn }
\cs_new_nopar:Npn \cs_gset_protected_nopar:cNx { \cs_set_aux:Ncnn \cs_gset_protected_nopar:Npx }
\cs_new_nopar:Npn \cs_new_protected_nopar:NNn { \cs_set_aux:NNnn \cs_new_protected_nopar:Npn }
\cs_new_nopar:Npn \cs_new_protected_nopar:NNx { \cs_set_aux:NNnn \cs_new_protected_nopar:Npx }
\cs_new_nopar:Npn \cs_new_protected_nopar:cNn { \cs_set_aux:Ncnn \cs_new_protected_nopar:Npn }
\cs_new_nopar:Npn \cs_new_protected_nopar:cNx { \cs_set_aux:Ncnn \cs_new_protected_nopar:Npx }
\cs_new_nopar:Npn \cs_gnew_protected_nopar:NNn { \cs_set_aux:NNnn \cs_gnew_protected_nopar:Npn }
\cs_new_nopar:Npn \cs_gnew_protected_nopar:NNx { \cs_set_aux:NNnn \cs_gnew_protected_nopar:Npx }
\cs_new_nopar:Npn \cs_gnew_protected_nopar:cNn { \cs_set_aux:Ncnn \cs_gnew_protected_nopar:Npn }
\cs_new_nopar:Npn \cs_gnew_protected_nopar:cNx { \cs_set_aux:Ncnn \cs_gnew_protected_nopar:Npx }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\cs_set_protected:NNn}
% \begin{macro}{\cs_set_protected:NNx}
% \begin{macro}{\cs_set_protected:cNn}
% \begin{macro}{\cs_set_protected:cNx}
% \begin{macro}{\cs_gset_protected:NNn}
% \begin{macro}{\cs_gset_protected:NNx}
% \begin{macro}{\cs_gset_protected:cNn}
% \begin{macro}{\cs_gset_protected:cNx}
% \begin{macro}{\cs_new_protected:NNn}
% \begin{macro}{\cs_new_protected:NNx}
% \begin{macro}{\cs_new_protected:cNn}
% \begin{macro}{\cs_new_protected:cNx}
% \begin{macro}{\cs_gnew_protected:NNn}
% \begin{macro}{\cs_gnew_protected:NNx}
% \begin{macro}{\cs_gnew_protected:cNn}
% \begin{macro}{\cs_gnew_protected:cNx}
% And finally both long and protected.
%    \begin{macrocode}
\cs_new_nopar:Npn \cs_set_protected:NNn { \cs_set_aux:NNnn \cs_set_protected:Npn }
\cs_new_nopar:Npn \cs_set_protected:NNx { \cs_set_aux:NNnn \cs_set_protected:Npx }
\cs_new_nopar:Npn \cs_set_protected:cNn { \cs_set_aux:Ncnn \cs_set_protected:Npn }
\cs_new_nopar:Npn \cs_set_protected:cNx { \cs_set_aux:Ncnn \cs_set_protected:Npx }
\cs_new_nopar:Npn \cs_gset_protected:NNn { \cs_set_aux:NNnn \cs_gset_protected:Npn }
\cs_new_nopar:Npn \cs_gset_protected:NNx { \cs_set_aux:NNnn \cs_gset_protected:Npx }
\cs_new_nopar:Npn \cs_gset_protected:cNn { \cs_set_aux:Ncnn \cs_gset_protected:Npn }
\cs_new_nopar:Npn \cs_gset_protected:cNx { \cs_set_aux:Ncnn \cs_gset_protected:Npx }
\cs_new_nopar:Npn \cs_new_protected:NNn {
  \cs_set_aux:NNnn \cs_new_protected:Npn }
\cs_new_nopar:Npn \cs_new_protected:NNx {
  \cs_set_aux:NNnn \cs_new_protected:Npx }
\cs_new_nopar:Npn \cs_new_protected:cNn {
  \cs_set_aux:Ncnn \cs_new_protected:Npn }
\cs_new_nopar:Npn \cs_new_protected:cNx {
  \cs_set_aux:Ncnn \cs_new_protected:Npx }
\cs_new_nopar:Npn \cs_gnew_protected:NNn {
  \cs_set_aux:NNnn \cs_gnew_protected:Npn }
\cs_new_nopar:Npn \cs_gnew_protected:NNx {
  \cs_set_aux:NNnn \cs_gnew_protected:Npx }
\cs_new_nopar:Npn \cs_gnew_protected:cNn {
  \cs_set_aux:Ncnn \cs_gnew_protected:Npn }
\cs_new_nopar:Npn \cs_gnew_protected:cNx {
  \cs_set_aux:Ncnn \cs_gnew_protected:Npx }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% 
% \subsubsection{Copying definitions}
%
% \begin{macro}{\cs_set_eq:NN}
% \begin{macro}{\cs_set_eq:cN}
% \begin{macro}{\cs_set_eq:Nc}
% \begin{macro}{\cs_set_eq:cc}
%    These macros allow us to copy the definition of a control sequence
%    to another control sequence.
%
%    The |=| sign allows us to define funny char tokens like |=|
%    itself or \verb*= = with this function. For the definition of
%    |\c_space_chartok{~}| to work we need the |~| after the |=|.
%
%    |\cs_set_eq:NN| is long to avoid problems with a literal argument of |\par|.
%    While |\cs_new_eq:NN| will probably never be correct with a first argument 
%    of |\par|, define it long in order to throw an `already defined' error 
%    rather than `runaway argument'.
%
%    The |c| variants are not protected in order for their arguments to
%    be constructed in the correct context.
%
%    \begin{macrocode}
\cs_new_protected:Npn \cs_set_eq:NN #1 { \cs_set_eq:NwN #1=~ }
\cs_new_nopar:Npn \cs_set_eq:cN { \exp_args:Nc  \cs_set_eq:NN }
\cs_new_nopar:Npn \cs_set_eq:Nc { \exp_args:NNc \cs_set_eq:NN }
\cs_new_nopar:Npn \cs_set_eq:cc { \exp_args:Ncc \cs_set_eq:NN }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\cs_new_eq:NN}
% \begin{macro}{\cs_new_eq:cN}
% \begin{macro}{\cs_new_eq:Nc}
% \begin{macro}{\cs_new_eq:cc}
%    \begin{macrocode}
\cs_new_protected:Npn \cs_new_eq:NN #1 {
  \chk_if_new_cs:N #1
  \cs_set_eq:NN #1
}
\cs_new_nopar:Npn \cs_new_eq:cN { \exp_args:Nc  \cs_new_eq:NN }
\cs_new_nopar:Npn \cs_new_eq:Nc { \exp_args:NNc \cs_new_eq:NN }
\cs_new_nopar:Npn \cs_new_eq:cc { \exp_args:Ncc \cs_new_eq:NN }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\cs_gset_eq:NN}
% \begin{macro}{\cs_gset_eq:cN}
% \begin{macro}{\cs_gset_eq:Nc}
% \begin{macro}{\cs_gset_eq:cc}
%    \begin{macrocode}
\cs_new_protected:Npn \cs_gset_eq:NN { \pref_global:D  \cs_set_eq:NN }
\cs_new_nopar:Npn                \cs_gset_eq:Nc { \exp_args:NNc  \cs_gset_eq:NN }
\cs_new_nopar:Npn                \cs_gset_eq:cN { \exp_args:Nc   \cs_gset_eq:NN }
\cs_new_nopar:Npn                \cs_gset_eq:cc { \exp_args:Ncc  \cs_gset_eq:NN }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\cs_gnew_eq:NN}
% \begin{macro}{\cs_gnew_eq:cN}
% \begin{macro}{\cs_gnew_eq:Nc}
% \begin{macro}{\cs_gnew_eq:cc}
%    \begin{macrocode}
\cs_new_protected:Npn \cs_gnew_eq:NN #1 {
  \chk_if_new_cs:N #1
  \pref_global:D \cs_set_eq:NN #1
}
\cs_new_nopar:Npn \cs_gnew_eq:cN { \exp_args:Nc  \cs_gnew_eq:NN }
\cs_new_nopar:Npn \cs_gnew_eq:Nc { \exp_args:NNc \cs_gnew_eq:NN }
\cs_new_nopar:Npn \cs_gnew_eq:cc { \exp_args:Ncc \cs_gnew_eq:NN }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% \begin{macro}[aux]{\def_test_function_aux:Nnnn}
% \begin{macro}[aux]{\def_test_function_aux:Nnnx}
% \begin{macro}{\def_test_function:npn}
% \begin{macro}{\def_test_function:npx}
% \begin{macro}{\def_long_test_function:npn}
% \begin{macro}{\def_long_test_function:npx}
% \begin{macro}{\def_test_function_new:npn}
% \begin{macro}{\def_test_function_new:npx}
% \begin{macro}{\def_long_test_function_new:npn}
% \begin{macro}{\def_long_test_function_new:npx}
%   We will often be defining several almost identical TF, T and F
%   type functions so it makes sense for us to define a small function
%   that will do this for us so that we are less likely to introduce
%   typos (it does tend to happen). By doing it in two steps as below
%   we can still retain a simple interface where you write the \TeX\
%   parameters as usual. Just don't do it when you're already within a
%   conditional!
%
%   I think the ways of exiting conditionals below are as fast as they
%   get. Using |\reverse_if:N| instead of |\else:| didn't give any
%   difference I could measure.
%    \begin{macrocode}
\cs_new:Npn \def_test_function_aux:Nnnn #1#2#3#4{
  #1 {#2TF} #3 {#4
    \exp_after:wN\use_i:nn\else:\exp_after:wN\use_ii:nn\fi:}
  #1 {#2FT} #3 {#4
    \exp_after:wN\use_ii:nn\else:\exp_after:wN\use_i:nn\fi:}
  #1 {#2T} #3 {#4
    \else:\exp_after:wN\use_none:nn\fi:\use:n}
  #1 {#2F} #3 {#4
    \exp_after:wN\use_none:nn\fi:\use:n}}
\cs_new:Npn \def_test_function_aux:Nnnx #1#2#3#4{
  #1 {#2TF} #3 {#4
    \exp_not:n{\exp_after:wN\use_i:nn\else:\exp_after:wN\use_ii:nn\fi:}}
  #1 {#2FT} #3 {#4
    \exp_not:n{\exp_after:wN\use_ii:nn\else:\exp_after:wN\use_i:nn\fi:}}
  #1 {#2T} #3 {#4
    \exp_not:n{\else:\exp_after:wN\use_none:nn\fi:\use:n}}
  #1 {#2F} #3 {#4
    \exp_not:n{\exp_after:wN\use_none:nn\fi:\use:n}}}
\cs_new:Npn \def_test_function:npn #1#2#{
  \def_test_function_aux:Nnnn \cs_set_nopar:cpn {#1}{#2}
}
\cs_new:Npn \def_test_function:npx #1#2#{
  \def_test_function_aux:Nnnx \cs_set_nopar:cpx {#1}{#2}
}
\cs_new:Npn \def_long_test_function:npn #1#2#{
  \def_test_function_aux:Nnnn \cs_set:cpn {#1}{#2}
}
\cs_new:Npn \def_long_test_function:npx #1#2#{
  \def_test_function_aux:Nnnx \cs_set:cpx {#1}{#2}
}
\cs_new:Npn \def_test_function_new:npn #1#2#{
  \def_test_function_aux:Nnnn \cs_new_nopar:cpn {#1}{#2}
}
\cs_new:Npn \def_long_test_function_new:npn #1#2#{
  \def_test_function_aux:Nnnn \cs_new:cpn {#1}{#2}
}
\cs_new:Npn \def_test_function_new:npx #1#2#{
  \def_test_function_aux:Nnnx \cs_new_nopar:cpx {#1}{#2}
}
\cs_new:Npn \def_long_test_function_new:npx #1#2#{
  \def_test_function_aux:Nnnx \cs_new:cpx {#1}{#2}
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsubsection{Further checking}
%
% \begin{macro}[TF]{\cs_if_free:N}
%    The old |\@ifundefined| of \LaTeX{} 2.09 is re-implemented in the
%    function |\cs_if_free:cTF|, again in a way that |\else:| and |\fi:|
%    are removed. In this implementation this is absolutely
%    necessary because functions inside the conditional parts expect
%    to read further input from outside the conditional.  Actually,
%    the first part of the code below is more general, since it checks
%    \m{csnames} directly and therefore allows both |\scan_stop:| and
%    |\c_undefined|.
%    \begin{macrocode}
\def_long_test_function_new:npn {cs_if_free:N}#1{\if:w\cs_if_free_p:N #1}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[TF]{\cs_if_free:c}
%    We have to implement the |c| variants `by hand' because a different
%    test is necessary and I don't want the overhead for the test with
%    |\if:w|.  What a mistake Don made by making this a
%    feature of |\cs:w|. If I'm not totally mistaken this
%    feature alone has cost him more than 600\$ for bug-checks.
%    \begin{macrocode}
\def_long_test_function_new:npn {cs_if_free:c}#1{
  \exp_after:wN \if_meaning:w \cs:w#1\cs_end: \scan_stop:}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[TF]{\cs_if_really_free:c}
%   These versions are for special control sequences that can only be
%   formed through |\cs:w ... \cs_end:|. They do not turn the control
%   sequence formed into |\scan_stop:|.
%    \begin{macrocode}
\def_long_test_function_new:npn {cs_if_really_free:c}#1{
  \reverse_if:N\if_cs_exist:w #1\cs_end:}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[TF]{\cs_if_exist:N}
% \begin{macro}[TF]{\cs_if_exist:c}
% \begin{macro}[TF]{\cs_if_really_exist:c}
%   Now the same functions but with reverse logic: test if the control
%   sequence exists.
%    \begin{macrocode}
\def_long_test_function_new:npn {cs_if_exist:N}#1{\if:w\cs_if_exist_p:N #1}
\def_long_test_function_new:npn {cs_if_exist:c}#1{
  \exp_after:wN\reverse_if:N
  \exp_after:wN \if_meaning:w \cs:w#1\cs_end: \scan_stop:}
\def_long_test_function_new:npn {cs_if_really_exist:c}#1{
  \if_cs_exist:w #1\cs_end:}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% \subsubsection{Freeing memory}
%
% \begin{macro}{\cs_gundefine:N }
%    The following function is used to free the main memory from the
%    definition of some function that isn't in use any longer.
%    \begin{macrocode}
\cs_new_nopar:Npn \cs_gundefine:N #1{\cs_gset_eq:NN #1\c_undefined}
%    \end{macrocode}
% \end{macro}
%
%
%  \subsubsection{Engine specific definitions}
%
% \begin{macro}{\c_xetex_is_engine_bool,\c_luatex_is_engine_bool}
% \begin{macro}[TF]{\xetex_if_engine:,\luatex_if_engine:}
%  In some cases it will be useful to know which engine we're running.
%    \begin{macrocode}
\if_cs_exist:N \xetex_version:D
  \cs_new_eq:NN \c_xetex_is_engine_bool \c_true
\else:
  \cs_new_eq:NN \c_xetex_is_engine_bool \c_false
\fi:
\if_cs_exist:N \luatex_directlua:D
  \cs_new_eq:NN \c_luatex_is_engine_bool \c_true
\else:
  \cs_new_eq:NN \c_luatex_is_engine_bool \c_false
\fi:
\def_test_function_new:npn {xetex_if_engine:} {\if:w \c_xetex_is_engine_bool}
\def_test_function_new:npn {luatex_if_engine:}{\if:w \c_luatex_is_engine_bool}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
%
% \subsubsection{Selecting tokens}
%
% \begin{macro}{\use:c}
%    This macro grabs its argument and returns a csname from it.
%    \begin{macrocode}
\cs_new_nopar:Npn \use:c #1 { \cs:w#1\cs_end: }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\use:nn}
% \begin{macro}{\use:nnn}
% \begin{macro}{\use:nnnn}
%    These macro grabs its arguments and returns it back to the input
%    (with outer braces removed). "\use:n" is defined earlier for bootstrapping.
%    \begin{macrocode}
\cs_new:Npn \use:nn   #1#2     {#1#2}
\cs_new:Npn \use:nnn  #1#2#3   {#1#2#3}
\cs_new:Npn \use:nnnn #1#2#3#4 {#1#2#3#4}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\use_i:nn}
% \begin{macro}{\use_ii:nn}
%    These macros are needed to provide functions with true and false
%    cases, as introduced by Michael some time ago. By using
%    |\exp_after:wN| |\use_i:nn | |\else:| constructions it
%    is possible to write code where the true or false case is able to
%    access the following tokens from the input stream, which is not
%    possible if the |\c_true| syntax is used.
%    \begin{macrocode}
\cs_new:Npn \use_i:nn  #1#2 {#1}
\cs_new:Npn \use_ii:nn #1#2 {#2}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
%
% \begin{macro}{\use_i:nnn}
% \begin{macro}{\use_ii:nnn}
% \begin{macro}{\use_iii:nnn}
% \begin{macro}{\use_i:nnnn}
% \begin{macro}{\use_ii:nnnn}
% \begin{macro}{\use_iii:nnnn}
% \begin{macro}{\use_iv:nnnn}
% \begin{macro}{\use_i_ii:nnn}
%    We also need something for picking up arguments from a longer
%    list.
%    \begin{macrocode}
\cs_new:NNn \use_i:nnn    3{#1}
\cs_new:NNn \use_ii:nnn   3{#2}
\cs_new:NNn \use_iii:nnn  3{#3}
\cs_new:NNn \use_i:nnnn   4{#1}
\cs_new:NNn \use_ii:nnnn  4{#2}
\cs_new:NNn \use_iii:nnnn 4{#3}
\cs_new:NNn \use_iv:nnnn  4{#4}
\cs_new:NNn \use_i_ii:nnn 3{#1#2}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\use_none_delimit_by_q_nil:w}
% \begin{macro}{\use_none_delimit_by_q_stop:w}
% \begin{macro}{\use_none_delimit_by_q_recursion_stop:w}
%   Functions that gobble everything until they see either |\q_nil| or
%   |\q_stop| resp.
%    \begin{macrocode}
\cs_new:Npn \use_none_delimit_by_q_nil:w #1\q_nil{}
\cs_new:Npn \use_none_delimit_by_q_stop:w #1\q_stop{}
\cs_new:Npn \use_none_delimit_by_q_recursion_stop:w #1 \q_recursion_stop {}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\use_i_delimit_by_q_nil:nw}
% \begin{macro}{\use_i_delimit_by_q_stop:nw}
% \begin{macro}{\use_i_delimit_by_q_recursion_stop:nw}
%   Same as above but execute first argument after gobbling. Very
%   useful when you need to skip the rest of a mapping sequence but
%   want an easy way to control what should be expanded next.
%    \begin{macrocode}
\cs_new:Npn \use_i_delimit_by_q_nil:nw #1#2\q_nil{#1}
\cs_new:Npn \use_i_delimit_by_q_stop:nw #1#2\q_stop{#1}
\cs_new:Npn \use_i_delimit_by_q_recursion_stop:nw #1#2 \q_recursion_stop {#1}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% \begin{macro}{\use_i_after_fi:nw}
% \begin{macro}{\use_i_after_else:nw}
% \begin{macro}{\use_i_after_or:nw}
% \begin{macro}{\use_i_after_orelse:nw}
%   Returns the first argument after ending the conditional.
%    \begin{macrocode}
\cs_new:Npn \use_i_after_fi:nw #1\fi:{\fi: #1}
\cs_new:Npn \use_i_after_else:nw #1\else:#2\fi:{\fi: #1}
\cs_new:Npn \use_i_after_or:nw #1\or: #2\fi: {\fi:#1}
\cs_new:Npn \use_i_after_orelse:nw #1 #2#3\fi: {\fi:#1}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsubsection{Gobbling tokens from input}
%
% \begin{macro}{\use_none:n}
% \begin{macro}{\use_none:nn}
% \begin{macro}{\use_none:nnn}
% \begin{macro}{\use_none:nnnn}
% \begin{macro}{\use_none:nnnnn}
% \begin{macro}{\use_none:nnnnnn}
% \begin{macro}{\use_none:nnnnnnn}
% \begin{macro}{\use_none:nnnnnnnn}
% \begin{macro}{\use_none:nnnnnnnnn}
%   To gobble tokens from the input we use a standard naming
%   convention: the number of tokens gobbled is given by the number of
%   |n|'s following the |:| in the name. Although defining
%   |\use_none:nnn| and above as separate calls of |\use_none:n| and
%   |\use_none:nn| is slightly faster, this is very non-intuitive to
%   the programmer who will assume that expanding such a function once
%   will take care of gobbling all the tokens in one go.
%    \begin{macrocode}
%\cs_new:NNn \use_none:n 1{}% moved earlier
\cs_new:NNn \use_none:nn 2{}
\cs_new:NNn \use_none:nnn 3{}
\cs_new:NNn \use_none:nnnn 4{}
\cs_new:NNn \use_none:nnnnn 5{}
\cs_new:NNn \use_none:nnnnnn 6{}
\cs_new:NNn \use_none:nnnnnnn 7{}
\cs_new:NNn \use_none:nnnnnnnn 8{}
\cs_new:NNn \use_none:nnnnnnnnn 9{}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% \subsubsection{Scratch functions}
%
% \begin{macro}{\prg_do_nothing:}
%    I don't think this function belongs here, but one place is as
%    good as any other. I want to use this function when I want to
%    express `no operation'. It is for example used in templates where
%    depending on the users settings we have to either select an function that
%    does something, or one that does nothing.
%    \begin{macrocode}
\cs_new_nopar:Npn \prg_do_nothing: {}
%    \end{macrocode}
% \end{macro}
%
%
% \subsubsection{Strings and input stream token lists}
%
% \begin{macro}{\cs_to_str:N}
% \begin{macro}[aux]{\cs_to_str_aux:w}
%   This converts a control sequence into the character string of its
%   name, removing the leading escape character. This turns out to be
%   a non-trivial matter as there a different cases:
%   \begin{itemize}
%   \item The usual case of a printable escape character;
%   \item the case of a non-printable escape characters, e.g., when
%   the value of |\tex_escapechar:D| is negative;
%   \item when the escape character is a space.
%   \end{itemize}
%   The route chosen is this: If |\token_to_str:N \a| produces a
%   non-space escape char, then this will produce two tokens. If the
%   escape char is non-printable, only one token is produced. If the
%   escape char is a space, then a space token plus one token
%   character token is produced. If we augment the result of this
%   expansion with the letters |ax| we get the following three
%   scenarios (with \meta{X} being a printable non-space escape
%   character):
%   \begin{itemize}
%   \item \meta{X}"aax" 
%   \item "aax" 
%   \item " aax" 
%   \end{itemize}
% In the second and third case, putting an auxiliary function in front
% reading undelimited arguments will treat them the same, removing the
% space token for us automatically. Therefore, if we test the second
% and third argument of what such a function reads, in case 1 we will
% get true and in cases 2 and 3 we will get false. If we choose to
% optimize for the usual case of a printable escape char, we can do it
% like this (again getting TeX to remove the leading space for us): 
%    \begin{macrocode}
\cs_new_nopar:Npn \cs_to_str:N {
  \if:w \exp_after:wN \cs_str_aux:w\token_to_str:N \a ax\q_nil 
  \else: 
    \exp_after:wN \exp_after:wN\exp_after:wN \use_ii:nn 
  \fi: 
  \exp_after:wN \use_none:n \token_to_str:N 
}
\cs_new:Npn \cs_str_aux:w #1#2#3#4\q_nil{#2#3}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% \begin{macro}{\cs_get_function_name:N}
% This function takes a function name, strips it of its argument specification,
% and returns it with the escape char removed. For example, "\foo_bar:xyz" as
% input becomes "foo_bar".
%
% Could do error checking (in case a control sequence without a ":" is used) 
% but for now I'm not worrying about it.
%    \begin{macrocode}
\cs_new:Npn \cs_get_function_name:N #1 {
  \exp_after:wN \cs_get_function_name:w \token_to_str:N #1 \q_nil
}
%    \end{macrocode}
% Can't use a literal ":" because it has the wrong catcode here, so it's
% transformed from "@" with "\tex_lowercase:D".
%    \begin{macrocode}
\group_begin:
  \tex_lccode:D  `\@ = `\: \scan_stop:
  \tex_catcode:D `\@ = 12  \scan_stop:
\tex_lowercase:D {
  \group_end:
  \cs_set:Npn \cs_get_function_name:w #1 @ #2 \q_nil {
    \cs_to_str:N #1
  }
}
%    \end{macrocode}
% \end{macro}
%
%
%
% \begin{macro}[TF]{\cs_if_eq:NN}
% \begin{macro}[TF]{\cs_if_eq:cN}
% \begin{macro}[TF]{\cs_if_eq:Nc}
% \begin{macro}[TF]{\cs_if_eq:cc}
% Check if two control sequences are identical.
% TODO: needs predicate
%    \begin{macrocode}
\def_test_function_new:npn {cs_if_eq:NN} #1#2{\if_meaning:w #1#2}
\cs_new_nopar:Npn \cs_if_eq:cNTF {\exp_args:Nc  \cs_if_eq:NNTF}
\cs_new_nopar:Npn \cs_if_eq:cNFT {\exp_args:Nc  \cs_if_eq:NNFT}
\cs_new_nopar:Npn \cs_if_eq:cNT  {\exp_args:Nc  \cs_if_eq:NNT}
\cs_new_nopar:Npn \cs_if_eq:cNF  {\exp_args:Nc  \cs_if_eq:NNF}
\cs_new_nopar:Npn \cs_if_eq:NcTF {\exp_args:NNc \cs_if_eq:NNTF}
\cs_new_nopar:Npn \cs_if_eq:NcFT {\exp_args:NNc \cs_if_eq:NNFT}
\cs_new_nopar:Npn \cs_if_eq:NcT  {\exp_args:NNc \cs_if_eq:NNT}
\cs_new_nopar:Npn \cs_if_eq:NcF  {\exp_args:NNc \cs_if_eq:NNF}
\cs_new_nopar:Npn \cs_if_eq:ccTF {\exp_args:Ncc \cs_if_eq:NNTF}
\cs_new_nopar:Npn \cs_if_eq:ccFT {\exp_args:Ncc \cs_if_eq:NNFT}
\cs_new_nopar:Npn \cs_if_eq:ccT  {\exp_args:Ncc \cs_if_eq:NNT}
\cs_new_nopar:Npn \cs_if_eq:ccF  {\exp_args:Ncc \cs_if_eq:NNF}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% Finally some code that is needed as we do not distribute the file
% module at the moment (so we simply define the needed function via an
% existing \LaTeX{} command) and some other stuff which was set up
% elsewhere, in undistributed modules.
%    \begin{macrocode}
\cs_new_nopar:Npn\file_not_found:nTF #1#2#3{\IfFileExists{#1}{#3}{#2}}
%    \end{macrocode}
%
%
% \subsection{Compatibility definitions}
%
% While renaming various commands the old definitions will be kept below so
% that one can hope for coding staying functional even during the updates.
% In the end these definitions will then be deleted.
%
%    \begin{macrocode}
%    \end{macrocode}
%
% \subsection{Loading the next module in sequence}
%    \begin{macrocode}
\RequirePackage{l3expan}
%    \end{macrocode}
%    
%    \begin{macrocode}
%</initex|package>
%    \end{macrocode}
% 
%    \begin{macrocode}
%<*showmemory>
\showMemUsage
%</showmemory>
%    \end{macrocode}
%
% \Finale
% \PrintIndex
%
% \endinput
