% \iffalse
%% File: l3fp.dtx Copyright (C) 2010 LaTeX3 project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the ``expl3 bundle'' (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%<*driver|package>
\RequirePackage{l3names}
%</driver|package>
%\fi
\GetIdInfo$Id$
  {L3 Experimental floating-point operations}
%\iffalse
%<*driver>
%\fi
\ProvidesFile{\filename.\filenameext}
  [\filedate\space v\fileversion\space\filedescription]
%\iffalse
\documentclass[full]{l3doc}
\begin{document}
  \DocInput{l3fp.dtx}
\end{document}
%</driver>
% \fi
%
% \title{The \textsf{l3fp} package\thanks{This file
%         has version number \fileversion, last
%         revised \filedate.}\\
% Floating point arithmetic}
% \author{\Team}
% \date{\filedate}
% \maketitle
%
%\begin{documentation}
%
%\section{Floating point numbers}
%
% A floating point number is one which is stored as a mantissa and
% a separate exponent. This module implements arithmetic using radix 
% \( 10 \) floating point numbers. This means that the mantissa should
% be a real number in the range \( 1 \le \string| x \string| < 10 \), 
% with the 
% exponent given as an integer between \( -99 \) and \( 99 \). In the
% input, the exponent part is represented starting with an \texttt{e}.
% As this is a low-level module, error-checking is minimal. Numbers 
% which are too large for the floating point unit to handle will result
% in errors, either from \TeX\ or from \LaTeX. The \LaTeX\ code does not 
% check that the input will not overflow, hence the possibility of a 
% \TeX\ error. On the other hand, numbers which are too small will be 
% dropped, which will mean that extra decimal digits will simply be 
% lost.
% 
% When parsing numbers, any missing parts will be interpreted as 
% zero. So for example
%\begin{verbatim}
%  \fp_set:Nn \l_my_fp { }
%  \fp_set:Nn \l_my_fp { . }
%  \fp_set:Nn \l_my_fp { - }
%\end{verbatim} 
% will all be interpreted as zero values without raising an error.
% 
% Operations which give an undefined result (such as division by
% \( 0 \)) will not lead to errors. Instead special marker values are 
% returned, which can be tested for using fr example 
% \cs{fp_if_undefined:N(TF)}. In this way it is possible to work with
% asymptotic functions without first checking the input. If these
% special values are carried forward in calculations they will be
% treated as \( 0 \).
% 
% Floating point numbers are stored in the \texttt{fp} floating point 
% variable type. This has a standard range of functions for
% variable management.
% 
%\subsection{Constants}
% 
%\begin{variable}{ \c_zero_fp }
% A permanently zero floating point variable.
%\end{variable}
%
%\begin{variable}{ \c_undefined_fp }
% A special marker floating point variable representing the result of
% an operation which does not give a defined result (such as division
% by \( 0 \)).
%\end{variable}
% 
%\subsection{Floating-point variables}
% 
%\begin{function}{ 
%  \fp_new:N |
%  \fp_new:c |
%}
%  \begin{syntax}
%    \cs{fp_new:N} \meta{floating point variable}
%  \end{syntax}
%  Creates a new \meta{floating point variable} or raises an error if
%  the name is already taken. The declaration global. The 
%  \meta{floating point} will initially be set to  "+0.000000000e0"
%  (the zero floating point).
%\end{function}
%
%\begin{function}{ 
%  \fp_set_eq:NN |
%  \fp_set_eq:cN |
%  \fp_set_eq:Nc |
%  \fp_set_eq:cc |
%}
%  \begin{syntax}
%    \cs{fp_set_eq:NN} \meta{fp var1} \meta{fp var2}
%  \end{syntax}
%  Sets the value of \meta{floating point variable1} equal to that of
%  \meta{floating point variable2}. This assignment is restricted to the 
%  current \TeX\ group level.
%\end{function}
%
%\begin{function}{ 
%  \fp_gset_eq:NN |
%  \fp_gset_eq:cN |
%  \fp_gset_eq:Nc |
%  \fp_gset_eq:cc |
%}
%  \begin{syntax}
%    \cs{fp_gset_eq:NN} \meta{fp var1} \meta{fp var2}
%  \end{syntax}
%  Sets the value of \meta{floating point variable1} equal to that of
%  \meta{floating point variable2}. This assignment is global and so is
%  not limited by the current \TeX\ group level.
%\end{function}
%
%\begin{function}{ 
%  \fp_zero:N  |
%  \fp_zero:c  |
%}
%  \begin{syntax}
%    \cs{fp_zero:N} \meta{floating point variable}
%  \end{syntax}
%  Sets the \meta{floating point variable} to "+0.000000000e0" within 
%  the current scope.
%\end{function}
%
%\begin{function}{ 
%  \fp_gzero:N  |
%  \fp_gzero:c  |
%}
%  \begin{syntax}
%    \cs{fp_gzero:N} \meta{floating point variable}
%  \end{syntax}
%  Sets the \meta{floating point variable} to "+0.000000000e0" globally.
%\end{function}
%
%\begin{function}{ 
%  \fp_set:Nn |
%  \fp_set:cn |
%}
%  \begin{syntax}
%    \cs{fp_set:Nn} \meta{floating point variable} \Arg{value}
%  \end{syntax}
%  Sets the \meta{floating point variable} variable to \meta{value} 
%  within the scope of the current \TeX\ group.
%\end{function}
%
%\begin{function}{ 
%  \fp_gset:Nn |
%  \fp_gset:cn |
%}
%  \begin{syntax}
%    \cs{fp_gset:Nn} \meta{floating point variable} \Arg{value}
%  \end{syntax}
%  Sets the \meta{floating point variable} variable to \meta{value} 
%  globally.
%\end{function} 
%
%\begin{function}{ 
%  \fp_set_from_dim:Nn |
%  \fp_set_from_dim:cn |
%}
%  \begin{syntax}
%    \cs{fp_set_from_dim:Nn} \meta{floating point variable} \Arg{dimexpr}
%  \end{syntax}
%  Sets the \meta{floating point variable} to the distance represented
%  by the \meta{dimension expression} in the units points. This means
%  that distances given in other units are first converted to points
%  before being assigned to the \meta{floating point variable}. The 
%  assignment is local.
%\end{function}
%
%\begin{function}{ 
%  \fp_gset_from_dim:Nn |
%  \fp_gset_from_dim:cn |
%}
%  \begin{syntax}
%    \cs{fp_gset_from_dim:Nn} \meta{floating point variable} \Arg{dimexpr}
%  \end{syntax}
%  Sets the \meta{floating point variable} to the distance represented
%  by the \meta{dimension expression} in the units points. This means
%  that distances given in other units are first converted to points
%  before being assigned to the \meta{floating point variable}. The 
%  assignment is global.
%\end{function}
%
%\begin{function}{
%  \fp_use:N / (EXP) |
%  \fp_use:c / (EXP) |
%}
%  \begin{syntax}
%    \cs{fp_use:N} \meta{floating point variable}
%  \end{syntax}
%  Inserts the value of the \meta{floating point variable} into the
%  input stream. The value will be given as a real number without any
%  exponent part, and will always include a decimal point. For example,
%  \begin{verbatim}
%    \fp_new:Nn \test
%    \fp_set:Nn \test { 1.234 e 5 }
%    \fp_use:N \test
%  \end{verbatim}
%  will insert `\texttt{12345.00000}' into the input stream.
%  As illustrated, a floating point will always be inserted with ten
%  significant digits given. Very large and very small values will 
%  include additional zeros for place value.
%\end{function}
%
%\begin{function}{
%  \fp_show:N |
%  \fp_show:c |
%}
%  \begin{syntax}
%    \cs{fp_show:N} \meta{floating point variable}
%  \end{syntax}
%  Displays the content of the \meta{floating point variable} on the
%  terminal.
%\end{function}
%
%\subsection{Conversion to other formats}
%
% It is useful to be able to convert floating point variables to 
% other forms. These functions are expandable, so that the material
% can be used in a variety of contexts. The \cs{fp_use:N} function 
% should also be consulted in this context, as it will insert the
% value of the floating point variable as a real number.
%
%\begin{function}{
%  \fp_to_int:N / (EXP) |
%  \fp_to_int:c / (EXP) |
%}
%  \begin{syntax}
%    \cs{fp_to_int:N} \meta{floating point variable}
%  \end{syntax}
%  Inserts the integer value of the \meta{floating point variable}
%  into the input stream. The decimal part of the number will not be
%  included, but will be used to round the integer.
%\end{function}
%
%\begin{function}{
%  \fp_to_tl:N / (EXP) |
%  \fp_to_tl:c / (EXP) |
%}
%  \begin{syntax}
%    \cs{fp_to_tl:N} \meta{floating point variable}
%  \end{syntax}
%  Inserts a representation of the \meta{floating point variable} into
%  the input stream as a token list. The representation follows the
%  conventions of a pocket calculator:
%  \begin{center}
%    \ttfamily
%    \begin{tabular}{r@{.}lr@{.}l}
%      \toprule
%        \multicolumn{2}{l}{\rmfamily{Floating point value}} & 
%        \multicolumn{2}{l}{\rmfamily{Representation}} \\
%      \midrule
%         1 & 234000000000e0  &  1 & 234    \\
%        -1 & 234000000000e0  & -1 & 234    \\
%         1 & 234000000000e3  &  \multicolumn{2}{l}{1234} \\
%         1 & 234000000000e13 &  \multicolumn{2}{l}{1234e13} \\
%         1 & 234000000000e-1 & 0 & 1234   \\
%         1 & 234000000000e-2 & 0 & 01234  \\
%         1 & 234000000000e-3 & 1 & 234e-3 \\
%      \bottomrule
%    \end{tabular}
%  \end{center}
%  Notice that trailing zeros are removed in this process, and that 
%  numbers which do not require a decimal part do \emph{not} include
%  a decimal marker.
%\end{function}
%
%\subsection{Rounding floating point values}
%
% The module can round floating point values to either decimal places
% or significant figures using the usual method in which exact halves
% are rounded up.
%
%\begin{function}{
%  \fp_round_figures:Nn |
%  \fp_round_figures:cn |
%}
%  \begin{syntax}
%    \cs{fp_round_figures:Nn} \meta{floating point variable} \Arg{target}
%  \end{syntax}
%  Rounds the \meta{floating point variable} to the \meta{target} number
%  of significant figures (an integer expression). The rounding is 
%  carried out locally.
%\end{function}
%
%\begin{function}{
%  \fp_ground_figures:Nn |
%  \fp_ground_figures:cn |
%}
%  \begin{syntax}
%    \cs{fp_ground_figures:Nn} \meta{floating point variable} \Arg{target}
%  \end{syntax}
%  Rounds the \meta{floating point variable} to the \meta{target} number
%  of significant figures (an integer expression). The rounding is 
%  carried out globally.
%\end{function}
%
%\begin{function}{
%  \fp_round_places:Nn |
%  \fp_round_places:cn |
%}
%  \begin{syntax}
%    \cs{fp_round_places:Nn} \meta{floating point variable} \Arg{target}
%  \end{syntax}
%  Rounds the \meta{floating point variable} to the \meta{target} number
%  of decimal places (an integer expression). The rounding is 
%  carried out locally.
%\end{function}
%
%\begin{function}{
%  \fp_ground_places:Nn |
%  \fp_ground_places:cn |
%}
%  \begin{syntax}
%    \cs{fp_ground_places:Nn} \meta{floating point variable} \Arg{target}
%  \end{syntax}
%  Rounds the \meta{floating point variable} to the \meta{target} number
%  of decimal places (an integer expression). The rounding is 
%  carried out globally.
%\end{function}
%
%\subsection{Tests on floating-point values}
%
%\begin{function}{ 
%  \fp_if_undefined_p:N / (EXP)      |
%  \fp_if_undefined:N   / (EXP) (TF) |
%}
%  \begin{syntax}
%    \cs{fp_if_undefined_p:N} \meta{fixed-point}
%    \cs{fp_if_undefined:NTF} \meta{fixed-point} 
%    ~~\Arg{true code} \Arg{false code}
%  \end{syntax}
%  Tests if \meta{floating point} is undefined (\emph{i.e}.~equal to the
%  special \cs{c_undefined_fp} variable). The branching versions then
%  leave either \meta{true code} or \meta{false code} in the input 
%  stream, as appropriate to the truth of the test and the variant of 
%  the function chosen. The logical truth of the test is left in the 
%  input stream by the predicate version. 
%\end{function}
%
%\begin{function}{ 
%  \fp_if_zero_p:N / (EXP)      |
%  \fp_if_zero:N   / (EXP) (TF) |
%}
%  \begin{syntax}
%    \cs{fp_if_zero_p:N} \meta{fixed-point}
%    \cs{fp_if_zero:NTF} \meta{fixed-point} \Arg{true code} \Arg{false code}
%  \end{syntax}
%  Tests if \meta{floating point} is equal to zero (\emph{i.e}.~equal to 
%  the special \cs{c_zero_fp} variable). The branching versions then 
%  leave either \meta{true code} or \meta{false code} in the input 
%  stream, as appropriate to the truth of the test and the variant of 
%  the function chosen. The logical truth of the test is left in the 
%  input stream by the predicate version. 
%\end{function}
%
%\begin{function}{ 
%  \fp_compare:nNn / (TF) |
%  \fp_compare:NNN / (TF) |
%}
%  \begin{syntax}
%    \cs{fp_compare:nNnTF} \Arg{value1} \meta{relation} \Arg{value2}
%    ~~\Arg{true code} \Arg{false code}
%    \cs{fp_compare:NNNTF} \Arg{fp1} \meta{relation} \Arg{fp2}
%    ~~\Arg{true code} \Arg{false code}
%  \end{syntax}
%  Compares the two \meta{values} or \meta{floating points} based on the
%  \meta{relation} (\texttt{=}, \verb"<" or \verb">"), and leaves
%  either the \meta{true code} or \meta{false code} in the input stream, 
%  as appropriate to the truth of the test and the variant of the 
%  function chosen. The tests treat undefined floating points as zero, 
%  as the comparison is intended for real numbers only.
%\end{function}
%
%\subsection{Unary operations}
%
% The unary operations alter the value stored within an \texttt{fp}
% variable.
%
%\begin{function}{
%  \fp_abs:N |
%  \fp_abs:c |
%}
%  \begin{syntax}
%    \cs{fp_abs:N} \meta{floating point variable} 
%  \end{syntax}
%  Converts the \meta{floating point variable} to its absolute value, 
%  assigning the result within the current \TeX\ group.
%\end{function}
%
%\begin{function}{
%  \fp_gabs:N |
%  \fp_gabs:c |
%}
%  \begin{syntax}
%    \cs{fp_gabs:N} \meta{floating point variable} 
%  \end{syntax}
%  Converts the \meta{floating point variable} to its absolute value, 
%  assigning the result globally.
%\end{function}
%
%\begin{function}{
%  \fp_neg:N |
%  \fp_neg:c |
%}
%  \begin{syntax}
%    \cs{fp_neg:N} \meta{floating point variable} 
%  \end{syntax}
%  Reverse the sign of the \meta{floating point variable}, assigning the 
%  result within the current \TeX\ group.
%\end{function}
%
%\begin{function}{
%  \fp_gneg:N |
%  \fp_gneg:c |
%}
%  \begin{syntax}
%    \cs{fp_gneg:N} \meta{floating point variable} 
%  \end{syntax}
%  Reverse the sign of the \meta{floating point variable}, assigning the 
%  result globally.
%\end{function}
%
%\subsection{Arithmetic operations}
%
% Binary arithmetic operations act on the value stored in an 
% \texttt{fp}, so for example
%\begin{verbatim}
%  \fp_set:Nn \l_my_fp { 1.234 }
%  \fp_sub:Nn \l_my_fp { 5.678 }
%\end{verbatim}
% sets \cs{l_my_fp} to the result of \( 1.234 - 5.678 \) 
% (\emph{i.e}.~\( -4.444 \)).
%
%\begin{function}{
%  \fp_add:Nn |
%  \fp_add:cn |
%}
%  \begin{syntax}
%    \cs{fp_add:Nn} \meta{floating point} \Arg{value}
%  \end{syntax}
%  Adds the \meta{value} to the \meta{floating point}, making the
%  assignment within the current \TeX\ group level.
%\end{function}
%
%\begin{function}{
%  \fp_gadd:Nn |
%  \fp_gadd:cn |
%}
%  \begin{syntax}
%    \cs{fp_gadd:Nn} \meta{floating point} \Arg{value}
%  \end{syntax}
%  Adds the \meta{value} to the \meta{floating point}, making the
%  assignment globally.
%\end{function}
%
%\begin{function}{
%  \fp_sub:Nn |
%  \fp_sub:cn |
%}
%  \begin{syntax}
%    \cs{fp_sub:Nn} \meta{floating point} \Arg{value}
%  \end{syntax}
%  Subtracts the \meta{value} from the \meta{floating point}, making the
%  assignment within the current \TeX\ group level.
%\end{function}
%
%\begin{function}{
%  \fp_gsub:Nn |
%  \fp_gsub:cn |
%}
%  \begin{syntax}
%    \cs{fp_gsub:Nn} \meta{floating point} \Arg{value}
%  \end{syntax}
%  Subtracts the \meta{value} from the \meta{floating point}, making the
%  assignment globally.
%\end{function}
%
%\begin{function}{
%  \fp_mul:Nn |
%  \fp_mul:cn |
%}
%  \begin{syntax}
%    \cs{fp_mul:Nn} \meta{floating point} \Arg{value}
%  \end{syntax}
%  Multiples the \meta{floating point} by the \meta{value}, making the
%  assignment within the current \TeX\ group level.
%\end{function}
%
%\begin{function}{
%  \fp_gmul:Nn |
%  \fp_gmul:cn |
%}
%  \begin{syntax}
%    \cs{fp_gmul:Nn} \meta{floating point} \Arg{value}
%  \end{syntax}
%  Multiples the \meta{floating point} by the \meta{value}, making the
%  assignment globally.
%\end{function}
%
%\begin{function}{
%  \fp_div:Nn |
%  \fp_div:cn |
%}
%  \begin{syntax}
%    \cs{fp_div:Nn} \meta{floating point} \Arg{value}
%  \end{syntax}
%  Divides the \meta{floating point} by the \meta{value}, making the
%  assignment within the current \TeX\ group level. If the \meta{value}
%  is zero, the \meta{floating point} will be set to 
%  \cs{c_undefined_fp}.
%\end{function}
%
%\begin{function}{
%  \fp_gdiv:Nn |
%  \fp_gdiv:cn |
%}
%  \begin{syntax}
%    \cs{fp_gdiv:Nn} \meta{floating point} \Arg{value}
%  \end{syntax}
%  Divides the \meta{floating point} by the \meta{value}, making the
%  assignment globally. If the \meta{value} is zero, the 
%  \meta{floating point} will be set to \cs{c_undefined_fp}.
%\end{function}
%
%\subsection{Notes on the floating point unit}
%
% Anyone with experience of programming floating point calculations will
% know that this is a complex area. The aim of the unit is to be 
% accurate enough for the likely applications in a typesetting context. 
% The arithmetic operations are therefore intended to provide ten digit
% accuracy with the last digit accurate to \( \pm 1 \). The elemental 
% transcendental functions may not provide such high accuracy in every 
% case, although the design aim has been to provide \( 10 \) digit
% accuracy for cases likely to be relevant in typesetting situations.
% A good overview of the challenges in this area can be found in
% J.-M.~Muller, \emph{Elementary functions: algorithms and 
% implementation}, 2nd edition, Birkh{\"a}uer Boston, New York, USA,
% 2006.
% 
% The internal representation of numbers is tuned to the needs of the
% underlying \TeX\ system. This means that the format is somewhat
% different from that used in, for example, computer floating point
% units. Programming in \TeX\ makes it most convenient to use a 
% radix \( 10 \) system, using \TeX\ \texttt{count} registers for
% storage and taking advantage where possible of delimited arguments.
%  
%\end{documentation}
%
%\begin{implementation}
%
%\section{Implementation}
% 
%    We start by ensuring that the required packages are loaded.
%    \begin{macrocode}
%<*package>
\ProvidesExplPackage
  {\filename}{\filedate}{\fileversion}{\filedescription}
\package_check_loaded_expl:
%</package>
%<*initex|package>
%    \end{macrocode}
%    
%\subsection{Constants}
%
%\begin{macro}{\c_forty_four}
%\begin{macro}{\c_one_hundred}
%\begin{macro}{\c_one_thousand}
%\begin{macro}{\c_one_hundred_million}
%\begin{macro}{\c_five_hundred_million}
%\begin{macro}{\c_one_thousand_million}
% There is some speed to gain by moving numbers into fixed positions.
%    \begin{macrocode}
\int_new:N  \c_forty_four
\int_set:Nn \c_forty_four { 44 }
\int_new:N  \c_one_hundred
\int_set:Nn \c_one_hundred { 100 }
\int_new:N  \c_one_thousand
\int_set:Nn \c_one_thousand { 1000 }
\int_new:N  \c_one_hundred_million
\int_set:Nn \c_one_hundred_million { 100 000 000 }
\int_new:N  \c_five_hundred_million
\int_set:Nn \c_five_hundred_million { 500 000 000 }
\int_new:N  \c_one_thousand_million
\int_set:Nn \c_one_thousand_million { 1 000 000 000 }
%    \end{macrocode}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%
%\begin{macro}{\c_zero_fp}
% The constant zero value.
%    \begin{macrocode}
\tl_new:N  \c_zero_fp
\tl_set:Nn \c_zero_fp { + 0.000000000 e 0 }
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\c_undefined_fp}
% A marker for undefined values.
%    \begin{macrocode}
\tl_new:N  \c_undefined_fp
\tl_set:Nn \c_undefined_fp { X 0.000000000 e 0 }
%    \end{macrocode}
%\end{macro}
%
%\subsection{Variables}
%
%\begin{macro}{\l_fp_count_int}
% A counter for things like the number of divisions possible.
%    \begin{macrocode}
\int_new:N \l_fp_count_int 
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\l_fp_div_offset_int}
% When carrying out division, an offset is used for the results to 
% get the decimal part correct.
%    \begin{macrocode}
\int_new:N \l_fp_div_offset_int
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\l_fp_input_a_sign_int}
%\begin{macro}{\l_fp_input_a_integer_int}
%\begin{macro}{\l_fp_input_a_decimal_int}
%\begin{macro}{\l_fp_input_a_exponent_int}
%\begin{macro}{\l_fp_input_b_sign_int}
%\begin{macro}{\l_fp_input_b_integer_int}
%\begin{macro}{\l_fp_input_b_decimal_int}
%\begin{macro}{\l_fp_input_b_exponent_int}
% Storage for the input: two storage areas as there are at most two
% inputs.
%    \begin{macrocode}
\int_new:N \l_fp_input_a_sign_int
\int_new:N \l_fp_input_a_integer_int
\int_new:N \l_fp_input_a_decimal_int
\int_new:N \l_fp_input_a_exponent_int
\int_new:N \l_fp_input_b_sign_int
\int_new:N \l_fp_input_b_integer_int
\int_new:N \l_fp_input_b_decimal_int
\int_new:N \l_fp_input_b_exponent_int
%    \end{macrocode}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%
%\begin{macro}{\l_fp_mul_a_i_int}
%\begin{macro}{\l_fp_mul_a_ii_int}
%\begin{macro}{\l_fp_mul_a_iii_int}
%\begin{macro}{\l_fp_mul_b_i_int}
%\begin{macro}{\l_fp_mul_b_ii_int}
%\begin{macro}{\l_fp_mul_b_iii_int}
% Multiplication requires that the decimal part is split into parts
% so that there are no overflows. 
%    \begin{macrocode}
\int_new:N \l_fp_mul_a_i_int
\int_new:N \l_fp_mul_a_ii_int
\int_new:N \l_fp_mul_a_iii_int
\int_new:N \l_fp_mul_b_i_int
\int_new:N \l_fp_mul_b_ii_int
\int_new:N \l_fp_mul_b_iii_int
%    \end{macrocode}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%
%\begin{macro}{\l_fp_mul_output_int}
%\begin{macro}{\l_fp_mul_output_tl}
% Space for multiplication results.
%    \begin{macrocode}
\int_new:N \l_fp_mul_output_int
\tl_new:N  \l_fp_mul_output_tl
%    \end{macrocode}
%\end{macro}
%\end{macro}
%
%\begin{macro}{\l_fp_output_sign_int}
%\begin{macro}{\l_fp_output_integer_int}
%\begin{macro}{\l_fp_output_decimal_int}
%\begin{macro}{\l_fp_output_exponent_int}
% Output is stored in the same way as input.
%    \begin{macrocode}
\int_new:N \l_fp_output_sign_int
\int_new:N \l_fp_output_integer_int
\int_new:N \l_fp_output_decimal_int
\int_new:N \l_fp_output_exponent_int
%    \end{macrocode}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%
%\begin{macro}{\l_fp_round_carry_bool}
% To indicate that a digit needs to be carried forward.
%    \begin{macrocode}
\bool_new:N \l_fp_round_carry_bool
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\l_fp_round_decimal_tl}
% A temporary store when rounding, to build up the decimal part without
% needing to do any maths.
%    \begin{macrocode}
\tl_new:N \l_fp_round_decimal_tl
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\l_fp_round_position_int}
%\begin{macro}{\l_fp_round_target_int}
% Used to check the position for rounding.
%    \begin{macrocode}
\int_new:N \l_fp_round_position_int
\int_new:N \l_fp_round_target_int
%    \end{macrocode}
%\end{macro}
%\end{macro}
%
%\begin{macro}{\l_fp_split_sign_int}
% When splitting the input it is fastest to use a fixed name for the 
% sign part, and to transfer it after the split is complete.
%    \begin{macrocode}
\int_new:N \l_fp_split_sign_int
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\l_fp_tmp_int}
% A scratch \texttt{int}: used only where the value is not carried
% forward.
%    \begin{macrocode}
\int_new:N \l_fp_tmp_int
%    \end{macrocode}
%\end{macro}
%    
%\begin{macro}{\l_fp_tmp_tl}
% A scratch token list variable for expanding material.
%    \begin{macrocode}
\tl_new:N \l_fp_tmp_tl
%    \end{macrocode}
%\end{macro}
%
%\subsection{Parsing numbers}
%
%\begin{macro}{\fp_read:N}
%\begin{macro}[aux]{\fp_read_aux:w}
% Reading a stored value is made easier as the format is designed to
% match the delimited function. This is always used to read the first
% value (register "a").
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_read:N #1 {
  \exp_after:wN \fp_read_aux:w #1 \q_stop
}
\cs_new_protected_nopar:Npn \fp_read_aux:w #1#2 . #3 e #4 \q_stop {
  \tex_if:D #1 -
    \l_fp_input_a_sign_int \c_minus_one
  \tex_else:D
    \l_fp_input_a_sign_int \c_one
  \tex_fi:D
  \l_fp_input_a_integer_int  #2 \scan_stop:
  \l_fp_input_a_decimal_int  #3 \scan_stop:
  \l_fp_input_a_exponent_int #4 \scan_stop:
}
%    \end{macrocode}
%\end{macro}
%\end{macro}
%    
%\begin{macro}{\fp_split:Nn}
%\begin{macro}[aux]{\fp_split_sign:}
%\begin{macro}[aux]{\fp_split_exponent:}
%\begin{macro}[aux]{\fp_split_aux_i:w}
%\begin{macro}[aux]{\fp_split_aux_ii:w}
%\begin{macro}[aux]{\fp_split_aux_iii:w}
%\begin{macro}[aux]{\fp_split_decimal:w}
%\begin{macro}[aux]{\fp_split_decimal_aux:w}
% The aim here is to use as much of \TeX's mechanism as possible to pick
% up the numerical input without any mistakes. In particular, negative
% numbers have to be filtered out first in case the integer part is
% \( 0 \) (in which case \TeX\ would drop the "-" sign). That process
% has to be done in a loop for cases where the sign is repeated. 
% Finding an exponent is relatively easy, after which the next phase is 
% to find the integer part, which will terminate with a ".", and trigger 
% the decimal-finding code. The later will allow the decimal to be too 
% long, truncating the result.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_split:Nn #1#2 {
  \tl_set:Nx \l_fp_tmp_tl {#2}
  \l_fp_split_sign_int \c_one
  \fp_split_sign:
  \use:c { l_fp_input_ #1 _sign_int } \l_fp_split_sign_int
  \exp_after:wN \fp_split_exponent:w \l_fp_tmp_tl e e \q_stop #1
}
\cs_new_protected_nopar:Npn \fp_split_sign: {
  \tex_ifnum:D \pdf_strcmp:D 
    { \exp_after:wN \tl_head:w \l_fp_tmp_tl ? \q_nil } { - } 
      = \c_zero
    \tl_set:Nx \l_fp_tmp_tl
      { 
        \exp_after:wN 
          \tl_tail:w \l_fp_tmp_tl \prg_do_nothing: \q_nil 
      }
    \l_fp_split_sign_int -\l_fp_split_sign_int 
    \exp_after:wN \fp_split_sign:
  \tex_else:D 
    \tex_ifnum:D \pdf_strcmp:D 
      { \exp_after:wN \tl_head:w \l_fp_tmp_tl ? \q_nil } { + } 
        = \c_zero
      \tl_set:Nx \l_fp_tmp_tl
        { 
          \exp_after:wN 
            \tl_tail:w \l_fp_tmp_tl \prg_do_nothing: \q_nil 
        }
      \exp_after:wN \exp_after:wN \exp_after:wN
        \fp_split_sign:  
     \tex_fi:D   
  \tex_fi:D  
}
\cs_new_protected_nopar:Npn 
  \fp_split_exponent:w #1 e #2 e #3 \q_stop #4 {
  \use:c { l_fp_input_ #4 _exponent_int } 
    \etex_numexpr:D 0 #2 \scan_stop:
  \tex_afterassignment:D \fp_split_aux_i:w 
  \use:c { l_fp_input_ #4 _integer_int } 
    \etex_numexpr:D 0 #1 . . \q_stop #4 
}
\cs_new_protected_nopar:Npn \fp_split_aux_i:w #1 . #2 . #3 \q_stop {
  \fp_split_aux_ii:w #2 000000000 \q_stop
}
\cs_new_protected_nopar:Npn \fp_split_aux_ii:w #1#2#3#4#5#6#7#8#9 {
  \fp_split_aux_iii:w {#1#2#3#4#5#6#7#8#9}
}
\cs_new_protected_nopar:Npn \fp_split_aux_iii:w #1#2 \q_stop {
  \l_fp_tmp_int 1 #1 \scan_stop:
  \exp_after:wN \fp_split_decimal:w 
    \int_use:N \l_fp_tmp_int 000000000 \q_stop
}
\cs_new_protected_nopar:Npn \fp_split_decimal:w #1#2#3#4#5#6#7#8#9 {
  \fp_split_decimal_aux:w {#2#3#4#5#6#7#8#9}
}
\cs_new_protected_nopar:Npn \fp_split_decimal_aux:w #1#2#3 \q_stop #4 {
  \use:c { l_fp_input_ #4 _decimal_int } #1#2 \scan_stop:
  \tex_ifnum:D
    \etex_numexpr:D 
      \use:c { l_fp_input_ #4 _integer_int } +
      \use:c { l_fp_input_ #4 _decimal_int }
    \scan_stop:
      = \c_zero 
    \use:c { l_fp_input_ #4 _sign_int }     \c_one  
  \tex_fi:D  
  \tex_ifnum:D 
    \use:c { l_fp_input_ #4 _integer_int } < \c_one_thousand_million
  \tex_else:D
    \exp_after:wN \fp_overflow_msg:
  \tex_fi:D  
}
%    \end{macrocode}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%
%\begin{macro}{\fp_standardise:NNNN}
%\begin{macro}[aux]{\fp_standardise_aux:NNNN}
%\begin{macro}[aux]{\fp_standardise_aux:}
%\begin{macro}[aux]{\fp_standardise_aux:w}
% The idea here is to shift the input into a known exponent range. This
% is done using \TeX\ tokens where possible, as this is faster than
% arithmetic.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_standardise:NNNN #1#2#3#4 {
  \tex_ifnum:D 
    \etex_numexpr:D #2 + #3 = \c_zero
    #1 \c_one
    #4 \c_zero
    \exp_after:wN \use_none:nnnn
  \tex_else:D
    \exp_after:wN \fp_standardise_aux:NNNN
  \tex_fi:D
  #1#2#3#4
}
\cs_new_protected_nopar:Npn \fp_standardise_aux:NNNN #1#2#3#4 {
  \cs_set_protected_nopar:Npn \fp_standardise_aux:
    {
      \tex_ifnum:D #2 = \c_zero
        \tex_advance:D #3 \c_one_thousand_million
        \exp_after:wN \fp_standardise_aux:w
          \int_use:N #3 \q_stop
         \exp_after:wN \fp_standardise_aux:
       \tex_fi:D
    }
  \cs_set_protected_nopar:Npn 
    \fp_standardise_aux:w ##1##2##3##4##5##6##7##8##9 \q_stop
    {
      #2 ##2 \scan_stop:
      #3 ##3##4##5##6##7##8##9 0 \scan_stop:
      \tex_advance:D #4 \c_minus_one 
    }
  \fp_standardise_aux:
  \cs_set_protected_nopar:Npn \fp_standardise_aux:
    {
      \tex_ifnum:D #2 > \c_nine
        \tex_advance:D #2 \c_one_thousand_million
        \exp_after:wN \use_i:nn \exp_after:wN 
          \fp_standardise_aux:w \int_use:N #2
         \exp_after:wN \fp_standardise_aux:
       \tex_fi:D
    } 
  \cs_set_protected_nopar:Npn 
    \fp_standardise_aux:w ##1##2##3##4##5##6##7##8##9
    {
      #2 ##1##2##3##4##5##6##7##8 \scan_stop:
      \tex_advance:D #3 \c_one_thousand_million
      \tex_divide:D #3 \c_ten
      \tl_set:Nx \l_fp_tmp_tl
        {
          ##9
          \exp_after:wN \use_none:n \int_use:N #3
        }
      #3 \l_fp_tmp_tl \scan_stop:  
      \tex_advance:D #4 \c_one 
    }
  \fp_standardise_aux:
  \tex_ifnum:D #4 < \c_one_hundred
    \tex_ifnum:D #4 > -\c_one_hundred
    \tex_else:D
      #1 \c_one
      #2 \c_zero
      #3 \c_zero
      #4 \c_zero
    \tex_fi:D
  \tex_else:D
    \exp_after:wN \fp_overflow_msg:
  \tex_fi:D  
}
\cs_new_protected_nopar:Npn \fp_standardise_aux: { }
\cs_new_protected_nopar:Npn \fp_standardise_aux:w { }
%    \end{macrocode}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%
%\subsection{Internal utilities}
%
%\begin{macro}{\fp_level_input_exponents:}
%\begin{macro}[aux]{\fp_level_input_exponents_a:}
%\begin{macro}[aux]{\fp_level_input_exponents_a:NNNNNNNNN}
%\begin{macro}[aux]{\fp_level_input_exponents_b:}
%\begin{macro}[aux]{\fp_level_input_exponents_b:NNNNNNNNN}
% The routines here are similar to those used to standardise the 
% exponent. However, the aim here is different: the two exponents need
% to end up the same.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_level_input_exponents: {
  \tex_ifnum:D \l_fp_input_a_exponent_int > \l_fp_input_b_exponent_int
    \exp_after:wN \fp_level_input_exponents_a:
  \tex_else:D
    \exp_after:wN \fp_level_input_exponents_b:
  \tex_fi:D
}
\cs_new_protected_nopar:Npn \fp_level_input_exponents_a: {
  \tex_ifnum:D \l_fp_input_a_exponent_int > \l_fp_input_b_exponent_int
    \tex_advance:D \l_fp_input_b_integer_int \c_one_thousand_million
    \exp_after:wN \use_i:nn \exp_after:wN
      \fp_level_input_exponents_a:NNNNNNNNN 
        \int_use:N \l_fp_input_b_integer_int
    \exp_after:wN \fp_level_input_exponents_a:
  \tex_fi:D
}
\cs_new_protected_nopar:Npn 
  \fp_level_input_exponents_a:NNNNNNNNN #1#2#3#4#5#6#7#8#9 {
  \l_fp_input_b_integer_int #1#2#3#4#5#6#7#8 \scan_stop:
  \tex_advance:D \l_fp_input_b_decimal_int \c_one_thousand_million
  \tex_divide:D \l_fp_input_b_decimal_int \c_ten
  \tl_set:Nx \l_fp_tmp_tl
    {
      #9 
      \exp_after:wN \use_none:n 
        \int_use:N \l_fp_input_b_decimal_int
    }
  \l_fp_input_b_decimal_int \l_fp_tmp_tl \scan_stop:  
  \tex_advance:D \l_fp_input_b_exponent_int \c_one
}
\cs_new_protected_nopar:Npn \fp_level_input_exponents_b: {
  \tex_ifnum:D \l_fp_input_b_exponent_int > \l_fp_input_a_exponent_int
    \tex_advance:D \l_fp_input_a_integer_int \c_one_thousand_million
    \exp_after:wN \use_i:nn \exp_after:wN
      \fp_level_input_exponents_b:NNNNNNNNN 
        \int_use:N \l_fp_input_a_integer_int
    \exp_after:wN \fp_level_input_exponents_b:
  \tex_fi:D
}
\cs_new_protected_nopar:Npn 
  \fp_level_input_exponents_b:NNNNNNNNN #1#2#3#4#5#6#7#8#9 {
  \l_fp_input_a_integer_int #1#2#3#4#5#6#7#8 \scan_stop:
  \tex_advance:D \l_fp_input_a_decimal_int \c_one_thousand_million
  \tex_divide:D \l_fp_input_a_decimal_int \c_ten
  \tl_set:Nx \l_fp_tmp_tl
    {
      #9 
      \exp_after:wN \use_none:n 
        \int_use:N \l_fp_input_a_decimal_int
    }
  \l_fp_input_a_decimal_int \l_fp_tmp_tl \scan_stop:  
  \tex_advance:D \l_fp_input_a_exponent_int \c_one
}
%    \end{macrocode}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%
%\begin{macro}{\fp_tmp:w}
% Used for output of results, cutting down on \cs{exp_after:wN}.
% This is just a place holder definition.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_tmp:w #1#2 { }
%    \end{macrocode}
%\end{macro}
%
%\subsection{Operations for \texttt{fp} variables}
%
% The format of \texttt{fp} variables is tightly defined, so that 
% they can be read quickly by the internal code. The format is a single
% sign token, a single number, the decimal point, nine decimal numbers,
% an "e" and finally the exponent. This final part may vary in length.
% When stored, floating points will always be stored with a value in
% the integer position unless the number is zero.
%
%\begin{macro}{\fp_new:N}
%\begin{macro}{\fp_new:c}
% Fixed-points always have a value, and of course this has to be
% initialised globally.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_new:N #1 {
  \tl_new:N #1
  \tl_gset_eq:NN #1 \c_zero_fp
}
\cs_generate_variant:Nn \fp_new:N { c }
%    \end{macrocode}
%\end{macro}
%\end{macro}
%
%\begin{macro}{\fp_zero:N}
%\begin{macro}{\fp_zero:c}
%\begin{macro}{\fp_gzero:N}
%\begin{macro}{\fp_gzero:c}
% Zeroing fixed-points is pretty obvious.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_zero:N #1 {
  \tl_set_eq:NN #1 \c_zero_fp
}
\cs_new_protected_nopar:Npn \fp_gzero:N #1 {
  \tl_gset_eq:NN #1 \c_zero_fp
}
\cs_generate_variant:Nn \fp_zero:N { c }
\cs_generate_variant:Nn \fp_gzero:N { c }
%    \end{macrocode}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%
%\begin{macro}{\fp_set:Nn}
%\begin{macro}{\fp_set:cn}
%\begin{macro}{\fp_gset:Nn}
%\begin{macro}{\fp_gset:cn} 
%\begin{macro}[aux]{\fp_set_aux:NNn} 
% To trap any input errors, a very simple version of the parser is run
% here. This will pick up any invalid characters at this stage, saving
% issues later. The splitting approach is the same as the more 
% advanced function later.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_set:Nn {
  \fp_set_aux:NNn \tl_set:Nn 
}
\cs_new_protected_nopar:Npn \fp_gset:Nn {
  \fp_set_aux:NNn \tl_gset:Nn 
}
\cs_new_protected_nopar:Npn \fp_set_aux:NNn #1#2#3 {
  \group_begin:
    \fp_split:Nn a {#3}
    \fp_standardise:NNNN
      \l_fp_input_a_sign_int
      \l_fp_input_a_integer_int
      \l_fp_input_a_decimal_int
      \l_fp_input_a_exponent_int
    \tex_advance:D \l_fp_input_a_decimal_int \c_one_thousand_million
    \cs_set_protected_nopar:Npx \fp_tmp:w
      {
        \group_end:
        #1 \exp_not:N #2
          {
            \tex_ifnum:D \l_fp_input_a_sign_int < \c_zero
              -
            \tex_else:D
              +  
            \tex_fi:D  
            \int_use:N \l_fp_input_a_integer_int
            .
            \exp_after:wN \use_none:n 
              \int_use:N \l_fp_input_a_decimal_int
            e
            \int_use:N \l_fp_input_a_exponent_int
          }
      }
  \fp_tmp:w
}
\cs_generate_variant:Nn \fp_set:Nn  { c }
\cs_generate_variant:Nn \fp_gset:Nn { c }
%    \end{macrocode}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%
%\begin{macro}{\fp_set_from_dim:Nn}
%\begin{macro}{\fp_set_from_dim:cn}
%\begin{macro}{\fp_gset_from_dim:Nn}
%\begin{macro}{\fp_gset_from_dim:cn} 
%\begin{macro}[aux]{\fp_set_from_dim_aux:NNn} 
%\begin{macro}[aux]{\fp_set_from_dim_aux:w} 
%\begin{macro}{\l_fp_tmp_dim}
%\begin{macro}{\l_fp_tmp_skip}
% Here, dimensions are converted to fixed-points \emph{via} a
% temporary variable. This ensures that they always convert as points.
% The code is then essentially the same as for \cs{fp_set:Nn}, but with
% the dimension passed so that it will be striped of the "pt" on the
% way through. The passage through a skip is used to remove any rubber
% part.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_set_from_dim:Nn {
  \fp_set_from_dim_aux:NNn \tl_set:Nx 
}
\cs_new_protected_nopar:Npn \fp_gset_from_dim:Nn {
  \fp_set_from_dim_aux:NNn \tl_gset:Nx 
}
\cs_new_protected_nopar:Npn \fp_set_from_dim_aux:NNn #1#2#3 {
  \group_begin:
    \l_fp_tmp_skip \etex_glueexpr:D #3 \scan_stop: 
    \l_fp_tmp_dim \l_fp_tmp_skip
    \fp_split:Nn a 
      { 
        \exp_after:wN \fp_set_from_dim_aux:w 
          \dim_use:N \l_fp_tmp_dim  
      }
    \fp_standardise:NNNN
      \l_fp_input_a_sign_int
      \l_fp_input_a_integer_int
      \l_fp_input_a_decimal_int
      \l_fp_input_a_exponent_int 
    \tex_advance:D \l_fp_input_a_decimal_int \c_one_thousand_million
    \cs_set_protected_nopar:Npx \fp_tmp:w
      {
        \group_end:
        #1 \exp_not:N #2
          {
            \tex_ifnum:D \l_fp_input_a_sign_int < \c_zero
              -
            \tex_else:D
              +  
            \tex_fi:D  
            \int_use:N \l_fp_input_a_integer_int
            .
            \exp_after:wN \use_none:n 
              \int_use:N \l_fp_input_a_decimal_int
            e
            \int_use:N \l_fp_input_a_exponent_int
          }
      }
  \fp_tmp:w
}
\cs_set_protected_nopar:Npx \fp_set_from_dim_aux:w {
  \cs_set_nopar:Npn \exp_not:N \fp_set_from_dim_aux:w 
    ##1 \tl_to_str:n { pt } {##1}
}
\fp_set_from_dim_aux:w
\cs_generate_variant:Nn \fp_set_from_dim:Nn  { c }
\cs_generate_variant:Nn \fp_gset_from_dim:Nn { c }
\dim_new:N \l_fp_tmp_dim
\skip_new:N \l_fp_tmp_skip
%    \end{macrocode}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%
%\begin{macro}{\fp_set_eq:NN}
%\begin{macro}{\fp_set_eq:cN}
%\begin{macro}{\fp_set_eq:Nc}
%\begin{macro}{\fp_set_eq:cc}
%\begin{macro}{\fp_gset_eq:NN}
%\begin{macro}{\fp_gset_eq:cN}
%\begin{macro}{\fp_gset_eq:Nc}
%\begin{macro}{\fp_gset_eq:cc}
% Pretty simple, really.
%    \begin{macrocode}
\cs_new_eq:NN \fp_set_eq:NN  \tl_set_eq:NN
\cs_new_eq:NN \fp_set_eq:cN  \tl_set_eq:cN
\cs_new_eq:NN \fp_set_eq:Nc  \tl_set_eq:Nc
\cs_new_eq:NN \fp_set_eq:cc  \tl_set_eq:cc
\cs_new_eq:NN \fp_gset_eq:NN \tl_gset_eq:NN
\cs_new_eq:NN \fp_gset_eq:cN \tl_gset_eq:cN
\cs_new_eq:NN \fp_gset_eq:Nc \tl_gset_eq:Nc
\cs_new_eq:NN \fp_gset_eq:cc \tl_gset_eq:cc
%    \end{macrocode}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%
%\begin{macro}{\fp_show:N}
%\begin{macro}{\fp_show:c}
% Simple showing of the underlying variable.
%    \begin{macrocode}
\cs_new_eq:NN \fp_show:N \tl_show:N
\cs_new_eq:NN \fp_show:c \tl_show:c
%    \end{macrocode}
%\end{macro}
%\end{macro}
%
%\begin{macro}{\fp_use:N}
%\begin{macro}{\fp_use:c}
%\begin{macro}[aux]{\fp_use_aux:w}
%\begin{macro}[aux]{\fp_use_none:w}
%\begin{macro}[aux]{\fp_use_small:w}
%\begin{macro}[aux]{\fp_use_large:w}
%\begin{macro}[aux]{\fp_use_large_aux_i:w}
%\begin{macro}[aux]{\fp_use_large_aux_1:w}
%\begin{macro}[aux]{\fp_use_large_aux_2:w}
%\begin{macro}[aux]{\fp_use_large_aux_3:w}
%\begin{macro}[aux]{\fp_use_large_aux_4:w}
%\begin{macro}[aux]{\fp_use_large_aux_5:w}
%\begin{macro}[aux]{\fp_use_large_aux_6:w}
%\begin{macro}[aux]{\fp_use_large_aux_7:w}
%\begin{macro}[aux]{\fp_use_large_aux_8:w}
%\begin{macro}[aux]{\fp_use_large_aux_i:w}
%\begin{macro}[aux]{\fp_use_large_aux_ii:w}
% The idea of the \cs{fp_use:N} function to to convert the stored
% value into something suitable for \TeX\ to use as a number in an
% expandable manner. The first step is to deal with the sign, then
% work out how big the input is.
%    \begin{macrocode}
\cs_new_nopar:Npn \fp_use:N #1 {
  \exp_after:wN \fp_use_aux:w #1 \q_stop
}
\cs_generate_variant:Nn \fp_use:N { c }
\cs_new_nopar:Npn \fp_use_aux:w #1#2 e #3 \q_stop {
  \tex_if:D #1 -
    -
  \tex_fi:D
  \tex_ifnum:D #3 > \c_zero
    \exp_after:wN \fp_use_large:w
  \tex_else:D
    \tex_ifnum:D #3 < \c_zero
      \exp_after:wN \exp_after:wN \exp_after:wN 
        \fp_use_small:w
    \tex_else:D
      \exp_after:wN \exp_after:wN \exp_after:wN 
        \fp_use_none:w
    \tex_fi:D
  \tex_fi:D
  #2 e #3 \q_stop
}
%    \end{macrocode}
% When the exponent is zero, the input is simply returned as output.   
%    \begin{macrocode}
\cs_new_nopar:Npn \fp_use_none:w #1 e #2 \q_stop {#1}
%    \end{macrocode}
% For small numbers (less than \( 1 \)) the correct number of zeros
% have to be inserted, but the decimal point is easy.
%    \begin{macrocode}
\cs_new_nopar:Npn \fp_use_small:w #1 . #2 e #3 \q_stop {
  0 .
  \prg_replicate:nn { -#3 - 1 } { 0 }
  #1#2
}
%    \end{macrocode}
% Life is more complex for large numbers. The decimal point needs to
% be shuffled, with potentially some zero-filling for very large values.
%    \begin{macrocode}
\cs_new_nopar:Npn \fp_use_large:w #1 . #2 e #3 \q_stop {
  \tex_ifnum:D #3 < \c_ten
    \exp_after:wN \fp_use_large_aux_i:w
  \tex_else:D
    \exp_after:wN \fp_use_large_aux_ii:w
  \tex_fi:D
  #1#2 e #3 \q_stop
}
\cs_new_nopar:Npn \fp_use_large_aux_i:w #1#2 e #3 \q_stop {
  #1
  \use:c { fp_use_large_aux_ #3 :w } #2 \q_stop
}
\cs_new_nopar:cpn { fp_use_large_aux_1:w } #1#2 \q_stop { #1 . #2 }
\cs_new_nopar:cpn { fp_use_large_aux_2:w } #1#2#3 \q_stop { 
  #1#2 . #3 
}
\cs_new_nopar:cpn { fp_use_large_aux_3:w } #1#2#3#4 \q_stop { 
  #1#2#3 . #4
}
\cs_new_nopar:cpn { fp_use_large_aux_4:w } #1#2#3#4#5 \q_stop { 
  #1#2#3#4 . #5
}
\cs_new_nopar:cpn { fp_use_large_aux_5:w } #1#2#3#4#5#6 \q_stop { 
  #1#2#3#4#5 . #6
}
\cs_new_nopar:cpn { fp_use_large_aux_6:w } #1#2#3#4#5#6#7 \q_stop { 
  #1#2#3#4#5#6 . #7
}
\cs_new_nopar:cpn { fp_use_large_aux_7:w } #1#2#3#4#5#6#7#8 \q_stop { 
  #1#2#3#4#6#7 . #8
}
\cs_new_nopar:cpn { fp_use_large_aux_8:w } #1#2#3#4#5#6#7#8#9 \q_stop {
  #1#2#3#4#5#6#7#8 . #9
}
\cs_new_nopar:cpn { fp_use_large_aux_9:w } #1 \q_stop { #1 . }
\cs_new_nopar:Npn \fp_use_large_aux_ii:w #1 e #2 \q_stop {
  #1
  \prg_replicate:nn { #2 - 9 } { 0 }
  .
}
%    \end{macrocode}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%
%\subsection{Transferring to other types}
%
% The \cs{fp_use:N} function converts a floating point variable to
% a form that can be used by \TeX. Here, the functions are slightly
% different, as some information may be discarded.
% 
%\begin{macro}{\fp_to_int:N}
%\begin{macro}{\fp_to_int:c}
%\begin{macro}[aux]{\fp_to_int_aux:w}
%\begin{macro}[aux]{\fp_to_int_none:w}
%\begin{macro}[aux]{\fp_to_int_small:w}
%\begin{macro}[aux]{\fp_to_int_large:w}
%\begin{macro}[aux]{\fp_to_int_large_aux_i:w}
%\begin{macro}[aux]{\fp_to_int_large_aux_1:w}
%\begin{macro}[aux]{\fp_to_int_large_aux_2:w}
%\begin{macro}[aux]{\fp_to_int_large_aux_3:w}
%\begin{macro}[aux]{\fp_to_int_large_aux_4:w}
%\begin{macro}[aux]{\fp_to_int_large_aux_5:w}
%\begin{macro}[aux]{\fp_to_int_large_aux_6:w}
%\begin{macro}[aux]{\fp_to_int_large_aux_7:w}
%\begin{macro}[aux]{\fp_to_int_large_aux_8:w}
%\begin{macro}[aux]{\fp_to_int_large_aux_i:w}
%\begin{macro}[aux]{\fp_to_int_large_aux:nnn}
%\begin{macro}[aux]{\fp_to_int_large_aux_ii:w}
% Converting to integers in an expandable manner is very similar to 
% simply using floating point variables, particularly in the lead-off.
%    \begin{macrocode}
\cs_new_nopar:Npn \fp_to_int:N #1 {
  \exp_after:wN \fp_to_int_aux:w #1 \q_stop
}
\cs_generate_variant:Nn \fp_to_int:N { c }
\cs_new_nopar:Npn \fp_to_int_aux:w #1#2 e #3 \q_stop {
  \tex_if:D #1 -
    -
  \tex_fi:D
  \tex_ifnum:D #3 < \c_zero
    \exp_after:wN \fp_to_int_small:w
  \tex_else:D
    \exp_after:wN \fp_to_int_large:w
  \tex_fi:D
  #2 e #3 \q_stop
}
%    \end{macrocode}
% For small numbers, if the decimal part is greater than a half then
% there is rounding up to do.
%    \begin{macrocode}
\cs_new_nopar:Npn \fp_to_int_small:w #1 . #2 e #3 \q_stop {
  \tex_ifnum:D #3 > \c_one
  \tex_else:D
    \tex_ifnum:D #1 < \c_five
      0
    \tex_else:D
      1
    \tex_fi:D
  \tex_fi:D
}
%    \end{macrocode}
% For large numbers, the idea is to split off the part for rounding,
% do the rounding and fill if needed.
%    \begin{macrocode}
\cs_new_nopar:Npn \fp_to_int_large:w #1 . #2 e #3 \q_stop {
  \tex_ifnum:D #3 < \c_ten
    \exp_after:wN \fp_to_int_large_aux_i:w
  \tex_else:D
    \exp_after:wN \fp_to_int_large_aux_ii:w
  \tex_fi:D
  #1#2 e #3 \q_stop
}
\cs_new_nopar:Npn \fp_to_int_large_aux_i:w #1#2 e #3 \q_stop {
  \use:c { fp_to_int_large_aux_ #3 :w } #2 \q_stop {#1}
}
\cs_new_nopar:cpn { fp_to_int_large_aux_1:w } #1#2 \q_stop { 
  \fp_to_int_large_aux:nnn { #2 0 } {#1} 
}
\cs_new_nopar:cpn { fp_to_int_large_aux_2:w } #1#2#3 \q_stop { 
  \fp_to_int_large_aux:nnn { #3 00 } {#1#2} 
}
\cs_new_nopar:cpn { fp_to_int_large_aux_3:w } #1#2#3#4 \q_stop { 
  \fp_to_int_large_aux:nnn { #4 000 } {#1#2#3} 
}
\cs_new_nopar:cpn { fp_to_int_large_aux_4:w } #1#2#3#4#5 \q_stop { 
  \fp_to_int_large_aux:nnn { #5 0000 } {#1#2#3#4} 
}
\cs_new_nopar:cpn { fp_to_int_large_aux_5:w } #1#2#3#4#5#6 \q_stop { 
  \fp_to_int_large_aux:nnn { #6 00000 } {#1#2#3#4#5} 
}
\cs_new_nopar:cpn { fp_to_int_large_aux_6:w } #1#2#3#4#5#6#7 \q_stop {
  \fp_to_int_large_aux:nnn { #7 000000 } {#1#2#3#4#5#6} 
}
\cs_new_nopar:cpn 
  { fp_to_int_large_aux_7:w } #1#2#3#4#5#6#7#8 \q_stop { 
  \fp_to_int_large_aux:nnn { #8 0000000 } {#1#2#3#4#5#6#7} 
}
\cs_new_nopar:cpn 
  { fp_to_int_large_aux_8:w } #1#2#3#4#5#6#7#8#9 \q_stop {
  \fp_to_int_large_aux:nnn { #9 00000000 } {#1#2#3#4#5#6#7#8} 
}
\cs_new_nopar:cpn { fp_to_int_large_aux_9:w } #1 \q_stop {#1}
\cs_new_nopar:Npn \fp_to_int_large_aux:nnn #1#2#3 {
  \tex_ifnum:D #1 < \c_five_hundred_million
    #3#2
  \tex_else:D
    \tex_number:D \etex_numexpr:D #3#2 + 1 \scan_stop:
  \tex_fi:D
}
\cs_new_nopar:Npn \fp_to_int_large_aux_ii:w #1 e #2 \q_stop {
  #1
  \prg_replicate:nn { #2 - 9 } { 0 }
}
%    \end{macrocode}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%
%\begin{macro}{\fp_to_tl:N}
%\begin{macro}{\fp_to_tl:c}
%\begin{macro}[aux]{\fp_to_tl_aux:w}
%\begin{macro}[aux]{\fp_to_tl_large:w}
%\begin{macro}[aux]{\fp_to_tl_large_aux_i:w}
%\begin{macro}[aux]{\fp_to_tl_large_aux_ii:w}
%\begin{macro}[aux]{\fp_to_tl_large_0:w}
%\begin{macro}[aux]{\fp_to_tl_large_1:w}
%\begin{macro}[aux]{\fp_to_tl_large_2:w}
%\begin{macro}[aux]{\fp_to_tl_large_3:w}
%\begin{macro}[aux]{\fp_to_tl_large_4:w}
%\begin{macro}[aux]{\fp_to_tl_large_5:w}
%\begin{macro}[aux]{\fp_to_tl_large_6:w}
%\begin{macro}[aux]{\fp_to_tl_large_7:w}
%\begin{macro}[aux]{\fp_to_tl_large_8:w}
%\begin{macro}[aux]{\fp_to_tl_large_8_aux:w}
%\begin{macro}[aux]{\fp_to_tl_large_9:w}
%\begin{macro}[aux]{\fp_to_tl_small:w}
%\begin{macro}[aux]{\fp_to_tl_small_one:w}
%\begin{macro}[aux]{\fp_to_tl_small_two:w}
%\begin{macro}[aux]{\fp_to_tl_small_aux:w}
%\begin{macro}[aux]{\fp_to_tl_large_zeros:NNNNNNNNN}
%\begin{macro}[aux]{\fp_to_tl_small_zeros:NNNNNNNNN}
%\begin{macro}[aux]{\fp_use_iix_ix:NNNNNNNNN}
%\begin{macro}[aux]{\fp_use_ix:NNNNNNNNN}
%\begin{macro}[aux]{\fp_use_i_to_vii:NNNNNNNNN}
%\begin{macro}[aux]{\fp_use_i_to_iix:NNNNNNNNN}
% Converting to integers in an expandable manner is very similar to 
% simply using floating point variables, particularly in the lead-off.
%    \begin{macrocode}
\cs_new_nopar:Npn \fp_to_tl:N #1 {
  \exp_after:wN \fp_to_tl_aux:w #1 \q_stop
}
\cs_generate_variant:Nn \fp_to_tl:N { c }
\cs_new_nopar:Npn \fp_to_tl_aux:w #1#2 e #3 \q_stop {
  \tex_if:D #1 -
    -
  \tex_fi:D
  \tex_ifnum:D #3 < \c_zero
    \exp_after:wN \fp_to_tl_small:w
  \tex_else:D
    \exp_after:wN \fp_to_tl_large:w
  \tex_fi:D
  #2 e #3 \q_stop
}
%    \end{macrocode}
% For `large' numbers (exponent \( \ge 0 \)) there are two
% cases. For very large exponents (\( \ge 10 \)) life is easy: apart
% from dropping extra zeros there is no work to do. On the other hand, 
% for intermediate exponent values the decimal needs to be moved, then
% zeros can be dropped.
%    \begin{macrocode}
\cs_new_nopar:Npn \fp_to_tl_large:w #1 e #2 \q_stop {
  \tex_ifnum:D #2 < \c_ten
    \exp_after:wN \fp_to_tl_large_aux_i:w
  \tex_else:D
    \exp_after:wN \fp_to_tl_large_aux_ii:w
  \tex_fi:D
  #1 e #2 \q_stop
}
\cs_new_nopar:Npn \fp_to_tl_large_aux_i:w #1 e #2 \q_stop {
  \use:c { fp_to_tl_large_ #2 :w } #1 \q_stop
}
\cs_new_nopar:Npn \fp_to_tl_large_aux_ii:w #1 . #2 e #3 \q_stop {
  #1
  \fp_to_tl_large_zeros:NNNNNNNNN #2
  e #3
}
\cs_new_nopar:cpn { fp_to_tl_large_0:w } #1 . #2 \q_stop {
  #1
  \fp_to_tl_large_zeros:NNNNNNNNN #2
}
\cs_new_nopar:cpn { fp_to_tl_large_1:w } #1 . #2#3 \q_stop {
  #1#2
  \fp_to_tl_large_zeros:NNNNNNNNN #3 0
}
\cs_new_nopar:cpn { fp_to_tl_large_2:w } #1 . #2#3#4 \q_stop {
  #1#2#3
  \fp_to_tl_large_zeros:NNNNNNNNN #4 00
}
\cs_new_nopar:cpn { fp_to_tl_large_3:w } #1 . #2#3#4#5 \q_stop {
  #1#2#3#4
  \fp_to_tl_large_zeros:NNNNNNNNN #5 000
}
\cs_new_nopar:cpn { fp_to_tl_large_4:w } #1 . #2#3#4#5#6 \q_stop {
  #1#2#3#4#5
  \fp_to_tl_large_zeros:NNNNNNNNN #6 0000
}
\cs_new_nopar:cpn { fp_to_tl_large_5:w } #1 . #2#3#4#5#6#7 \q_stop {
  #1#2#3#4#5#6
  \fp_to_tl_large_zeros:NNNNNNNNN #7 00000
}
\cs_new_nopar:cpn { fp_to_tl_large_6:w } #1 . #2#3#4#5#6#7#8 \q_stop {
  #1#2#3#4#5#6#7
  \fp_to_tl_large_zeros:NNNNNNNNN #8 000000
}
\cs_new_nopar:cpn { fp_to_tl_large_7:w } #1 . #2#3#4#5#6#7#8#9 \q_stop {
  #1#2#3#4#5#6#7#8
  \fp_to_tl_large_zeros:NNNNNNNNN #9 0000000
}
\cs_new_nopar:cpn { fp_to_tl_large_8:w } #1 . {
  #1
  \use:c { fp_to_tl_large_8_aux:w }
}
\cs_new_nopar:cpn 
  { fp_to_tl_large_8_aux:w } #1#2#3#4#5#6#7#8#9 \q_stop {
  #1#2#3#4#5#6#7#8
  \fp_to_tl_large_zeros:NNNNNNNNN #9 00000000
}
\cs_new_nopar:cpn { fp_to_tl_large_9:w } #1 . #2 \q_stop {#1#2}
%    \end{macrocode}
% Dealing with small numbers is a bit more complex as there has to be
% rounding. This makes life rather awkward, as there need to be a series
% of tests and calculations, as things cannot be stored in an
% expandable system.   
%    \begin{macrocode}
\cs_new_nopar:Npn \fp_to_tl_small:w #1 e #2 \q_stop {
  \tex_ifnum:D #2 = \c_minus_one
    \exp_after:wN \fp_to_tl_small_one:w
  \tex_else:D
    \tex_ifnum:D #2 = -\c_two
      \exp_after:wN \exp_after:wN \exp_after:wN
        \fp_to_tl_small_two:w
    \tex_else:D  
      \exp_after:wN \exp_after:wN \exp_after:wN
        \fp_to_tl_small_aux:w
    \tex_fi:D
  \tex_fi:D
  #1 e #2 \q_stop
}
\cs_new_nopar:Npn \fp_to_tl_small_one:w #1 . #2 e #3 \q_stop {
  \tex_ifnum:D \fp_use_ix:NNNNNNNNN #2 > \c_four
    \tex_ifnum:D 
      \etex_numexpr:D #1 \fp_use_i_to_iix:NNNNNNNNN #2 + 1 
        < \c_one_thousand_million
      0.
      \exp_after:wN \fp_to_tl_small_zeros:NNNNNNNNN
        \tex_number:D 
          \etex_numexpr:D 
            #1 \fp_use_i_to_iix:NNNNNNNNN #2 + 1 
          \scan_stop:
    \tex_else:D
      1  
    \tex_fi:D
  \tex_else:D
    0. #1
    \fp_to_tl_small_zeros:NNNNNNNNN #2
  \tex_fi:D
}
\cs_new_nopar:Npn \fp_to_tl_small_two:w #1 . #2 e #3 \q_stop {
  \tex_ifnum:D \fp_use_iix_ix:NNNNNNNNN #2 > \c_forty_four
    \tex_ifnum:D 
      \etex_numexpr:D #1 \fp_use_i_to_vii:NNNNNNNNN #2 0 + \c_ten
        < \c_one_thousand_million
      0.0 
      \exp_after:wN \fp_to_tl_small_zeros:NNNNNNNNN
        \tex_number:D 
          \etex_numexpr:D 
            #1 \fp_use_i_to_vii:NNNNNNNNN #2 0 + \c_ten
          \scan_stop:
    \tex_else:D
      0.1  
    \tex_fi:D
  \tex_else:D
    0.0
    #1
    \fp_to_tl_small_zeros:NNNNNNNNN #2
  \tex_fi:D
}
\cs_new_nopar:Npn \fp_to_tl_small_aux:w #1 . #2 e #3 \q_stop {
  #1
  \fp_to_tl_large_zeros:NNNNNNNNN #2
  e #3
}
%    \end{macrocode}
% Rather than a complex recursion, the tests for finding trailing zeros
% are written out long-hand.  The difference between the two is only the
% need for a decimal marker.
%    \begin{macrocode}
\cs_new_nopar:Npn \fp_to_tl_large_zeros:NNNNNNNNN #1#2#3#4#5#6#7#8#9 {
  \tex_ifnum:D #9 = \c_zero
    \tex_ifnum:D #8 = \c_zero
      \tex_ifnum:D #7 = \c_zero
        \tex_ifnum:D #6 = \c_zero
          \tex_ifnum:D #5 = \c_zero
            \tex_ifnum:D #4 = \c_zero
              \tex_ifnum:D #3 = \c_zero
                \tex_ifnum:D #2 = \c_zero
                  \tex_ifnum:D #1 = \c_zero
                  \tex_else:D
                    . #1
                  \tex_fi:D
                \tex_else:D
                  . #1#2    
                \tex_fi:D
              \tex_else:D
                . #1#2#3 
              \tex_fi:D  
            \tex_else:D
              . #1#2#3#4
            \tex_fi:D
          \tex_else:D
            . #1#2#3#4#5
          \tex_fi:D     
        \tex_else:D
          . #1#2#3#4#5#6
        \tex_fi:D
      \tex_else:D
        . #1#2#3#4#5#6#7
      \tex_fi:D
    \tex_else:D
       . #1#2#3#4#5#6#7#8
    \tex_fi:D
  \tex_else:D
    . #1#2#3#4#5#6#7#8#9
  \tex_fi:D
}
\cs_new_nopar:Npn \fp_to_tl_small_zeros:NNNNNNNNN #1#2#3#4#5#6#7#8#9 {
  \tex_ifnum:D #9 = \c_zero
    \tex_ifnum:D #8 = \c_zero
      \tex_ifnum:D #7 = \c_zero
        \tex_ifnum:D #6 = \c_zero
          \tex_ifnum:D #5 = \c_zero
            \tex_ifnum:D #4 = \c_zero
              \tex_ifnum:D #3 = \c_zero
                \tex_ifnum:D #2 = \c_zero
                  \tex_ifnum:D #1 = \c_zero
                  \tex_else:D
                    #1
                  \tex_fi:D
                \tex_else:D
                  #1#2    
                \tex_fi:D
              \tex_else:D
                #1#2#3 
              \tex_fi:D  
            \tex_else:D
              #1#2#3#4
            \tex_fi:D
          \tex_else:D
            #1#2#3#4#5
          \tex_fi:D     
        \tex_else:D
          #1#2#3#4#5#6
        \tex_fi:D
      \tex_else:D
        #1#2#3#4#5#6#7
      \tex_fi:D
    \tex_else:D
       #1#2#3#4#5#6#7#8
    \tex_fi:D
  \tex_else:D
    #1#2#3#4#5#6#7#8#9
  \tex_fi:D
}
%    \end{macrocode}
% Some quick `return a few' functions.   
%    \begin{macrocode}
\cs_new_nopar:Npn \fp_use_iix_ix:NNNNNNNNN #1#2#3#4#5#6#7#8#9 {#8#9}
\cs_new_nopar:Npn \fp_use_ix:NNNNNNNNN #1#2#3#4#5#6#7#8#9 {#9}
\cs_new_nopar:Npn \fp_use_i_to_vii:NNNNNNNNN #1#2#3#4#5#6#7#8#9 {
  #1#2#3#4#5#6#7
}
\cs_new_nopar:Npn \fp_use_i_to_iix:NNNNNNNNN #1#2#3#4#5#6#7#8#9 {
  #1#2#3#4#5#6#7#8
}
%    \end{macrocode}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%
%\subsection{Rounding numbers}
%
% The results may well need to be rounded. A couple of related functions
% to do this for a stored value.
% 
%\begin{macro}{\fp_round_figures:Nn}
%\begin{macro}{\fp_round_figures:cn}
%\begin{macro}{\fp_ground_figures:Nn}
%\begin{macro}{\fp_ground_figures:cn}
%\begin{macro}[aux]{\fp_round_figures_aux:NNn} 
% Rounding to figures needs only an adjustment to the target by one
% (as the target is in decimal places).
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_round_figures:Nn {
  \fp_round_figures_aux:NNn \tl_set:Nn
}
\cs_generate_variant:Nn \fp_round_figures:Nn { c }
\cs_new_protected_nopar:Npn \fp_ground_figures:Nn {
  \fp_round_figures_aux:NNn \tl_gset:Nn
}
\cs_generate_variant:Nn \fp_ground_figures:Nn { c }
\cs_new_protected_nopar:Npn \fp_round_figures_aux:NNn #1#2#3 {
  \group_begin:
    \fp_read:N #2
    \int_set:Nn \l_fp_round_target_int { #3 - 1 }
    \tex_ifnum:D \l_fp_round_target_int < \c_ten
      \exp_after:wN \fp_round:
    \tex_fi:D
    \tex_advance:D \l_fp_input_a_decimal_int \c_one_thousand_million
    \cs_set_protected_nopar:Npx \fp_tmp:w
      {
        \group_end:
        #1 \exp_not:N #2
          {
            \tex_ifnum:D \l_fp_input_a_sign_int < \c_zero
              -
            \tex_else:D
              +  
            \tex_fi:D  
            \int_use:N \l_fp_input_a_integer_int
            .
            \exp_after:wN \use_none:n 
              \int_use:N \l_fp_input_a_decimal_int
            e
            \int_use:N \l_fp_input_a_exponent_int
          }
      }
  \fp_tmp:w
}
%    \end{macrocode}
%\end{macro} 
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%
%\begin{macro}{\fp_round_places:Nn}
%\begin{macro}{\fp_round_places:cn}
%\begin{macro}{\fp_ground_places:Nn}
%\begin{macro}{\fp_ground_places:cn}
%\begin{macro}[aux]{\fp_round_places_aux:NNn} 
% Rounding to places needs an adjustment for the exponent value, which
% will mean that everything should be correct.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_round_places:Nn {
  \fp_round_places_aux:NNn \tl_set:Nn
}
\cs_generate_variant:Nn \fp_round_places:Nn { c }
\cs_new_protected_nopar:Npn \fp_ground_places:Nn {
  \fp_round_places_aux:NNn \tl_gset:Nn
}
\cs_generate_variant:Nn \fp_ground_places:Nn { c }
\cs_new_protected_nopar:Npn \fp_round_places_aux:NNn #1#2#3 {
  \group_begin:
    \fp_read:N #2
    \int_set:Nn \l_fp_round_target_int 
      { #3 + \l_fp_input_a_exponent_int }
    \tex_ifnum:D \l_fp_round_target_int < \c_ten
      \exp_after:wN \fp_round:
    \tex_fi:D
    \tex_advance:D \l_fp_input_a_decimal_int \c_one_thousand_million
    \cs_set_protected_nopar:Npx \fp_tmp:w
      {
        \group_end:
        #1 \exp_not:N #2
          {
            \tex_ifnum:D \l_fp_input_a_sign_int < \c_zero
              -
            \tex_else:D
              +  
            \tex_fi:D  
            \int_use:N \l_fp_input_a_integer_int
            .
            \exp_after:wN \use_none:n 
              \int_use:N \l_fp_input_a_decimal_int
            e
            \int_use:N \l_fp_input_a_exponent_int
          }
      }
  \fp_tmp:w
}
%    \end{macrocode}
%\end{macro} 
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}  
%
%\begin{macro}{\fp_round:}
%\begin{macro}{\fp_round_aux:NNNNNNNNN}
%\begin{macro}{\fp_round_loop:N}
% The rounding approach is the same for decimal places and significant
% figures. There are always nine decimal digits to round, so the code
% can be written to account for this. The basic logic is simply to 
% find the rounding, track any carry digit and move along. At the end
% of the loop there is a possible shuffle if the integer part has 
% become \( 10 \).
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_round: {
  \bool_set_false:N \l_fp_round_carry_bool
  \l_fp_round_position_int \c_eight
  \tl_clear:N \l_fp_round_decimal_tl
  \tex_advance:D \l_fp_input_a_decimal_int \c_one_thousand_million
  \exp_after:wN \use_i:nn \exp_after:wN 
    \fp_round_aux:NNNNNNNNN \int_use:N \l_fp_input_a_decimal_int
}
\cs_new_protected_nopar:Npn \fp_round_aux:NNNNNNNNN #1#2#3#4#5#6#7#8#9 {
  \fp_round_loop:N #9#8#7#6#5#4#3#2#1
  \bool_if:NT \l_fp_round_carry_bool
    { \tex_advance:D \l_fp_input_a_integer_int \c_one }
  \l_fp_input_a_decimal_int \l_fp_round_decimal_tl \scan_stop:
  \tex_ifnum:D \l_fp_input_a_integer_int < \c_ten
  \tex_else:D
    \l_fp_input_a_integer_int \c_one
    \tex_divide:D \l_fp_input_a_decimal_int \c_ten
    \tex_advance:D \l_fp_input_a_exponent_int \c_one
  \tex_fi:D
}
\cs_new_protected_nopar:Npn \fp_round_loop:N #1 {
  \tex_ifnum:D \l_fp_round_position_int < \l_fp_round_target_int
    \bool_if:NTF \l_fp_round_carry_bool
      { \l_fp_tmp_int \etex_numexpr:D #1 + \c_one \scan_stop: }
      { \l_fp_tmp_int \etex_numexpr:D #1 \scan_stop: }
    \tex_ifnum:D \l_fp_tmp_int = \c_ten
      \l_fp_tmp_int \c_zero
    \tex_else:D 
      \bool_set_false:N \l_fp_round_carry_bool  
    \tex_fi:D  
    \tl_set:Nx \l_fp_round_decimal_tl
      { \int_use:N \l_fp_tmp_int \l_fp_round_decimal_tl }    
  \tex_else:D
    \tl_set:Nx \l_fp_round_decimal_tl { 0 \l_fp_round_decimal_tl }
    \tex_ifnum:D \l_fp_round_position_int = \l_fp_round_target_int
      \tex_ifnum:D #1 > \c_four
        \bool_set_true:N \l_fp_round_carry_bool 
      \tex_fi:D
    \tex_fi:D  
  \tex_fi:D  
  \tex_advance:D \l_fp_round_position_int \c_minus_one
  \tex_ifnum:D \l_fp_round_position_int > \c_minus_one
    \exp_after:wN \fp_round_loop:N
  \tex_fi:D
}
%    \end{macrocode}
%\end{macro}
%\end{macro}
%\end{macro}
%
%\subsection{Unary functions}
%
%\begin{macro}{\fp_abs:N}
%\begin{macro}{\fp_abs:c}
%\begin{macro}{\fp_gabs:N}
%\begin{macro}{\fp_gabs:c}
%\begin{macro}[aux]{\fp_abs_aux:NN}
% Setting the absolute value is easy: read the value, ignore the sign,
% return the result.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_abs:N {
  \fp_abs_aux:NN \tl_set:Nn 
}
\cs_new_protected_nopar:Npn \fp_gabs:N {
  \fp_abs_aux:NN \tl_gset:Nn 
}
\cs_generate_variant:Nn \fp_abs:N  { c }
\cs_generate_variant:Nn \fp_gabs:N { c }
\cs_new_protected_nopar:Npn \fp_abs_aux:NN #1#2 {
  \group_begin:
    \fp_read:N #2
    \tex_advance:D \l_fp_input_a_decimal_int \c_one_thousand_million
    \cs_set_protected_nopar:Npx \fp_tmp:w
      {
        \group_end:
        #1 \exp_not:N #2
          {
            +
            \int_use:N \l_fp_input_a_integer_int
            .
            \exp_after:wN \use_none:n 
              \int_use:N \l_fp_input_a_decimal_int
            e
            \int_use:N \l_fp_input_a_exponent_int
          }
      }
  \fp_tmp:w
}
%    \end{macrocode}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%
%\begin{macro}{\fp_neg:N}
%\begin{macro}{\fp_neg:c}
%\begin{macro}{\fp_gneg:N}
%\begin{macro}{\fp_gneg:c}
%\begin{macro}[aux]{\fp_neg:NN}
% Just a bit more complex: read the input, reverse the sign and 
% output the result.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_neg:N {
  \fp_neg_aux:NN \tl_set:Nn 
}
\cs_new_protected_nopar:Npn \fp_gneg:N {
  \fp_neg_aux:NN \tl_gset:Nn 
}
\cs_generate_variant:Nn \fp_neg:N  { c }
\cs_generate_variant:Nn \fp_gneg:N { c }
\cs_new_protected_nopar:Npn \fp_neg_aux:NN #1#2 {
  \group_begin:
    \fp_read:N #2
    \tex_advance:D \l_fp_input_a_decimal_int \c_one_thousand_million
    \tl_set:Nx \l_fp_tmp_tl
      {
        \tex_ifnum:D \l_fp_input_a_sign_int < \c_zero
          +
        \tex_else:D
          -
        \tex_fi:D  
        \int_use:N \l_fp_input_a_integer_int
        .
        \exp_after:wN \use_none:n 
          \int_use:N \l_fp_input_a_decimal_int
        e
        \int_use:N \l_fp_input_a_exponent_int
      }
  \exp_after:wN \group_end: \exp_after:wN
  #1 \exp_after:wN #2 \exp_after:wN { \l_fp_tmp_tl }
}
%    \end{macrocode}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%
%\subsection{Basic arithmetic}
%  
%\begin{macro}{\fp_add:Nn}
%\begin{macro}{\fp_add:cn}
%\begin{macro}{\fp_gadd:Nn}
%\begin{macro}{\fp_gadd:cn}
%\begin{macro}[aux]{\fp_add_aux:NNn}
%\begin{macro}[aux]{\fp_add_core:}
%\begin{macro}[aux]{\fp_add_sum:}
%\begin{macro}[aux]{\fp_add_difference:}
% The various addition functions are simply different ways to call the
% single master function below. This pattern is repeated for the
% other arithmetic functions.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_add:Nn {
  \fp_add_aux:NNn \tl_set:Nn 
}
\cs_new_protected_nopar:Npn \fp_gadd:Nn {
  \fp_add_aux:NNn \tl_gset:Nn 
}
\cs_generate_variant:Nn \fp_add:Nn   { c }
\cs_generate_variant:Nn \fp_gadd:Nn  { c }
%    \end{macrocode}
% Addition takes place using one of two paths. If the signs of the 
% two parts are the same, they are simply combined. On the other
% hand, if the signs are different the calculation finds this
% difference.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_add_aux:NNn #1#2#3 {
  \group_begin:
    \fp_read:N #2
    \fp_split:Nn b {#3}
    \fp_standardise:NNNN
      \l_fp_input_b_sign_int
      \l_fp_input_b_integer_int
      \l_fp_input_b_decimal_int
      \l_fp_input_b_exponent_int
    \fp_add_core:
  \fp_tmp:w #1#2
}
\cs_new_protected_nopar:Npn \fp_add_core: {  
  \fp_level_input_exponents:
  \tex_ifnum:D 
    \etex_numexpr:D
      \l_fp_input_a_sign_int * \l_fp_input_b_sign_int
    \scan_stop:
      > \c_zero
    \exp_after:wN \fp_add_sum:  
  \tex_else:D
    \exp_after:wN \fp_add_difference:     
  \tex_fi:D
  \l_fp_output_exponent_int \l_fp_input_a_exponent_int
  \fp_standardise:NNNN
    \l_fp_output_sign_int
    \l_fp_output_integer_int
    \l_fp_output_decimal_int
    \l_fp_output_exponent_int
  \cs_set_protected_nopar:Npx \fp_tmp:w ##1##2
    {
      \group_end:
      ##1 ##2 
        {
          \tex_ifnum:D \l_fp_output_sign_int < \c_zero
            -
          \tex_else:D
            +
          \tex_fi:D  
          \int_use:N \l_fp_output_integer_int
          .
          \exp_after:wN \use_none:n 
            \tex_number:D \etex_numexpr:D
               \l_fp_output_decimal_int + \c_one_thousand_million
          e
          \int_use:N \l_fp_output_exponent_int
        } 
    }
}
%    \end{macrocode}
% Finding the sum of two numbers is trivially easy.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_add_sum: {
  \l_fp_output_sign_int \l_fp_input_a_sign_int
  \l_fp_output_integer_int
    \etex_numexpr:D
      \l_fp_input_a_integer_int + \l_fp_input_b_integer_int
    \scan_stop:
  \l_fp_output_decimal_int
    \etex_numexpr:D
      \l_fp_input_a_decimal_int + \l_fp_input_b_decimal_int
    \scan_stop:
  \tex_ifnum:D \l_fp_output_decimal_int < \c_one_thousand_million
  \tex_else:D
    \tex_advance:D \l_fp_output_integer_int \c_one
    \tex_advance:D \l_fp_output_decimal_int -\c_one_thousand_million
  \tex_fi:D  
}
%    \end{macrocode}
% When the signs of the two parts of the input are different, the 
% absolute difference is worked out first. There is then a calculation
% to see which way around everything has worked out, so that the final
% sign is correct. The difference might also give a zero result with
% a negative sign, which is reversed as zero is regarded as positive.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_add_difference: {
  \l_fp_output_integer_int
    \etex_numexpr:D
      \l_fp_input_a_integer_int - \l_fp_input_b_integer_int
    \scan_stop:
  \l_fp_output_decimal_int
    \etex_numexpr:D
      \l_fp_input_a_decimal_int - \l_fp_input_b_decimal_int
    \scan_stop:
  \tex_ifnum:D \l_fp_output_decimal_int < \c_zero
    \tex_advance:D \l_fp_output_integer_int \c_minus_one
    \tex_advance:D \l_fp_output_decimal_int \c_one_thousand_million
  \tex_fi:D
  \tex_ifnum:D \l_fp_output_integer_int < \c_zero
    \l_fp_output_sign_int \l_fp_input_b_sign_int 
    \tex_ifnum:D \l_fp_output_decimal_int = \c_zero
      \l_fp_output_integer_int -\l_fp_output_integer_int
    \tex_else:D
      \l_fp_output_decimal_int 
        \etex_numexpr:D
          \c_one_thousand_million - \l_fp_output_decimal_int 
        \scan_stop:
      \l_fp_output_integer_int
         \etex_numexpr:D
           - \l_fp_output_integer_int - \c_one
         \scan_stop:
    \tex_fi:D
  \tex_else:D
    \l_fp_output_sign_int \l_fp_input_a_sign_int  
  \tex_fi:D   
}
%    \end{macrocode}
%\end{macro}
%\end{macro} 
%\end{macro}
%\end{macro} 
%\end{macro} 
%\end{macro}
%\end{macro} 
%\end{macro}
%
%\begin{macro}{\fp_sub:Nn}
%\begin{macro}{\fp_sub:cn}
%\begin{macro}{\fp_gsub:Nn}
%\begin{macro}{\fp_gsub:cn}
%\begin{macro}[aux]{\fp_sub_aux:NNn}
% Subtraction is essentially the same as addition, but with the sign
% of the second component reversed. Thus the core of the two function 
% groups is the same, with just a little set up here.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_sub:Nn {
  \fp_sub_aux:NNn \tl_set:Nn
}
\cs_new_protected_nopar:Npn \fp_gsub:Nn {
  \fp_sub_aux:NNn \tl_gset:Nn
}
\cs_generate_variant:Nn \fp_sub:Nn   { c }
\cs_generate_variant:Nn \fp_gsub:Nn  { c }
\cs_new_protected_nopar:Npn \fp_sub_aux:NNn #1#2#3 {
  \group_begin:
    \fp_read:N #2
    \fp_split:Nn b {#3}
    \fp_standardise:NNNN
      \l_fp_input_b_sign_int
      \l_fp_input_b_integer_int
      \l_fp_input_b_decimal_int
      \l_fp_input_b_exponent_int
    \tex_multiply:D \l_fp_input_b_sign_int \c_minus_one
    \fp_add_core:
  \fp_tmp:w #1#2
}
%    \end{macrocode}
%\end{macro} 
%\end{macro} 
%\end{macro}
%\end{macro} 
%\end{macro}
%
%\begin{macro}{\fp_mul:Nn}
%\begin{macro}{\fp_mul:cn}
%\begin{macro}{\fp_gmul:Nn}
%\begin{macro}{\fp_gmul:cn}
%\begin{macro}[aux]{\fp_mul_aux:NNn}
%\begin{macro}[aux]{\fp_mul_int:}
%\begin{macro}[aux]{\fp_mul_split:NNNN}
%\begin{macro}[aux]{\fp_mul_split:w}
%\begin{macro}[aux]{\fp_mul_end_level:}
%\begin{macro}[aux]{\fp_mul_end_level:NNNNNNNNN}
% The pattern is much the same for multiplication.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_mul:Nn {
  \fp_mul_aux:NNn \tl_set:Nn 
}
\cs_new_protected_nopar:Npn \fp_gmul:Nn {
  \fp_mul_aux:NNn \tl_gset:Nn 
}
\cs_generate_variant:Nn \fp_mul:Nn  { c }
\cs_generate_variant:Nn \fp_gmul:Nn { c }
%    \end{macrocode}
% The approach to multiplication is as follows. First, the two numbers
% are split into blocks of three digits. These are then multiplied 
% together to find products for each group of three output digits. This 
% is al written out in full for speed reasons. Between each block of
% three digits in the output, there is a carry step. The very lowest
% digits are not calculated, while
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_mul_aux:NNn #1#2#3 {
  \group_begin:
    \fp_read:N #2
    \fp_split:Nn b {#3}
    \fp_standardise:NNNN
      \l_fp_input_b_sign_int
      \l_fp_input_b_integer_int
      \l_fp_input_b_decimal_int
      \l_fp_input_b_exponent_int
    \fp_mul_int:
    \l_fp_output_exponent_int
      \etex_numexpr:D 
        \l_fp_input_a_exponent_int + \l_fp_input_b_exponent_int
      \scan_stop:  
    \fp_standardise:NNNN
      \l_fp_output_sign_int
      \l_fp_output_integer_int
      \l_fp_output_decimal_int
      \l_fp_output_exponent_int
    \cs_set_protected_nopar:Npx \fp_tmp:w
      {
        \group_end:
        #1 \exp_not:N #2
          {
            \tex_ifnum:D 
              \etex_numexpr:D 
                \l_fp_input_a_sign_int * \l_fp_input_b_sign_int
                < \c_zero
              \tex_ifnum:D
                \etex_numexpr:D 
                  \l_fp_output_integer_int + \l_fp_output_decimal_int
                  = \c_zero
                +    
              \tex_else:D    
                -
              \tex_fi:D
            \tex_else:D
              +
           \tex_fi:D
            \int_use:N \l_fp_output_integer_int
            .
            \exp_after:wN \use_none:n 
              \tex_number:D \etex_numexpr:D
                 \l_fp_output_decimal_int + \c_one_thousand_million
            e
            \int_use:N \l_fp_output_exponent_int
          }
      }
  \fp_tmp:w
}
%    \end{macrocode}
% Done separately so that the internal use is a bit easier.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_mul_int: {
  \fp_mul_split:NNNN \l_fp_input_a_decimal_int
    \l_fp_mul_a_i_int \l_fp_mul_a_ii_int \l_fp_mul_a_iii_int
  \fp_mul_split:NNNN \l_fp_input_b_decimal_int
    \l_fp_mul_b_i_int \l_fp_mul_b_ii_int \l_fp_mul_b_iii_int
  \l_fp_mul_output_int \c_zero
  \tl_clear:N \l_fp_mul_output_tl
  \fp_mul_product:NN \l_fp_mul_a_i_int         \l_fp_mul_b_iii_int
  \fp_mul_product:NN \l_fp_mul_a_ii_int        \l_fp_mul_b_ii_int
  \fp_mul_product:NN \l_fp_mul_a_iii_int       \l_fp_mul_b_i_int
  \tex_divide:D \l_fp_mul_output_int \c_one_thousand
  \fp_mul_product:NN \l_fp_input_a_integer_int \l_fp_mul_b_iii_int
  \fp_mul_product:NN \l_fp_mul_a_i_int         \l_fp_mul_b_ii_int
  \fp_mul_product:NN \l_fp_mul_a_ii_int        \l_fp_mul_b_i_int
  \fp_mul_product:NN \l_fp_mul_a_iii_int       \l_fp_input_b_integer_int
  \fp_mul_end_level:
  \fp_mul_product:NN \l_fp_input_a_integer_int \l_fp_mul_b_ii_int
  \fp_mul_product:NN \l_fp_mul_a_i_int         \l_fp_mul_b_i_int
  \fp_mul_product:NN \l_fp_mul_a_ii_int        \l_fp_input_b_integer_int
  \fp_mul_end_level:
  \fp_mul_product:NN \l_fp_input_a_integer_int \l_fp_mul_b_i_int
  \fp_mul_product:NN \l_fp_mul_a_i_int         \l_fp_input_b_integer_int
  \fp_mul_end_level:
  \l_fp_output_decimal_int 0 \l_fp_mul_output_tl \scan_stop:
  \tl_clear:N \l_fp_mul_output_tl
  \fp_mul_product:NN \l_fp_input_a_integer_int \l_fp_input_b_integer_int
  \fp_mul_end_level:
  \l_fp_output_integer_int 0 \l_fp_mul_output_tl \scan_stop:
}
%    \end{macrocode}
% The split works by making a \( 10 \) digit number, from which 
% the first digit can then be dropped using a delimited argument. The
% groups of three digits are then assigned to the various parts of
% the input: notice that "##9" contains the last two digits of the
% smallest part of the input.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_mul_split:NNNN #1#2#3#4 {
  \tex_advance:D #1 \c_one_thousand_million
  \cs_set_protected_nopar:Npn \fp_mul_split_aux:w
    ##1##2##3##4##5##6##7##8##9 \q_stop {
      #2 ##2##3##4 \scan_stop:
      #3 ##5##6##7 \scan_stop:
      #4 ##8##9    \scan_stop:
    }
  \exp_after:wN \fp_mul_split_aux:w \int_use:N #1 \q_stop  
}
\cs_new_protected_nopar:Npn \fp_mul_product:NN #1#2 {
  \l_fp_mul_output_int
    \etex_numexpr:D \l_fp_mul_output_int + #1 * #2 \scan_stop:
}
%    \end{macrocode}
% At the end of each output group of three, there is a transfer of
% information so that there is no danger of an overflow. This is done by
% expansion to keep the number of calculations down.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_mul_end_level: {
  \tex_advance:D \l_fp_mul_output_int \c_one_thousand_million
  \exp_after:wN \use_i:nn \exp_after:wN 
    \fp_mul_end_level:NNNNNNNNN \int_use:N \l_fp_mul_output_int
}
\cs_new_protected_nopar:Npn \fp_mul_end_level:NNNNNNNNN 
  #1#2#3#4#5#6#7#8#9 {
  \tl_set:Nx \l_fp_mul_output_tl { #7#8#9 \l_fp_mul_output_tl }
  \l_fp_mul_output_int #1#2#3#4#5#6 \scan_stop:
}
%    \end{macrocode}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro} 
%\end{macro} 
%\end{macro}
%\end{macro}
%\end{macro}
%
%\begin{macro}{\fp_div:Nn}
%\begin{macro}{\fp_div:cn}
%\begin{macro}{\fp_gdiv:Nn}
%\begin{macro}{\fp_gdiv:cn}
%\begin{macro}[aux]{\fp_div_aux:NNn}
%\begin{macro}[aux]{\fp_div_aux:}
%\begin{macro}[aux]{\fp_div_loop:}
%\begin{macro}[aux]{\fp_div_divide:}
%\begin{macro}[aux]{\fp_div_divide_aux:}
%\begin{macro}[aux]{\fp_div_store:}
%\begin{macro}[aux]{\fp_div_store_integer:}
%\begin{macro}[aux]{\fp_div_store_decimal:}
% The pattern is much the same for multiplication.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_div:Nn {
  \fp_div_aux:NNn \tl_set:Nn 
}
\cs_new_protected_nopar:Npn \fp_gdiv:Nn {
  \fp_div_aux:NNn \tl_gset:Nn 
}
\cs_generate_variant:Nn \fp_div:Nn  { c }
\cs_generate_variant:Nn \fp_gdiv:Nn { c }

%    \end{macrocode}
% Division proper starts with a couple of tests. If the denominator is
% zero then a error is issued. On the other hand, if the numerator is
% zero then the result must be \( 0.0 \) and can be given with no
% further work. 
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_div_aux:NNn #1#2#3 {
  \group_begin:
    \fp_read:N #2
    \fp_split:Nn b {#3}
    \fp_standardise:NNNN
      \l_fp_input_b_sign_int
      \l_fp_input_b_integer_int
      \l_fp_input_b_decimal_int
      \l_fp_input_b_exponent_int
    \tex_ifnum:D
      \etex_numexpr:D 
        \l_fp_input_b_integer_int + \l_fp_input_b_decimal_int
        = \c_zero
      \cs_set_protected_nopar:Npx \fp_tmp:w ##1##2 
        { 
          \group_end:
          #1 \exp_not:N #2 { \c_undefined_fp } 
        } 
    \tex_else:D  
      \tex_ifnum:D
        \etex_numexpr:D 
          \l_fp_input_a_integer_int + \l_fp_input_a_decimal_int
          = \c_zero
        \cs_set_protected_nopar:Npx \fp_tmp:w ##1##2 
          { 
            \group_end:
            #1 \exp_not:N #2 { \c_zero_fp } 
          } 
      \tex_else:D  
        \exp_after:wN \exp_after:wN \exp_after:wN 
          \fp_div_aux:  
      \tex_fi:D   
    \tex_fi:D 
  \fp_tmp:w #1#2  
}
%    \end{macrocode} 
% The main division algorithm works byt finding how many times "b" can
% be removed from "a", storing the result and doing the subtraction.
% Input "a" is then multiplied by \( 10 \), and the process is repeated.
% The looping ends either when there is nothing left of "a" 
% (\emph{i.e.}~an exact result) or when the code reaches the ninth 
% decimal place. Most of the process takes place in the loop function
% below.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_div_aux: {
  \l_fp_output_integer_int \c_zero
  \l_fp_output_decimal_int \c_zero
  \cs_set_eq:NN \fp_div_store: \fp_div_store_integer:
  \l_fp_div_offset_int \c_one_hundred_million
  \fp_div_loop:
  \l_fp_output_exponent_int  
    \etex_numexpr:D 
      \l_fp_input_a_exponent_int - \l_fp_input_b_exponent_int 
    \scan_stop:
  \fp_standardise:NNNN
    \l_fp_output_sign_int
    \l_fp_output_integer_int
    \l_fp_output_decimal_int
    \l_fp_output_exponent_int
  \cs_set_protected_nopar:Npx \fp_tmp:w ##1##2 
    {
      \group_end:
      ##1 ##2
        {
          \tex_ifnum:D 
            \etex_numexpr:D 
              \l_fp_input_a_sign_int * \l_fp_input_b_sign_int
              < \c_zero
            \tex_ifnum:D
              \etex_numexpr:D 
                \l_fp_output_integer_int + \l_fp_output_decimal_int
                = \c_zero
              +    
            \tex_else:D    
              -
            \tex_fi:D
          \tex_else:D
            +
          \tex_fi:D
          \int_use:N \l_fp_output_integer_int
          .
          \exp_after:wN \use_none:n 
            \tex_number:D \etex_numexpr:D
               \l_fp_output_decimal_int + \c_one_thousand_million
          e
          \int_use:N \l_fp_output_exponent_int
        }  
    }
}
%    \end{macrocode}
% The main loop implements the approach described above. The storing
% function is done as a function so that the integer and decimal parts
% can be done separately but rapidly.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_div_loop: {
  \l_fp_count_int \c_zero
  \fp_div_divide: 
  \fp_div_store:
  \tex_multiply:D \l_fp_input_a_integer_int \c_ten
  \tex_advance:D \l_fp_input_a_decimal_int \c_one_thousand_million
  \exp_after:wN \fp_div_loop_step:w 
    \int_use:N \l_fp_input_a_decimal_int \q_stop
  \tex_ifnum:D
    \etex_numexpr:D
      \l_fp_input_a_integer_int + \l_fp_input_a_decimal_int
      > \c_zero
      \tex_ifnum:D \l_fp_div_offset_int > \c_zero 
        \exp_after:wN \exp_after:wN \exp_after:wN 
          \fp_div_loop:
      \tex_fi:D 
  \tex_fi:D      
}
%    \end{macrocode}
% Checking to see if the numerator can be divides needs quite an
% involved check. Either the integer part has to be bigger for the
% numerator or, if it is not smaller then the decimal part of the
% numerator must not be smaller than that of the denominator. Once
% the test is right the rest is much as elsewhere.  
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_div_divide: {
  \tex_ifnum:D \l_fp_input_a_integer_int > \l_fp_input_b_integer_int
    \exp_after:wN \fp_div_divide_aux:
  \tex_else:D 
    \tex_ifnum:D \l_fp_input_a_integer_int < \l_fp_input_b_integer_int 
    \tex_else:D
      \tex_ifnum:D 
        \l_fp_input_a_decimal_int < \l_fp_input_b_decimal_int
      \tex_else:D
        \exp_after:wN \exp_after:wN \exp_after:wN
          \exp_after:wN \exp_after:wN \exp_after:wN
          \exp_after:wN \fp_div_divide_aux:
      \tex_fi:D  
    \tex_fi:D
  \tex_fi:D
}
\cs_new_protected_nopar:Npn \fp_div_divide_aux: {
  \tex_advance:D \l_fp_count_int \c_one
  \tex_advance:D \l_fp_input_a_integer_int -\l_fp_input_b_integer_int
  \tex_advance:D \l_fp_input_a_decimal_int -\l_fp_input_b_decimal_int
  \tex_ifnum:D \l_fp_input_a_decimal_int < \c_zero
    \tex_advance:D \l_fp_input_a_integer_int \c_minus_one
    \tex_advance:D \l_fp_input_a_decimal_int \c_one_thousand_million
  \tex_fi:D
  \fp_div_divide:
}
%    \end{macrocode}
% Storing the number of each division is done differently for the
% integer and decimal. The integer is easy and a one-off, while the
% decimal also needs to account for the position of the digit to store. 
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_div_store: { }
\cs_new_protected_nopar:Npn \fp_div_store_integer: {
  \l_fp_output_integer_int \l_fp_count_int
  \cs_set_eq:NN \fp_div_store: \fp_div_store_decimal:  
}
\cs_new_protected_nopar:Npn \fp_div_store_decimal: {
  \l_fp_output_decimal_int
    \etex_numexpr:D
      \l_fp_output_decimal_int + 
      \l_fp_count_int * \l_fp_div_offset_int
    \scan_stop:
  \tex_divide:D \l_fp_div_offset_int \c_ten
}
\cs_new_protected_nopar:Npn 
  \fp_div_loop_step:w #1#2#3#4#5#6#7#8#9 \q_stop {
  \l_fp_input_a_integer_int 
    \etex_numexpr:D
      #2 + \l_fp_input_a_integer_int 
    \scan_stop:
  \l_fp_input_a_decimal_int #3#4#5#6#7#8#9 0 \scan_stop:
}
%    \end{macrocode}
%\end{macro} 
%\end{macro} 
%\end{macro}
%\end{macro} 
%\end{macro} 
%\end{macro}
%\end{macro} 
%\end{macro} 
%\end{macro} 
%\end{macro}
%\end{macro} 
%\end{macro}
%
%\subsection{Tests for special values}
%
%\begin{macro}{\fp_if_undefined_p:N}
%\begin{macro}[TF]{\fp_if_undefined:N}
% Testing for an undefined value is easy.
%    \begin{macrocode}
\prg_new_conditional:Npnn \fp_if_undefined:N #1 { p , T , F , TF } {
  \tex_ifx:D #1 \c_undefined_fp
    \prg_return_true:
  \tex_else:D
    \prg_return_false:
  \tex_fi:D
}
%    \end{macrocode}
%\end{macro}
%\end{macro}
%
%\begin{macro}{\fp_if_zero_p:N}
%\begin{macro}[TF]{\fp_if_zero:N}
% Testing for a zero fixed-point is also easy.
%    \begin{macrocode}
\prg_new_conditional:Npnn \fp_if_zero:N #1 { p , T , F , TF } {
  \tex_ifx:D #1 \c_zero_fp
    \prg_return_true:
  \tex_else:D
    \prg_return_false:
  \tex_fi:D
}
%    \end{macrocode}
%\end{macro}
%\end{macro}
%
%\subsection{Floating-point conditionals}
%
%\begin{macro}[TF]{\fp_compare:nNn}
%\begin{macro}[TF]{\fp_compare:NNN}
%\begin{macro}[aux]{\fp_compare_aux:N}
%\begin{macro}[aux]{\fp_compare_=:}
%\begin{macro}[aux]{\fp_compare_<:}
%\begin{macro}[aux]{\fp_compare_>:}
%\begin{macro}[aux]{\fp_compare_absolute_a>b:}
%\begin{macro}[aux]{\fp_compare_absolute_a<b:}
% The idea for the comparisons is to provide two versions: slower and
% faster. The lead off for both is the same: get the two numbers 
% read and then look for a function to handle the comparison.
%    \begin{macrocode}
\prg_new_protected_conditional:Npnn \fp_compare:nNn #1#2#3 
  { T , F , TF } {
  \group_begin:
    \fp_split:Nn a {#1}
    \fp_standardise:NNNN
      \l_fp_input_a_sign_int
      \l_fp_input_a_integer_int
      \l_fp_input_a_decimal_int
      \l_fp_input_a_exponent_int
    \fp_split:Nn b {#3}
    \fp_standardise:NNNN
      \l_fp_input_b_sign_int
      \l_fp_input_b_integer_int
      \l_fp_input_b_decimal_int
      \l_fp_input_b_exponent_int
    \fp_compare_aux:N #2
}
\prg_new_protected_conditional:Npnn \fp_compare:NNN #1#2#3 
  { T , F , TF } {
  \group_begin:
    \fp_read:N #3
    \l_fp_input_b_sign_int     \l_fp_input_a_sign_int
    \l_fp_input_b_integer_int  \l_fp_input_a_integer_int
    \l_fp_input_b_decimal_int  \l_fp_input_a_decimal_int
    \l_fp_input_b_exponent_int \l_fp_input_a_exponent_int
    \fp_read:N #1
    \fp_compare_aux:N #2
}
\cs_new_protected_nopar:Npn \fp_compare_aux:N #1 {
  \cs_if_exist:cTF { fp_compare_#1: }
    { \use:c { fp_compare_#1: } }
    { 
      \group_end:
      \prg_return_false: 
    }
}
%    \end{macrocode}
% For equality, the test is pretty easy as things are either equal or
% they are not.   
%    \begin{macrocode}
\cs_new_protected_nopar:cpn { fp_compare_=: } {
  \tex_ifnum:D \l_fp_input_a_sign_int = \l_fp_input_b_sign_int
    \tex_ifnum:D \l_fp_input_a_integer_int = \l_fp_input_b_integer_int
      \tex_ifnum:D \l_fp_input_a_decimal_int = \l_fp_input_b_decimal_int
        \tex_ifnum:D 
          \l_fp_input_a_exponent_int = \l_fp_input_b_exponent_int
          \group_end:
          \prg_return_true:
        \tex_else:D
          \group_end:
          \prg_return_false:
        \tex_fi:D  
      \tex_else:D
        \group_end:
        \prg_return_false:
      \tex_fi:D
    \tex_else:D
      \group_end:
      \prg_return_false:
    \tex_fi:D
  \tex_else:D
    \group_end:
    \prg_return_false:
  \tex_fi:D  
}
%    \end{macrocode}
% For comparators life is a lot more complex, as there are three cases 
% for the integer part (equality as well as greater and less than). The
% code here is quite repetitive to keep speed up, and simply does 
% exhaustive checks.
%    \begin{macrocode}
\cs_new_protected_nopar:cpn { fp_compare_>: } {
  \tex_ifnum:D \l_fp_input_a_sign_int > \l_fp_input_b_sign_int
    \group_end:
    \prg_return_true:
  \tex_else:D  
    \tex_ifnum:D \l_fp_input_a_sign_int < \l_fp_input_b_sign_int
      \group_end:
      \prg_return_false:
    \tex_else:D
      \tex_ifnum:D \l_fp_input_a_sign_int > \c_zero
        \use:c { fp_compare_absolute_a > b: }
      \tex_else:D
        \use:c { fp_compare_absolute_a < b: }
      \tex_fi:D
    \tex_fi:D
  \tex_fi:D  
}
\cs_new_protected_nopar:cpn { fp_compare_<: } {
  \tex_ifnum:D \l_fp_input_b_sign_int > \l_fp_input_a_sign_int
    \group_end:
    \prg_return_true:
  \tex_else:D  
    \tex_ifnum:D \l_fp_input_b_sign_int < \l_fp_input_a_sign_int
      \group_end:
      \prg_return_false:
    \tex_else:D
      \tex_ifnum:D \l_fp_input_b_sign_int > \c_zero
        \use:c { fp_compare_absolute_a < b: }
      \tex_else:D
        \use:c { fp_compare_absolute_a > b: }
      \tex_fi:D
    \tex_fi:D
  \tex_fi:D   
}
\cs_new_protected_nopar:cpn { fp_compare_absolute_a > b: } {
  \tex_ifnum:D \l_fp_input_a_exponent_int > \l_fp_input_b_exponent_int
    \group_end:
    \prg_return_true:
  \tex_else:D  
    \tex_ifnum:D \l_fp_input_a_exponent_int < \l_fp_input_b_exponent_int
      \group_end:
      \prg_return_false:
    \tex_else:D  
      \tex_ifnum:D \l_fp_input_a_integer_int > \l_fp_input_b_integer_int
        \group_end:
        \prg_return_true:
      \tex_else:D
        \tex_ifnum:D 
          \l_fp_input_a_integer_int < \l_fp_input_b_integer_int
          \group_end:
          \prg_return_false:
        \tex_else:D
          \tex_ifnum:D 
            \l_fp_input_a_decimal_int > \l_fp_input_b_decimal_int
            \group_end:
            \prg_return_true:
          \tex_else:D
            \group_end:
            \prg_return_false:
          \tex_fi:D
        \tex_fi:D
      \tex_fi:D
    \tex_fi:D
  \tex_fi:D
}
\cs_new_protected_nopar:cpn { fp_compare_absolute_a < b: } {
  \tex_ifnum:D \l_fp_input_b_exponent_int > \l_fp_input_a_exponent_int
    \group_end:
    \prg_return_true:
  \tex_else:D  
    \tex_ifnum:D \l_fp_input_b_exponent_int < \l_fp_input_a_exponent_int
      \group_end:
      \prg_return_false:
    \tex_else:D  
      \tex_ifnum:D \l_fp_input_b_integer_int > \l_fp_input_a_integer_int
        \group_end:
        \prg_return_true:
      \tex_else:D
        \tex_ifnum:D 
          \l_fp_input_b_integer_int < \l_fp_input_a_integer_int
          \group_end:
          \prg_return_false:
        \tex_else:D
          \tex_ifnum:D 
            \l_fp_input_b_decimal_int > \l_fp_input_a_decimal_int
            \group_end:
            \prg_return_true:
          \tex_else:D
            \group_end:
            \prg_return_false:
          \tex_fi:D
        \tex_fi:D
      \tex_fi:D
    \tex_fi:D
  \tex_fi:D
}
%    \end{macrocode}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%\end{macro}
%
%\subsection{Messages}
%
%\begin{macro}{\fp_overflow_msg:}
% A generic overflow message, used whenever there is a possible
% overflow.
%    \begin{macrocode}
\msg_kernel_new:nnnn { fpu } { overflow } 
  { Number~too~big. }
  {
    The~input~given~is~too~big~for~the~LaTeX~floating~point~unit. \\
    Further~errors~may~well~occur!
  }
\cs_new_protected_nopar:Npn \fp_overflow_msg: {
  \msg_kernel_error:nn { fpu } { overflow }
}  
%    \end{macrocode}
%\end{macro}
%
%    \begin{macrocode}
%</initex|package>
%    \end{macrocode}
%
%\end{implementation}
%
%\PrintChanges
%
%\PrintIndex