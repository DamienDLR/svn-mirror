This is a generated file for the LaTeX (2e + expl3) validation system.
Don't change this file in any respect.
%% \CharacterTable
%%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%%   Digits        \0\1\2\3\4\5\6\7\8\9
%%   Exclamation   \!     Double quote  \"     Hash (number) \#
%%   Dollar        \$     Percent       \%     Ampersand     \&
%%   Acute accent  \'     Left paren    \(     Right paren   \)
%%   Asterisk      \*     Plus          \+     Comma         \,
%%   Minus         \-     Point         \.     Solidus       \/
%%   Colon         \:     Semicolon     \;     Less than     \<
%%   Equals        \=     Greater than  \>     Question mark \?
%%   Commercial at \@     Left bracket  \[     Backslash     \\
%%   Right bracket \]     Circumflex    \^     Underscore    \_
%%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%%   Right brace   \}     Tilde         \~}
%%
Author: Frank Mittelbach
============================================================
TEST 1: allocating new registers;no worries
============================================================
Defining \l_testa_int on line 36
\l_testa_int=\count87
Defining \g_testa_int on line 36
\g_testa_int=\count88
Defining \g_testb_int on line 36
\g_testb_int=\count89
============================================================
============================================================
TEST 2: allocating same name : \ERROR 
============================================================
This is a LaTeX bug! Check coding!
! Command name `\l_testa_int' already defined! Current meaning: \count87.
\err_latex_bug:x ...coding!}\tex_errmessage:D {#1}
l.41 }
This error message was generated by an \errmessage
command, so I can't give any explicit help.
Pretend that you're Hercule Poirot: Examine all clues,
and deduce the truth by order and method.
Defining \l_testa_int on line 41
\l_testa_int=\count90
This is a LaTeX bug! Check coding!
! Command name `\g_testa_int' already defined! Current meaning: \count88.
\err_latex_bug:x ...coding!}\tex_errmessage:D {#1}
l.41 }
(That was another \errmessage.)
Defining \g_testa_int on line 41
\g_testa_int=\count91
============================================================
============================================================
TEST 3: incrementing and decrementing: expect 3, -1
============================================================
> 3.
<argument> ..._testa_int \int_show:N \g_testa_int 
                                                  \int_gzero:N \g_testa_int ...
l.56 }
> -1.
<argument> ..._testa_int \int_show:N \g_testa_int 
l.56 }
============================================================
============================================================
TEST 4: generatingoverflow: expect 2147483647, -2147483648, 2147483647
============================================================
> 2147483647.
<argument> ...\c_max_int \int_show:N \l_testa_int 
                                                  \int_incr:N \l_testa_int \...
l.67 }
> -2147483648.
<argument> ..._testa_int \int_show:N \l_testa_int 
                                                  \int_decr:N \l_testa_int \...
l.67 }
> 2147483647.
<argument> ..._testa_int \int_show:N \l_testa_int 
l.67 }
============================================================
============================================================
TEST 5: incrementing and decrementing: expect -2
============================================================
> -2.
<argument> ..._testa_int \int_show:N \l_testa_int 
l.74 }
============================================================
============================================================
TEST 6: trying invalid variables: \ERROR ; \ERROR 
============================================================
! Undefined control sequence.
<argument> \l_testb_int 
l.85 }
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.
! You can't use `the letter b' after \advance.
\int_add:Nn #1#2->\int_advance:w #1b
                                    y\int_eval:w #2\int_eval_end: 
l.85 }
I'm forgetting what you said and not changing anything.
! You can't use `\numexpr' in horizontal mode.
\int_add:Nn #1#2->\int_advance:w #1by\int_eval:w 
                                                 #2\int_eval_end: 
l.85 }
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.
! Missing number, treated as zero.
<to be read again> 
                   \int_eval_end: 
l.85 }
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)
! You can't use `the letter b' after \advance.
\int_add:Nn #1#2->\int_advance:w #1b
                                    y\int_eval:w #2\int_eval_end: 
l.85 }
I'm forgetting what you said and not changing anything.
! You can't use `\numexpr' in horizontal mode.
\int_add:Nn #1#2->\int_advance:w #1by\int_eval:w 
                                                 #2\int_eval_end: 
l.85 }
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.
! Missing number, treated as zero.
<to be read again> 
                   \int_eval_end: 
l.85 }
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)
============================================================
> 185.
l.92 \int_show:N \l_testa_int
                             ^^I% we hope for a value of 185
> -30.
l.95 \int_show:N \l_testa_int
                             ^^I% we hope for a value of 10
> 24.
l.98 \int_show:N \l_testa_int
                             ^^I% we hope for a value of 28
> -30.
l.101 \int_show:N \l_testa_int
                              ^^I% we hope for a value of 10
! Arithmetic overflow.
\int_set:Nn #1#2->#1\int_eval:w #2\int_eval_end: 
l.104 ...set:Nn \l_testa_int { 5 / \g_testa_int  }
                                                   % that's division by zero
I can't evaluate this expression,
since the result is out of range.
> 0.
l.105 \int_show:N \l_testa_int
                              ^^I% no idea what TeX does here ...
> 50.
l.115 \int_show:N \l_testa_int
                              ^^I% we hope for a value of 50
> 35.
l.117 \int_show:N \l_testa_int
                              ^^I% we hope for a value of 35
> 6.
l.124 \int_show:N \g_testa_int
                              ^^I% we hope for a value of 6
> -19.
l.126 \int_show:N \g_testa_int
                              ^^I% we hope for a value of -19
============================================================
TEST 7: converting numbers: 3 i L ix XXI \textdagger 
============================================================
3 i L ix XXI \textdagger 
============================================================
============================================================
TEST 8: converting numbers: expect !! !! !! !a!
============================================================
!! !! !\relax ! !a! 
============================================================
============================================================
TEST 9: converting numbers: expect !! !! !! !i!
============================================================
!! !! !! !i! 
============================================================
============================================================
TEST 10: converting numbers: expect !! !! !! !\textasteriskcentered !
============================================================
!! !! !\relax ! !\textasteriskcentered ! 
============================================================
============================================================
TEST 11: converting numbers (huge values)
============================================================
fxshrxw \textparagraph \textsection \textasteriskcentered \textasteriskcentered
 \textdagger \textdagger \textasteriskcentered \textasteriskcentered \textaster
iskcentered \textasteriskcentered \textdaggerdbl \textbardbl \textasteriskcente
red \textasteriskcentered \textasteriskcentered 
============================================================
\num_eval:w 50/5\num_eval_end: 
! Undefined control sequence.
l.177 \ERROR
             % supposed to be expandable, so why doesn't it work in typeout?
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.
! Undefined control sequence.
l.184 \ERROR
             % write tests above
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.
============================================================
TEST 12: evaluating integer expresions: NO NO YES YES YES
============================================================
NO NO YES YES YES
============================================================
============================================================
TEST 13: converting from and to base: expect 21 17
============================================================
21 17
============================================================
