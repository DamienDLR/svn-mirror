%
% Copyright (C) 2008 The LaTeX Project
% 

\documentclass{minimal}
\input{regression-test}


\RequirePackage{l3prop}
\ExplSyntaxOff


\begin{document}
\START
\AUTHOR{Will Robertson}
\ExplSyntaxOn

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST{all~functions~documented/defined}{
  \declare@command \prop_new:N
  \declare@command \prop_new:c
  \declare@command \prop_clear:N
  \declare@command \prop_clear:c
  \declare@command \prop_gclear:N
  \declare@command \prop_gclear:c
  \declare@command \prop_put:Nnn
  \declare@command \prop_put:ccn
  \declare@command \prop_gput:Nnn
  \declare@command \prop_gput:Nno
  \declare@command \prop_gput:Nnx
  \declare@command \prop_gput:Noo
  \declare@command \prop_gput:Ncn
  \declare@command \prop_gput:ooo
  \declare@command \prop_gput:Nox
  \declare@command \prop_gput:cnn
  \declare@command \prop_gput:ccn
  \declare@command \prop_gput:cco
  \declare@command \prop_gput:ccx
  \declare@command \prop_gput_if_new:Nnn
  \declare@command \prop_get:NnN
  \declare@command \prop_get:cnN
  \declare@command \prop_gget:NnN
  \declare@command \prop_gget:NcN
  \declare@command \prop_gget:cnN
  \declare@command \prop_set_eq:NN
  \declare@command \prop_set_eq:cN
  \declare@command \prop_set_eq:Nc
  \declare@command \prop_set_eq:cc
  \declare@command \prop_gset_eq:NN
  \declare@command \prop_gset_eq:cN
  \declare@command \prop_gset_eq:Nc
  \declare@command \prop_gset_eq:cc
  \declare@command \prop_get_gdel:NnN
  \declare@command \prop_del:Nn
  \declare@command \prop_gdel:Nn
  \declare@command \prop_map_function:NN
  \declare@command \prop_map_function:cN
  \declare@command \prop_map_function:Nc
  \declare@command \prop_map_function:cc
  \declare@command \prop_map_inline:Nn
  \declare@command \prop_map_inline:cn
  \declare@command \prop_map_break:w
  \declare@command \prop_show:N
  \declare@command \prop_show:c
  \declare@command \prop_display:N
  \declare@command \prop_display:c
  \declare@command \prop_if_empty_p:N
  \declare@command \prop_if_empty_p:c
  \declare@command \prop_if_empty:NTF
  \declare@command \prop_if_empty:NT
  \declare@command \prop_if_empty:NF
  \declare@command \prop_if_empty:cTF
  \declare@command \prop_if_empty:cT
  \declare@command \prop_if_empty:cF
  \declare@command \prop_if_eq:NNTF
  \declare@command \prop_if_eq:NNT
  \declare@command \prop_if_eq:NNF
  \declare@command \prop_if_eq:cNTF
  \declare@command \prop_if_eq:cNT
  \declare@command \prop_if_eq:cNF
  \declare@command \prop_if_eq:NcTF
  \declare@command \prop_if_eq:NcT
  \declare@command \prop_if_eq:NcF
  \declare@command \prop_if_eq:ccTF
  \declare@command \prop_if_eq:ccT
  \declare@command \prop_if_eq:ccF
  \declare@command \prop_if_in:NnTF
  \declare@command \prop_if_in:NoTF
  \declare@command \prop_if_in:ccTF
  \declare@command \prop_if_in:NnT
  \declare@command \prop_if_in:NoT
  \declare@command \prop_if_in:ccT
  \declare@command \prop_if_in:NnF
  \declare@command \prop_if_in:NoF
  \declare@command \prop_if_in:ccF
  \declare@command \q_prop
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST{new}{
  {
    \prop_new:N \l_a_prop
    \prop_new:c {g_b_prop}
  }
  \prop_show:N \l_a_prop
  \prop_show:c {g_b_prop}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST{clear}{
  \prop_put:Nnn \l_a_prop {tmp} { test~l \par }
  \prop_put:Nnn \g_b_prop {tmp} { test~g \par }
  \TYPE {-\the\l_a_prop-}
  \TYPE {-\the\g_b_prop-}
  {
    \prop_clear:N  \l_a_prop
    \prop_gclear:N \g_b_prop
    \TYPE {-\the\l_a_prop-}
    \TYPE {-\the\g_b_prop-}
  }
  \TYPE {-\the\l_a_prop-}
  \TYPE {-\the\g_b_prop-}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST{put}{
  \prop_clear:N  \l_a_prop
  \prop_gclear:N \g_b_prop
  {
    \prop_put:Nnn  \l_a_prop {tmp} { test~l \par }
    \prop_gput:Nnn \g_b_prop {tmp} { test~g \par }
    \prop_put:Nnn  \l_a_prop {tmp\par} { test~l }
    \prop_gput:Nnn \g_b_prop {tmp\par} { test~g }
    \TYPE {-\the\l_a_prop-}
    \TYPE {-\the\g_b_prop-}
  }
  \TYPE {-\the\l_a_prop-}
  \TYPE {-\the\g_b_prop-}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST{put_if_new}{
  \prop_gclear:N \g_b_prop
  \prop_gput_if_new:Nnn \g_b_prop { test } { test~a \par }
  \TYPE {-\the\g_b_prop-}
  \prop_gput:Nnn        \g_b_prop { test } { test~b \par }
  \TYPE {-\the\g_b_prop-}
  \prop_gput_if_new:Nnn \g_b_prop { test } { test~c \par }
  \TYPE {-\the\g_b_prop-}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST{set_eq~(BROKEN)}{
  \TYPE {-\the\l_a_prop-}
  \TYPE {-\the\g_b_prop-}
  {
    \prop_set_eq:NN  \l_a_prop \g_b_prop
    \TYPE {-\the\l_a_prop-}
    \prop_gset_eq:NN \g_d_prop \g_b_prop
    \TYPE {-\the\g_d_prop-}
  }
  \TYPE {-\the\l_a_prop-}
  \TYPE {-\the\g_d_prop-}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST{get}{
  \prop_clear:N  \l_a_prop
  \prop_put:Nnn  \l_a_prop {tmpa} { # test~a \par }
  \prop_put:Nnn  \l_a_prop {tmpb} { # test~b \par }
  {
    \prop_get:NnN  \l_a_prop {tmpa} \l_tmpa_tlp
    \prop_gget:NnN \l_a_prop {tmpa} \g_tmpb_tlp
    \TYPE{ \meaning \l_tmpa_tlp }
    \TYPE{ \meaning \g_tmpb_tlp }
  }
  \TYPE{ \meaning \l_tmpa_tlp }
  \TYPE{ \meaning \g_tmpb_tlp }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tlp_clear:N \l_tmpa_tlp

\TEST{get_gdel}{
  \prop_clear:N  \l_a_prop
  \prop_put:Nnn  \l_a_prop {tmpa} { # test~a \par }
  \prop_put:Nnn  \l_a_prop {tmpb} { # test~b \par }
  \TYPE{ \the \l_a_prop }
  {
    \prop_get_gdel:NnN  \l_a_prop {tmpa} \l_tmpa_tlp
    \TYPE{ \meaning \l_tmpa_tlp }
    \prop_get:NnN  \l_a_prop {tmpa} \l_tmpa_tlp
    \TYPE{ \meaning \l_tmpa_tlp }
  }
  \TYPE{ \the \l_a_prop }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST{del}{
  \prop_clear:N  \l_a_prop
  \prop_put:Nnn  \l_a_prop {tmpa} { # test~l~a \par }
  \prop_put:Nnn  \l_a_prop {tmpb} { # test~l~b \par }
  \prop_clear:N  \g_b_prop
  \prop_put:Nnn  \g_b_prop {tmpa} { # test~g~a \par }
  \prop_put:Nnn  \g_b_prop {tmpb} { # test~g~b \par }
  \TYPE{ \the \l_a_prop }
  \TYPE{ \the \g_b_prop }
  {
    \prop_del:Nn  \l_a_prop {tmpa} 
    \prop_gdel:Nn \g_b_prop {tmpa} 
    \TYPE{ \the \l_a_prop }
    \TYPE{ \the \g_b_prop }
  }
  \TYPE{ \the \l_a_prop }
  \TYPE{ \the \g_b_prop }
  \SEPARATOR
  \prop_gdel:Nn \g_b_prop {tmpa} 
  \prop_gdel:Nn \g_b_prop {tmpa} 
  \prop_gdel:Nn \g_b_prop {tmpa} 
  \TYPE{ \the \g_b_prop }
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST{if_empty~(expect~T/?/F)}{
  \prop_clear:N  \l_a_prop
  \prop_if_empty:NTF \l_a_prop {\TRUE} {\ERROR}
  \prop_put:Nnn \l_a_prop {} {}
  \prop_if_empty:NTF \l_a_prop {\TRUE} {\FALSE}
  \prop_put:Nnn \l_a_prop {abc} {}
  \prop_if_empty:NTF \l_a_prop {\ERROR} {\FALSE}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST{if_in~(expect~T/T/F/F)}{
  \prop_clear:N  \l_a_prop
  \prop_put:Nnn \l_a_prop {a} {testa}
  \prop_put:Nnn \l_a_prop {b} {testb}
  \prop_put:Nnn \l_a_prop {d} {test}
  \prop_if_in:NnTF \l_a_prop {a}    {\TRUE}  {\ERROR}
  \prop_if_in:NnTF \l_a_prop {b}    {\TRUE}  {\ERROR}
  \prop_if_in:NnTF \l_a_prop {c}    {\ERROR} {\FALSE}
  \prop_if_in:NnTF \l_a_prop {test} {\ERROR} {\FALSE}
  \SEPARATOR
  \def:Npn \a {a}
  \def:Npn \b {a}
  \def:Npn \c {c}
  \def:Npn \d {test}
  \prop_if_in:NoT \l_a_prop {\a} {\TRUE}
  \prop_if_in:NoT \l_a_prop {\b} {\TRUE}
  \prop_if_in:NoF \l_a_prop {\c} {\FALSE}
  \prop_if_in:NoF \l_a_prop {\d} {\FALSE}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST{if_eq~(expect~T/T/?)}{
  \prop_clear:N  \l_a_prop
  \prop_clear:N  \g_b_prop
  \prop_if_eq:NNTF \l_a_prop \g_b_prop {\TRUE} {\FALSE}
  \prop_put:Nnn \l_a_prop {a} {testa}
  \prop_put:Nnn \l_a_prop {b} {testb}
  \prop_put:Nnn \g_b_prop {a} {testa}
  \prop_put:Nnn \g_b_prop {b} {testb}
  \prop_if_eq:NNTF \l_a_prop \g_b_prop {\TRUE} {\FALSE}
  \prop_clear:N  \g_b_prop
  \prop_put:Nnn \g_b_prop {b} {testb}
  \prop_put:Nnn \g_b_prop {a} {testa}
  \prop_if_eq:NNTF \l_a_prop \g_b_prop {\TRUE} {\FALSE}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST{map_function}{
  \prop_clear:N  \l_a_prop
  \prop_put:Nnn \l_a_prop {a} {#testa\par}
  \prop_put:Nnn \l_a_prop {b} {#testb\par}
  \def_long:Npn \propmap #1#2 {
    \def:Npx \tmp {>\detokenize{#1}---\detokenize{#2}<}
    \TYPE {\tmp}
  }
  \prop_map_function:NN \l_a_prop \propmap
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\prop_clear:N  \l_a_prop
\prop_put:Nnn \l_a_prop {a} {testa}
\prop_put:Nnn \l_a_prop {b} {testb}
\def_long:Npn \propmap #1#2 {>#1---#2<\NEWLINE}
  
\TESTEXP{map_function~(EXP)}{
  \prop_map_function:NN \l_a_prop \propmap
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST{map_inline}{
  \prop_clear:N  \l_a_prop
  \prop_put:Nnn \l_a_prop {a} {#testa\par}
  \prop_put:Nnn \l_a_prop {b} {#testb\par}
  \prop_map_inline:Nn \l_a_prop {
    \def:Npx \tmp {>\detokenize{#1}---\detokenize{#2}<}
    \TYPE {\tmp}
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST{map_break}{
  \prop_clear:N  \l_a_prop
  \prop_put:Nnn \l_a_prop {a} {#testa\par}
  \prop_put:Nnn \l_a_prop {b} {#testb\par}
  \prop_put:Nnn \l_a_prop {c} {#testc\par}
  \prop_put:Nnn \l_a_prop {d} {#testd\par}
  \prop_map_inline:Nn \l_a_prop {
    \tlist_if_eq:nnTF {#1}{b} {
      \prop_map_break:w
    } {
      \def:Npx \tmp {>\detokenize{#1}---\detokenize{#2}<}
      \TYPE {\tmp}
    }
  }
}

\END

