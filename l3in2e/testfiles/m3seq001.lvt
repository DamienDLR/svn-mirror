%
% Copyright (C) 2008 The LaTeX Project
% 

\documentclass{minimal}
\input{regression-test}

\RequirePackage{l3seq}
\ExplSyntaxOff

\begin{document}
\START
\AUTHOR{Will Robertson}
\ExplSyntaxOn

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST{all~functions~documented/defined}{
  % I'm adding the ability to l3doc to spit out the names of every function
  % that is documented and/or defined; this helps check for consistency:  
  \declare@command \seq_new:N              
  \declare@command \seq_new:c              
  \declare@command \seq_clear:N            
  \declare@command \seq_clear:c            
  \declare@command \seq_gclear:N           
  \declare@command \seq_gclear:c           
  \declare@command \seq_clear_new:N        
  \declare@command \seq_clear_new:c        
  \declare@command \seq_gclear_new:N       
  \declare@command \seq_gclear_new:c       
  \declare@command \seq_set_eq:NN          
  \declare@command \seq_set_eq:cN          
  \declare@command \seq_set_eq:Nc          
  \declare@command \seq_set_eq:cc          
  \declare@command \seq_gset_eq:NN         
  \declare@command \seq_gset_eq:cN         
  \declare@command \seq_gset_eq:Nc         
  \declare@command \seq_gset_eq:cc         
  \declare@command \seq_gconcat:NNN        
  \declare@command \seq_gconcat:ccc        
  \declare@command \seq_put_left:Nn        
  \declare@command \seq_put_left:No        
  \declare@command \seq_put_left:Nx        
  \declare@command \seq_put_left:cn        
  \declare@command \seq_put_left:co        
  \declare@command \seq_put_right:Nn       
  \declare@command \seq_put_right:No       
  \declare@command \seq_put_right:Nx       
  \declare@command \seq_put_right:cn       
  \declare@command \seq_put_right:co       
  \declare@command \seq_gput_left:Nn       
  \declare@command \seq_gput_left:No       
  \declare@command \seq_gput_left:Nx       
  \declare@command \seq_gput_left:cn       
  \declare@command \seq_gput_left:co       
  \declare@command \seq_gput_right:Nn      
  \declare@command \seq_gput_right:No      
  \declare@command \seq_gput_right:Nx      
  \declare@command \seq_gput_right:cn      
  \declare@command \seq_gput_right:co      
  \declare@command \seq_gput_right:Nc      
  \declare@command \seq_get:NN             
  \declare@command \seq_get:cN             
  \declare@command \seq_map_variable:NNn   
  \declare@command \seq_map_variable:cNn   
  \declare@command \seq_map:NN             
  \declare@command \seq_map_inline:Nn      
  \declare@command \seq_map_inline:cn      
  \declare@command \seq_show:N             
  \declare@command \seq_show:c             
  \declare@command \seq_display:N          
  \declare@command \seq_display:c          
  \declare@command \seq_if_empty_p:N       
  \declare@command \seq_if_empty_p:c       
  \declare@command \seq_if_empty:NTF       
  \declare@command \seq_if_empty:cTF       
  \declare@command \seq_if_empty:NF        
  \declare@command \seq_if_empty:cF        
  \declare@command \seq_if_empty:NT        
  \declare@command \seq_if_empty:cT        
  \declare@command \seq_if_in:NnTF         
  \declare@command \seq_if_in:NnT          
  \declare@command \seq_if_in:NnF          
  \declare@command \seq_if_in:cnTF         
  \declare@command \seq_if_in:cnT          
  \declare@command \seq_if_in:cnF          
  \declare@command \seq_if_in:coTF         
  \declare@command \seq_if_in:coT          
  \declare@command \seq_if_in:coF          
  \declare@command \seq_if_in:cxTF         
  \declare@command \seq_if_in:cxT          
  \declare@command \seq_if_in:cxF          
  \declare@command \seq_if_empty_err:N     
  \declare@command \seq_pop_aux:nnNN       
  \declare@command \seq_get_aux:w          
  \declare@command \seq_pop_aux:w          
  \declare@command \seq_put_aux:Nnn        
  \declare@command \seq_put_aux:w          
  \declare@command \seq_map_variable_aux:nw
  \declare@command \seq_map_break:w        
  \declare@command \seq_elt:w              
  \declare@command \seq_elt_end:           
  \declare@command \seq_push:Nn            
  \declare@command \seq_push:No            
  \declare@command \seq_push:cn            
  \declare@command \seq_gpush:Nn           
  \declare@command \seq_gpush:No           
  \declare@command \seq_gpush:NC           
  \declare@command \seq_gpush:cn           
  \declare@command \seq_pop:NN             
  \declare@command \seq_pop:cN             
  \declare@command \seq_gpop:NN            
  \declare@command \seq_gpop:cN            
  \declare@command \seq_top:NN             
  \declare@command \seq_top:cN             
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST{creation}{
  {  
    \seq_new:N \l_a_seq
    \seq_new:N \g_b_seq
  }
  \TYPE { \tex_meaning:D \l_a_seq }
  \TYPE { \tex_meaning:D \g_b_seq }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST{clearing}{
  \seq_put_left:Nn \l_a_seq { test~ a }
  \seq_put_left:Nn \g_b_seq { test~ b }
  {
    \seq_clear:N \l_a_seq
    \seq_gclear:N \g_b_seq
    \TYPE { \tex_meaning:D \l_a_seq }
  }
  \TYPE { \tex_meaning:D \l_a_seq }
  \TYPE { \tex_meaning:D \g_b_seq }
  \SEPARATOR
  {
    \TYPE { \tex_meaning:D \l_undefined_seq }
    \TYPE { \tex_meaning:D \g_undefined_seq }
    \seq_clear:N \l_undefined_seq
    \seq_clear:N \g_undefined_seq
    \TYPE { \tex_meaning:D \l_undefined_seq }
    \TYPE { \tex_meaning:D \g_undefined_seq }
  }
  \TYPE { \tex_meaning:D \l_undefined_seq }
  \TYPE { \tex_meaning:D \g_undefined_seq }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST{clear_new}{
  \seq_put_left:Nn \l_a_seq { test~ a }
  \seq_put_left:Nn \g_b_seq { test~ b }
  {
    \seq_clear_new:N  \l_a_seq 
    \seq_clear_new:N  \l_c_seq % previously undefined
    \seq_gclear_new:N \g_b_seq
    \seq_gclear_new:N \g_d_seq % previously undefined
    \TYPE { \tex_meaning:D \l_a_seq }
    \TYPE { \tex_meaning:D \l_c_seq }
  }
  \TYPE { \tex_meaning:D \l_a_seq }
  \TYPE { \tex_meaning:D \l_c_seq }% STILL UNDEFINED?!
  \TYPE { \tex_meaning:D \g_b_seq }
  \TYPE { \tex_meaning:D \g_d_seq }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST{(g)set_eq}{
  \seq_clear:N \l_tmpa_seq
  \seq_clear:N \l_a_seq
  \seq_put_left:Nn \l_tmpa_seq { abc }
  {
    \seq_set_eq:NN  \l_a_seq  \l_tmpa_seq
    \seq_set_eq:NN  \l_e_seq  \l_tmpa_seq % previously undefined
    \seq_gset_eq:NN \g_b_seq  \l_tmpa_seq
    \seq_gset_eq:NN \g_f_seq  \l_tmpa_seq % previously undefined
    \TYPE{ \tex_meaning:D \l_tmpa_seq }
    \TYPE{ \tex_meaning:D \l_e_seq    }
    \TYPE{ \tex_meaning:D \l_a_seq    }
    \SEPARATOR
  }    
  \TYPE{ \tex_meaning:D \l_tmpa_seq }
  \TYPE{ \tex_meaning:D \l_e_seq    }
  \TYPE{ \tex_meaning:D \l_a_seq    }
  \SEPARATOR
  \TYPE{ \tex_meaning:D \l_tmpa_seq }
  \TYPE{ \tex_meaning:D \g_f_seq    }
  \TYPE{ \tex_meaning:D \g_b_seq    }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST{gconcat}{
  {
    \seq_clear:N     \l_tmpa_seq
    \seq_put_left:Nn \l_tmpa_seq {def}
    \seq_put_left:Nn \l_tmpa_seq {abc}
    \seq_put_left:Nn \l_a_seq    {xyz}
    \seq_put_left:Nn \l_a_seq    {uvw}
    \seq_gconcat:NNN \g_b_seq \l_tmpa_seq \l_a_seq
  }
  \TYPE{ \tex_meaning:D \g_b_seq }
  \SEPARATOR
  \seq_clear:c {g_b_seq}
  \seq_clear:c {l_tmpa_seq}
  \seq_clear:c {l_a_seq}
  {
    \seq_put_left:cn {l_tmpa_seq} {DEF}
    \seq_put_left:cn {l_tmpa_seq} {ABC}
    \seq_put_left:cn {l_a_seq}    {XYZ}
    \seq_put_left:cn {l_a_seq}    {UVW}
    \seq_gconcat:ccc  {g_b_seq} {l_tmpa_seq} {l_a_seq}
  }
  \TYPE{ \tex_meaning:D \g_b_seq }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST{put~left}{
  \seq_clear:N \l_tmpa_seq
  \tlp_set:Nn  \l_tmpa_tlp { \l_tmpb_tlp }
  \tlp_set:Nn  \l_tmpb_tlp { \l_tmpc_tlp }
  \tlp_set:Nn  \l_tmpc_tlp { FULL~EXPANSION }
  \seq_put_left:Nn \l_tmpa_seq  { \ERROR A    \par }
  \seq_put_left:No \l_tmpa_seq  { \l_tmpa_tlp \par }
  \seq_put_left:Nx \l_tmpa_seq  { \l_tmpa_tlp \par }
  \seq_put_left:cn {l_tmpa_seq} { \ERROR B    \par }
  \seq_put_left:co {l_tmpa_seq} { \l_tmpb_tlp \par }
  \seq_display:N \l_tmpa_seq 
}

\TEST{put~right}{
  \seq_clear:N \l_tmpa_seq
  \tlp_set:Nn  \l_tmpa_tlp { \l_tmpb_tlp }
  \tlp_set:Nn  \l_tmpb_tlp { \l_tmpc_tlp }
  \tlp_set:Nn  \l_tmpc_tlp { FULL~EXPANSION }
  \seq_put_right:Nn \l_tmpa_seq  { \ERROR A    \par }
  \seq_put_right:No \l_tmpa_seq  { \l_tmpa_tlp \par }
  \seq_put_right:Nx \l_tmpa_seq  { \l_tmpa_tlp \par }
  \seq_put_right:cn {l_tmpa_seq} { \ERROR B    \par }
  \seq_put_right:co {l_tmpa_seq} { \l_tmpb_tlp \par }
  \seq_display:N \l_tmpa_seq 
}

\TEST{gput~left}{
  \seq_clear:N \g_b_seq
  \tlp_set:Nn  \l_tmpa_tlp { \l_tmpb_tlp }
  \tlp_set:Nn  \l_tmpb_tlp { \l_tmpc_tlp }
  \tlp_set:Nn  \l_tmpc_tlp { FULL~EXPANSION }
  {
    \seq_gput_left:Nn \g_b_seq  { \ERROR A    \par }
    \seq_gput_left:No \g_b_seq  { \l_tmpa_tlp \par }
    \seq_gput_left:Nx \g_b_seq  { \l_tmpa_tlp \par }
    \seq_gput_left:cn {g_b_seq} { \ERROR B    \par }
    \seq_gput_left:co {g_b_seq} { \l_tmpb_tlp \par }
  }
  \seq_display:N \g_b_seq 
}

\TEST{gput~right}{
  \seq_clear:N \g_b_seq
  \tlp_set:Nn  \l_tmpa_tlp { \l_tmpb_tlp }
  \tlp_set:Nn  \l_tmpb_tlp { \l_tmpc_tlp }
  \tlp_set:Nn  \l_tmpc_tlp { FULL~EXPANSION }
  {
    \seq_gput_right:Nn \g_b_seq  { \ERROR A    \par }
    \seq_gput_right:No \g_b_seq  { \l_tmpa_tlp \par }
    \seq_gput_right:Nx \g_b_seq  { \l_tmpa_tlp \par }
    \seq_gput_right:cn {g_b_seq} { \ERROR B    \par }
    \seq_gput_right:co {g_b_seq} { \l_tmpb_tlp \par }
  }
  \seq_display:N \g_b_seq 
}

%% Probably to be removed:
% \seq_gput_right:Nc      

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST{seq_if_empty~(expect~Y/N/N)}{
  \seq_clear:N      \l_tmpa_seq
  \seq_if_empty:NTF \l_tmpa_seq {\YES}{\NO}
  \seq_put_left:Nn  \l_tmpa_seq {}
  \seq_if_empty:NTF \l_tmpa_seq {\YES}{\NO}
  \seq_clear:N      \l_tmpa_seq
  \seq_put_left:Nn  \l_tmpa_seq {x}
  \seq_if_empty:NTF \l_tmpa_seq {\YES}{\NO}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST{seq_get~(expect~an~error~first)}{
  \seq_clear:N     \l_tmpa_seq    
  
  \seq_get:NN      \l_tmpa_seq \l_tmpa_tlp
  \TYPE { Empty~-\l_tmpa_tlp- }
  
  \seq_put_left:Nn \l_tmpa_seq {}
  \seq_get:NN      \l_tmpa_seq \l_tmpa_tlp
  \TYPE { Empty~-\l_tmpa_tlp- }
  
  \seq_put_left:Nn \l_tmpa_seq {a\par}
  {
    \seq_get:NN    \l_tmpa_seq \l_tmpa_tlp
    \TYPE { \l_tmpa_tlp }
  }
  \TYPE { Empty~-\l_tmpa_tlp- }
  
  \seq_put_left:Nn \l_tmpa_seq {b\par}
  \seq_get:NN      \l_tmpa_seq \l_tmpa_tlp
  \TYPE { \l_tmpa_tlp }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST{push~(same~as~put_left)}{
  \seq_clear:N \l_tmpa_seq
  \tlp_set:Nn  \l_tmpa_tlp { \ERROR B }
  \seq_push:Nn \l_tmpa_seq  { \ERROR A    \par }
  \seq_push:No \l_tmpa_seq  { \l_tmpa_tlp \par }
  \seq_push:cn {l_tmpa_seq} { \ERROR C    \par }
  \seq_display:N \l_tmpa_seq 
}

\TEST{gpush~(same~as~gput_left)}{
  \seq_clear:N \g_b_seq
  \tlp_set:Nn  \l_tmpa_tlp { \ERROR B }
  {
    \seq_gpush:Nn \g_b_seq  { \ERROR A    \par }
    \seq_gpush:No \g_b_seq  { \l_tmpa_tlp \par }
    \seq_gpush:cn {g_b_seq} { \ERROR C    \par }
    \seq_gpush:NC \g_b_seq  { l_tmpa_tlp }
  }
  \seq_display:N \g_b_seq 
} 

\TEST{top~(same~as~get)}{
  \seq_clear:N     \l_tmpa_seq    
  
  \seq_top:NN      \l_tmpa_seq \l_tmpa_tlp
  \TYPE { Empty~-\l_tmpa_tlp- }
  
  \seq_put_left:Nn \l_tmpa_seq {}
  \seq_top:NN      \l_tmpa_seq \l_tmpa_tlp
  \TYPE { Empty~-\l_tmpa_tlp- }
  
  \seq_put_left:Nn \l_tmpa_seq {a\par}
  {
    \seq_top:NN    \l_tmpa_seq \l_tmpa_tlp
    \TYPE { \l_tmpa_tlp }
  }
  \TYPE { Empty~-\l_tmpa_tlp- }
  
  \seq_put_left:Nn \l_tmpa_seq {b\par}
  \seq_top:NN      \l_tmpa_seq \l_tmpa_tlp
  \TYPE { \l_tmpa_tlp }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\seq_clear:N \l_tmpa_seq
\seq_push:Nn \l_tmpa_seq {a\par}
\seq_push:Nn \l_tmpa_seq {b\par}
\seq_push:Nn \l_tmpa_seq {ZZZ}
\seq_push:Nn \l_tmpa_seq {}
\seq_push:Nn \l_tmpa_seq {~}
\seq_push:Nn \l_tmpa_seq {\par}
\seq_push:Nn \l_tmpa_seq {\ERROR}
  
\TEST{if_in~(expect~2~first~false)}{
  \seq_if_in:NnTF \l_tmpa_seq {a}      {\ERROR} {\FALSE}
  \seq_if_in:NnTF \l_tmpa_seq {ZZ}     {\ERROR} {\FALSE}
  \seq_if_in:NnTF \l_tmpa_seq {a\par}  {\TRUE}  {\ERROR}
  \seq_if_in:NnTF \l_tmpa_seq {}       {\TRUE}  {\ERROR}
  \seq_if_in:NnTF \l_tmpa_seq {~}      {\TRUE}  {\ERROR}
  \seq_if_in:NnTF \l_tmpa_seq {\par}   {\TRUE}  {\ERROR}
  \seq_if_in:NnTF \l_tmpa_seq {\ERROR} {\TRUE}  {\ERROR}
}

\TEST{if_in~(T)}{
  \seq_if_in:NnT \l_tmpa_seq {a\par}  {\TRUE} 
  \seq_if_in:NnT \l_tmpa_seq {}       {\TRUE} 
  \seq_if_in:NnT \l_tmpa_seq {~}      {\TRUE} 
  \seq_if_in:NnT \l_tmpa_seq {\par}   {\TRUE} 
  \seq_if_in:NnT \l_tmpa_seq {\ERROR} {\TRUE} 
}

\TEST{if_in~(F)}{
  \seq_if_in:NnF \l_tmpa_seq {a}     {\FALSE}
  \seq_if_in:NnF \l_tmpa_seq {ZZ}    {\FALSE}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\seq_clear:N \l_tmpa_seq
\seq_push:Nn \l_tmpa_seq {a}
\seq_push:Nn \l_tmpa_seq {b\par}
\seq_push:Nn \l_tmpa_seq {c}
  
\TEST{map_inline}{
  \seq_map_inline:Nn \l_tmpa_seq  { \exp_args:No \TYPE {\tlist_to_str:n{#1}} }
  \seq_map_inline:cn {l_tmpa_seq} { \exp_args:No \TYPE {\tlist_to_str:n{#1}} }
}

\TEST{map}{
  \def_long:Npn \MAP:n #1 { \exp_args:No \TYPE {\tlist_to_str:n{#1}} }
  \seq_map:NN \l_tmpa_seq  \MAP:n
  \seq_map:cN {l_tmpa_seq} \MAP:n
}

\TEST{map_variable}{
  \seq_map_variable:NNn \l_tmpa_seq  \l_tmpa_tlp { 
    \exp_args:No \TYPE { \tlp_to_str:N \l_tmpa_tlp } 
  }
  \seq_map_variable:cNn {l_tmpa_seq} \l_tmpa_tlp { 
    \exp_args:No \TYPE { \tlp_to_str:N \l_tmpa_tlp } 
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST{pop}{
  \seq_pop:NN \l_tmpa_seq \l_tmpa_tlp
  \exp_args:No \TYPE { \tlp_to_str:N \l_tmpa_tlp }
  \seq_show:N \l_tmpa_seq
  
  \seq_pop:NN \l_tmpa_seq \l_tmpa_tlp
  \exp_args:No \TYPE { \tlp_to_str:N \l_tmpa_tlp }
  \seq_show:N \l_tmpa_seq
  
  \seq_pop:NN \l_tmpa_seq \l_tmpa_tlp
  \exp_args:No \TYPE { \tlp_to_str:N \l_tmpa_tlp }
  \seq_show:N \l_tmpa_seq
  
  \SEPARATOR
  \seq_pop:NN \l_tmpa_seq \l_tmpa_tlp
  \exp_args:No \TYPE { \tlp_to_str:N \l_tmpa_tlp }
  \seq_show:N \l_tmpa_seq
}

\TEST{gpop}{
  { 
    \seq_gpop:NN \l_tmpa_seq \l_tmpa_tlp 
    \exp_args:No \TYPE { local->\tlp_to_str:N \l_tmpa_tlp .}
  }
  \exp_args:No \TYPE { global->\tlp_to_str:N \l_tmpa_tlp .}
  \seq_show:N \l_tmpa_seq
  
  { 
    \seq_gpop:NN \l_tmpa_seq \l_tmpa_tlp 
    \exp_args:No \TYPE { local->\tlp_to_str:N \l_tmpa_tlp .}
  }
  \exp_args:No \TYPE { global->\tlp_to_str:N \l_tmpa_tlp .}
  \seq_show:N \l_tmpa_seq
  
  { 
    \seq_gpop:NN \l_tmpa_seq \l_tmpa_tlp 
    \exp_args:No \TYPE { local->\tlp_to_str:N \l_tmpa_tlp .}
  }
  \exp_args:No \TYPE { global->\tlp_to_str:N \l_tmpa_tlp .}
  \seq_show:N \l_tmpa_seq
  
  \SEPARATOR
  { 
    \seq_gpop:NN \l_tmpa_seq \l_tmpa_tlp 
    \exp_args:No \TYPE { local->\tlp_to_str:N \l_tmpa_tlp .}
  }
  \exp_args:No \TYPE { global->\tlp_to_str:N \l_tmpa_tlp .}
  \seq_show:N \l_tmpa_seq
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\END

