%
% Copyright (C) 2008 LaTeX3 Project
% 

\documentclass{minimal}

\input{regression-test}

\RequirePackage{expl3}



% Everything before this is ignored by the test system.
\START

\AUTHOR{Frank Mittelbach}


% don't display stuff from executing \begin{document}
\OMIT
\begin{document}
\TIMO


\ExplSyntaxOn


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% allocating new registers:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST{allocating~ new~ registers;no~ worries}{
  \int_new:N \l_testa_int
  \int_new:N \g_testa_int
  \int_new:N \g_testb_int
}

\TEST{allocating~ same~ name~:~ \ERROR }{
\int_new:N \l_testa_int        % define second time
\int_new:N \g_testa_int        % should give errors
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% incrementing + decrementing
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST{incrementing~ and~ decrementing:~ expect~ 3,~ -1}{
\int_gincr:N \g_testa_int
\int_gincr:N \g_testa_int
\int_gincr:N \g_testa_int
\int_show:N  \g_testa_int
\int_gzero:N \g_testa_int
\int_gdecr:N \g_testa_int
\int_show:N  \g_testa_int
}


\TEST{generating overflow:~ expect~ 2147483647,~ -2147483648,~ 2147483647}{
\int_set:Nn \l_testa_int \c_max_int
\int_show:N \l_testa_int
\int_incr:N \l_testa_int    % overflow ...
\int_show:N \l_testa_int    % what is max + 1?

\int_decr:N \l_testa_int    % and overflow back ...
\int_show:N \l_testa_int    % and now?
}

\TEST{incrementing~ and~ decrementing:~ expect~ -2}{
\int_zero:N \l_testa_int
\int_decr:N \l_testa_int
\int_decr:N \l_testa_int
\int_show:N \l_testa_int    % we hope for a value of -2
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% using invalid variables
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST{trying~ invalid~ variables:~ \ERROR;~ \ERROR}{
\int_decr:N \l_testb_int        % gives bad errors but ...
\cs_set_nopar:Npn \l_testb_int {}
\int_decr:N \l_testb_int
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% using num expr ...
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\int_set:Nn \l_testa_int { 200 - 15  }
\int_show:N \l_testa_int    % we hope for a value of 185

\int_set:Nn \l_testa_int { 30 / \g_testa_int  }
\int_show:N \l_testa_int    % we hope for a value of 10

\int_set:Nn \l_testa_int { 27 + 3 / \g_testa_int  }
\int_show:N \l_testa_int    % we hope for a value of 28

\int_set:Nn \l_testa_int { (27 + 3 ) / \g_testa_int  }
\int_show:N \l_testa_int    % we hope for a value of 10

\int_gzero:N \g_testa_int
\int_set:Nn \l_testa_int { 5 / \g_testa_int  } % that's division by zero
\int_show:N \l_testa_int    % no idea what TeX does here ...


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% adding and substracting
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\int_zero:N \l_testa_int
\int_add:Nn \l_testa_int { 5 * 7 }
\int_add:Nn \l_testa_int { 15 }
\int_show:N \l_testa_int    % we hope for a value of 50
\int_sub:Nn \l_testa_int { 3 * 5 }
\int_show:N \l_testa_int    % we hope for a value of 35



\int_gzero:N \g_testa_int
\int_gadd:Nn \g_testa_int { (2 + 13) / (2 * 3) }
\int_gadd:Nn \g_testa_int { 3 }
\int_show:N \g_testa_int    % we hope for a value of 6
\int_gsub:Nn \g_testa_int { 5 * 5 }
\int_show:N \g_testa_int    % we hope for a value of -19


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% converting numbers to ...
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TESTEXP{converting~numbers:~3~i~L~ix~XXI~\textdagger}{
\int_to_arabic:n { ( 2+7 ) / 3 } ~
\int_to_alph:n { 2+7 } ~
\int_to_Alph:n { 6 * 2 } ~
\int_to_roman:n { 9 } ~
\int_to_Roman:n { 21 } ~
\int_to_symbol:n { 2 } 
}

\TESTEXP{converting~numbers:~expect~!!~!!~!!~!a!}{
! \int_to_alph:n { -2 } ! ~      
! \int_to_alph:n { -1 } ! ~      
! \int_to_alph:n { 0 } !  ~       % this is wrong 
! \int_to_alph:n { 1 } !  ~     

}

\TESTEXP{converting~numbers:~expect~!!~!!~!!~!i!}{
! \int_to_roman:n { -2 } ! ~      
! \int_to_roman:n { -1 } ! ~      
! \int_to_roman:n { 0 } ! ~        % \ERROR  
! \int_to_roman:n { 1 } ! ~      
}

\TESTEXP{converting~numbers:~expect~!!~!!~!!~!\textasteriskcentered!}{
! \int_to_symbol:n { -2 } ! ~      
! \int_to_symbol:n { -1 } ! ~      
! \int_to_symbol:n { 0 } ! ~       % \ERROR  
! \int_to_symbol:n { 1 } ! ~      
}


\TESTEXP{converting~numbers~ (huge~ values)}{
\int_to_alph:n { \c_max_int } ~
\int_to_symbol:n {\c_max_int } 
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% evaluating integer expressions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\typeout { \intexpr_eval:n {50 / 5 } }  % 10?

\ERROR % supposed to be expandable, so why doesn't it work in typeout?

% \int_eval:n
% \int_div_truncate:nn
% \int_div_round:nn
% \int_mod:nn
% \int_abs:n
\ERROR % write tests above


\TESTEXP{evaluating~ integer~ expresions:~ NO~ NO~ YES~ YES~ YES}{
\intexpr_compare:nNnTF {17} < {20 - 5 } \YES \NO         \space
\intexpr_compare:nNnF  {17} < {20 - 5 } \NO              \space
\intexpr_compare:nNnTF {\g_testa_int} = {-19} \YES \NO   \space
\intexpr_compare:nNnT {\g_testa_int} = {-19} \YES        \space
\intexpr_compare:nNnTF {\intexpr_max:nn {1}{7}} 
                 = {\intexpr_min:nn {5}{8} + 2 } \YES \NO
}

\TESTEXP{converting~from~and~to~base:~expect~21~17}{
 \int_convert_from_base_ten:nn {17}{8}  ~
 \int_convert_to_base_ten:nn {21} 8 
}


\END
