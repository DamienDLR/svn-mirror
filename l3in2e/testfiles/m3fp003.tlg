This is a generated file for the LaTeX (2e + expl3) validation system.
Don't change this file in any respect.
%% \CharacterTable
%%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%%   Digits        \0\1\2\3\4\5\6\7\8\9
%%   Exclamation   \!     Double quote  \"     Hash (number) \#
%%   Dollar        \$     Percent       \%     Ampersand     \&
%%   Acute accent  \'     Left paren    \(     Right paren   \)
%%   Asterisk      \*     Plus          \+     Comma         \,
%%   Minus         \-     Point         \.     Solidus       \/
%%   Colon         \:     Semicolon     \;     Less than     \<
%%   Equals        \=     Greater than  \>     Question mark \?
%%   Commercial at \@     Left bracket  \[     Backslash     \\
%%   Right bracket \]     Circumflex    \^     Underscore    \_
%%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%%   Right brace   \}     Tilde         \~}
%%
Author: LaTeX3 Project
============================================================
TEST 1: Creating new fps
============================================================
! This is a LaTeX bug: check coding!
! Command name `\l_A_fp' already defined! Current meaning: macro:->+0.000000000
e0
For immediate help type H <return>.
 ...                                              
l.24 }
There is a coding bug somewhere around here.
This probably needs examining by an expert.
Try typing <return> to proceed.
If that doesn't work, type X <return> to quit
> \l_A_fp=macro:
->+0.000000000e0.
<argument> \l_A_fp 
l.24 }
> \g_A_fp=macro:
->+0.000000000e0.
<argument> \g_A_fp 
l.24 }
> \l_B_fp=macro:
->+0.000000000e0.
<argument> \l_B_fp 
l.24 }
============================================================
============================================================
TEST 2: Set fp
============================================================
> \l_A_fp=macro:
->+1.234560000e2.
<argument> \l_A_fp 
l.55 }
> \l_B_fp=macro:
->-1.234560000e2.
<argument> \l_B_fp 
l.55 }
> \g_A_fp=macro:
->+3.000000000e0.
<argument> \g_A_fp 
l.55 }
> \g_B_fp=macro:
->+0.000000000e0.
<argument> \g_B_fp 
l.55 }
> \l_A_fp=macro:
->+0.000000000e0.
<argument> \l_A_fp 
l.55 }
> \l_B_fp=macro:
->+0.000000000e0.
<argument> \l_B_fp 
l.55 }
> \l_A_fp=macro:
->-1.000000000e-3.
<argument> \l_A_fp 
l.55 }
> \l_B_fp=macro:
->+0.000000000e0.
<argument> \l_B_fp 
l.55 }
> \l_A_fp=macro:
->+1.234567890e20.
<argument> \l_A_fp 
l.55 }
> \l_A_fp=macro:
->+1.234567890e-15.
<argument> \l_A_fp 
l.55 }
> \l_A_fp=macro:
->+0.000000000e0.
<argument> \l_A_fp 
l.55 }
> \l_B_fp=macro:
->+0.000000000e0.
<argument> \l_B_fp 
l.55 }
> \g_A_fp=macro:
->+3.000000000e0.
<argument> \g_A_fp 
l.55 }
> \g_B_fp=macro:
->+0.000000000e0.
<argument> \g_B_fp 
l.55 }
============================================================
============================================================
TEST 3: Set fp from dimen
============================================================
> \l_A_fp=macro:
->+1.000000000e0.
<argument> \l_A_fp 
l.74 }
> \l_B_fp=macro:
->+1.638399998e4.
<argument> \l_B_fp 
l.74 }
> \g_A_fp=macro:
->+2.000000000e-5.
<argument> \g_A_fp 
l.74 }
> \g_B_fp=macro:
->+2.845275590e3.
<argument> \g_B_fp 
l.74 }
> \l_A_fp=macro:
->+0.000000000e0.
<argument> \l_A_fp 
l.74 }
> \l_B_fp=macro:
->+0.000000000e0.
<argument> \l_B_fp 
l.74 }
> \g_A_fp=macro:
->+2.000000000e-5.
<argument> \g_A_fp 
l.74 }
> \g_B_fp=macro:
->+2.845275590e3.
<argument> \g_B_fp 
l.74 }
============================================================
============================================================
TEST 4: Zero fp
============================================================
> \l_A_fp=macro:
->+1.234000000e0.
<argument> \l_A_fp 
l.91 }
> \g_A_fp=macro:
->+1.234000000e0.
<argument> \g_A_fp 
l.91 }
> \l_A_fp=macro:
->+0.000000000e0.
<argument> \l_A_fp 
l.91 }
> \g_A_fp=macro:
->+0.000000000e0.
<argument> \g_A_fp 
l.91 }
> \l_A_fp=macro:
->+1.234000000e0.
<argument> \l_A_fp 
l.91 }
> \g_A_fp=macro:
->+0.000000000e0.
<argument> \g_A_fp 
l.91 }
============================================================
============================================================
TEST 5: Set fps equal
============================================================
> \l_B_fp=macro:
->+0.000000000e0.
<argument> \l_B_fp 
l.110 }
> \g_B_fp=macro:
->+0.000000000e0.
<argument> \g_B_fp 
l.110 }
> \l_B_fp=macro:
->+1.234560000e2.
<argument> \l_B_fp 
l.110 }
> \g_B_fp=macro:
->+1.234560000e2.
<argument> \g_B_fp 
l.110 }
> \l_B_fp=macro:
->+0.000000000e0.
<argument> \l_B_fp 
l.110 }
> \g_B_fp=macro:
->+1.234560000e2.
<argument> \g_B_fp 
l.110 }
============================================================
============================================================
TEST 6: Use fps
============================================================
1.234000000
12340000000000.
0.01234000000
0.0000000000001234000000
============================================================
============================================================
TEST 7: Convert fp to int
============================================================
57
56
0
1
============================================================
============================================================
TEST 8: Convert fp to tl
============================================================
56.7
-1230000000
1e-5
0.997
============================================================
============================================================
TEST 9: Round to places
============================================================
> \l_A_fp=macro:
->+1.234567890e0.
<argument> \l_A_fp 
l.190 }
> \l_A_fp=macro:
->+1.234567890e0.
<argument> \l_A_fp 
l.190 }
> \l_A_fp=macro:
->+1.234570000e0.
<argument> \l_A_fp 
l.190 }
> \l_A_fp=macro:
->+1.230000000e0.
<argument> \l_A_fp 
l.190 }
> \l_A_fp=macro:
->+1.000000000e0.
<argument> \l_A_fp 
l.190 }
> \l_A_fp=macro:
->+1.000000000e0.
<argument> \l_A_fp 
l.190 }
> \l_A_fp=macro:
->+1.235000000e-2.
<argument> \l_A_fp 
l.190 }
> \l_A_fp=macro:
->+1.234567900e2.
<argument> \l_A_fp 
l.190 }
> \g_A_fp=macro:
->+1.234567890e0.
<argument> \g_A_fp 
l.190 }
> \l_A_fp=macro:
->+5.670000000e1.
<argument> \l_A_fp 
l.190 }
> \g_A_fp=macro:
->+1.234567890e0.
<argument> \g_A_fp 
l.190 }
============================================================
============================================================
TEST 10: Round to figures
============================================================
> \l_A_fp=macro:
->+1.234567890e0.
<argument> \l_A_fp 
l.224 }
> \l_A_fp=macro:
->+1.234567890e0.
<argument> \l_A_fp 
l.224 }
> \l_A_fp=macro:
->+1.234600000e0.
<argument> \l_A_fp 
l.224 }
> \l_A_fp=macro:
->+1.200000000e0.
<argument> \l_A_fp 
l.224 }
> \l_A_fp=macro:
->+1.000000000e0.
<argument> \l_A_fp 
l.224 }
> \l_A_fp=macro:
->+1.000000000e0.
<argument> \l_A_fp 
l.224 }
> \l_A_fp=macro:
->+1.234600000e-2.
<argument> \l_A_fp 
l.224 }
> \l_A_fp=macro:
->+1.234600000e2.
<argument> \l_A_fp 
l.224 }
> \g_A_fp=macro:
->+1.234567890e0.
<argument> \g_A_fp 
l.224 }
> \l_A_fp=macro:
->+5.670000000e1.
<argument> \l_A_fp 
l.224 }
> \g_A_fp=macro:
->+1.234567890e0.
<argument> \g_A_fp 
l.224 }
============================================================
============================================================
TEST 11: Test if fp undefined (expect F/F/F/T)
============================================================
FALSE
FALSE
FALSE
TRUE
============================================================
============================================================
TEST 12: Test if fp zero (expect F/T/T/F)
============================================================
FALSE
TRUE
TRUE
FALSE
============================================================
============================================================
TEST 13: Convert to absolute values
============================================================
> \l_A_fp=macro:
->+1.111110000e2.
<argument> \l_A_fp 
l.278 }
> \l_B_fp=macro:
->+2.222220000e2.
<argument> \l_B_fp 
l.278 }
> \g_A_fp=macro:
->+3.333330000e2.
<argument> \g_A_fp 
l.278 }
> \g_B_fp=macro:
->+4.444440000e2.
<argument> \g_B_fp 
l.278 }
> \l_A_fp=macro:
->+1.111110000e2.
<argument> \l_A_fp 
l.278 }
> \l_B_fp=macro:
->+2.222220000e2.
<argument> \l_B_fp 
l.278 }
> \g_A_fp=macro:
->+3.333330000e2.
<argument> \g_A_fp 
l.278 }
> \g_B_fp=macro:
->+4.444440000e2.
<argument> \g_B_fp 
l.278 }
> \l_A_fp=macro:
->-1.111110000e2.
<argument> \l_A_fp 
l.278 }
> \l_B_fp=macro:
->+2.222220000e2.
<argument> \l_B_fp 
l.278 }
> \g_A_fp=macro:
->+3.333330000e2.
<argument> \g_A_fp 
l.278 }
> \g_B_fp=macro:
->+4.444440000e2.
<argument> \g_B_fp 
l.278 }
============================================================
============================================================
TEST 14: Convert to negative values
============================================================
> \l_A_fp=macro:
->+1.111110000e2.
<argument> \l_A_fp 
l.313 }
> \l_B_fp=macro:
->-2.222220000e2.
<argument> \l_B_fp 
l.313 }
> \g_A_fp=macro:
->+3.333330000e2.
<argument> \g_A_fp 
l.313 }
> \g_B_fp=macro:
->-4.444440000e2.
<argument> \g_B_fp 
l.313 }
> \l_A_fp=macro:
->-1.111110000e2.
<argument> \l_A_fp 
l.313 }
> \l_B_fp=macro:
->+2.222220000e2.
<argument> \l_B_fp 
l.313 }
> \g_A_fp=macro:
->-3.333330000e2.
<argument> \g_A_fp 
l.313 }
> \g_B_fp=macro:
->+4.444440000e2.
<argument> \g_B_fp 
l.313 }
> \l_A_fp=macro:
->-1.111110000e2.
<argument> \l_A_fp 
l.313 }
> \l_B_fp=macro:
->+2.222220000e2.
<argument> \l_B_fp 
l.313 }
> \g_A_fp=macro:
->+3.333330000e2.
<argument> \g_A_fp 
l.313 }
> \g_B_fp=macro:
->-4.444440000e2.
<argument> \g_B_fp 
l.313 }
============================================================
============================================================
TEST 15: Addition
============================================================
> \l_A_fp=macro:
->+1.000000000e0.
<argument> \l_A_fp 
l.354 }
> \l_A_fp=macro:
->+1.010000000e2.
<argument> \l_A_fp 
l.354 }
> \l_A_fp=macro:
->+1.019900000e2.
<argument> \l_A_fp 
l.354 }
> \l_A_fp=macro:
->+1.020000000e2.
<argument> \l_A_fp 
l.354 }
> \l_A_fp=macro:
->-2.898123000e3.
<argument> \l_A_fp 
l.354 }
> \l_A_fp=macro:
->+7.101877000e3.
<argument> \l_A_fp 
l.354 }
> \l_A_fp=macro:
->+9.912345600e1.
<argument> \l_A_fp 
l.354 }
> \l_A_fp=macro:
->-3.990087655e4.
<argument> \l_A_fp 
l.354 }
> \l_A_fp=macro:
->+9.912345000e1.
<argument> \l_A_fp 
l.354 }
> \l_A_fp=macro:
->+9.999999999e8.
<argument> \l_A_fp 
l.354 }
> \l_A_fp=macro:
->+1.999999999e9.
<argument> \l_A_fp 
l.354 }
> \l_A_fp=macro:
->-1.234000000e0.
<argument> \l_A_fp 
l.354 }
> \l_A_fp=macro:
->+0.000000000e0.
<argument> \l_A_fp 
l.354 }
> \l_A_fp=macro:
->+1.000000000e4.
<argument> \l_A_fp 
l.354 }
> \g_A_fp=macro:
->-1.000000000e-3.
<argument> \g_A_fp 
l.354 }
> \g_A_fp=macro:
->-1.000000000e0.
<argument> \g_A_fp 
l.354 }
> \l_A_fp=macro:
->+1.234560000e2.
<argument> \l_A_fp 
l.354 }
> \g_A_fp=macro:
->-1.000000000e0.
<argument> \g_A_fp 
l.354 }
============================================================
============================================================
TEST 16: Subtraction
============================================================
> \l_A_fp=macro:
->+1.000000000e0.
<argument> \l_A_fp 
l.395 }
> \l_A_fp=macro:
->-9.900000000e1.
<argument> \l_A_fp 
l.395 }
> \l_A_fp=macro:
->-9.999000000e1.
<argument> \l_A_fp 
l.395 }
> \l_A_fp=macro:
->-1.000000000e2.
<argument> \l_A_fp 
l.395 }
> \l_A_fp=macro:
->-1.000004000e2.
<argument> \l_A_fp 
l.395 }
> \l_A_fp=macro:
->+2.900122600e3.
<argument> \l_A_fp 
l.395 }
> \l_A_fp=macro:
->-7.099877400e3.
<argument> \l_A_fp 
l.395 }
> \l_A_fp=macro:
->+9.912345600e1.
<argument> \l_A_fp 
l.395 }
> \l_A_fp=macro:
->+4.009912345e4.
<argument> \l_A_fp 
l.395 }
> \l_A_fp=macro:
->-9.999999999e8.
<argument> \l_A_fp 
l.395 }
> \l_A_fp=macro:
->-1.999999999e9.
<argument> \l_A_fp 
l.395 }
> \l_A_fp=macro:
->-1.999999999e9.
<argument> \l_A_fp 
l.395 }
> \l_A_fp=macro:
->-1.234000000e0.
<argument> \l_A_fp 
l.395 }
> \l_A_fp=macro:
->+0.000000000e0.
<argument> \l_A_fp 
l.395 }
> \g_A_fp=macro:
->-1.000000000e-3.
<argument> \g_A_fp 
l.395 }
> \g_A_fp=macro:
->-1.000000000e0.
<argument> \g_A_fp 
l.395 }
> \l_A_fp=macro:
->+1.234560000e2.
<argument> \l_A_fp 
l.395 }
> \g_A_fp=macro:
->-1.000000000e0.
<argument> \g_A_fp 
l.395 }
============================================================
============================================================
TEST 17: Multiplication
============================================================
> \l_A_fp=macro:
->+0.000000000e0.
<argument> \l_A_fp 
l.428 }
> \l_A_fp=macro:
->+0.000000000e0.
<argument> \l_A_fp 
l.428 }
> \l_A_fp=macro:
->+9.999999979e17.
<argument> \l_A_fp 
l.428 }
> \l_A_fp=macro:
->+7.006652000e2.
<argument> \l_A_fp 
l.428 }
> \l_A_fp=macro:
->-7.006652000e0.
<argument> \l_A_fp 
l.428 }
> \l_A_fp=macro:
->-7.006652000e0.
<argument> \l_A_fp 
l.428 }
> \l_A_fp=macro:
->+7.006652000e0.
<argument> \l_A_fp 
l.428 }
> \g_A_fp=macro:
->+7.006652000e0.
<argument> \g_A_fp 
l.428 }
> \l_A_fp=macro:
->+1.234560000e2.
<argument> \l_A_fp 
l.428 }
> \g_A_fp=macro:
->+7.006652000e0.
<argument> \g_A_fp 
l.428 }
============================================================
============================================================
TEST 18: Division
============================================================
> \l_A_fp=macro:
->X0.000000000e0.
<argument> \l_A_fp 
l.470 }
> \l_A_fp=macro:
->+0.000000000e0.
<argument> \l_A_fp 
l.470 }
> \l_A_fp=macro:
->X0.000000000e0.
<argument> \l_A_fp 
l.470 }
> \l_A_fp=macro:
->+2.173300450e-1.
<argument> \l_A_fp 
l.470 }
> \l_A_fp=macro:
->-2.173300450e-1.
<argument> \l_A_fp 
l.470 }
> \l_A_fp=macro:
->-2.173300450e-1.
<argument> \l_A_fp 
l.470 }
> \l_A_fp=macro:
->+2.173300450e-1.
<argument> \l_A_fp 
l.470 }
> \l_A_fp=macro:
->+1.111111110e6.
<argument> \l_A_fp 
l.470 }
> \l_A_fp=macro:
->-1.000000000e-13.
<argument> \l_A_fp 
l.470 }
> \l_A_fp=macro:
->+1.000000000e10.
<argument> \l_A_fp 
l.470 }
> \g_A_fp=macro:
->-1.010101010e-4.
<argument> \g_A_fp 
l.470 }
> \l_A_fp=macro:
->+1.234560000e2.
<argument> \l_A_fp 
l.470 }
> \g_A_fp=macro:
->-1.010101010e-4.
<argument> \g_A_fp 
l.470 }
============================================================
============================================================
TEST 19: Comparisons (expect T/F/F/F/F/T/F/T/F/F/T/F/F/F/T)
============================================================
TRUE
FALSE
FALSE
FALSE
FALSE
TRUE
FALSE
TRUE
FALSE
FALSE
TRUE
FALSE
FALSE
FALSE
TRUE
============================================================
