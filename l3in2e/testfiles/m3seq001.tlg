This is a generated file for the LaTeX (2e + expl3) validation system.
Don't change this file in any respect.
%% \CharacterTable
%%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%%   Digits        \0\1\2\3\4\5\6\7\8\9
%%   Exclamation   \!     Double quote  \"     Hash (number) \#
%%   Dollar        \$     Percent       \%     Ampersand     \&
%%   Acute accent  \'     Left paren    \(     Right paren   \)
%%   Asterisk      \*     Plus          \+     Comma         \,
%%   Minus         \-     Point         \.     Solidus       \/
%%   Colon         \:     Semicolon     \;     Less than     \<
%%   Equals        \=     Greater than  \>     Question mark \?
%%   Commercial at \@     Left bracket  \[     Backslash     \\
%%   Right bracket \]     Circumflex    \^     Underscore    \_
%%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%%   Right brace   \}     Tilde         \~}
%%
Author: Will Robertson
============================================================
TEST 1: all functions documented/defined
============================================================
Defined   \seq_new:N
Defined   \seq_new:c
Defined   \seq_clear:N
Defined   \seq_clear:c
Defined   \seq_gclear:N
Defined   \seq_gclear:c
Defined   \seq_clear_new:N
Defined   \seq_clear_new:c
Defined   \seq_gclear_new:N
Defined   \seq_gclear_new:c
Defined   \seq_set_eq:NN
Defined   \seq_set_eq:cN
Defined   \seq_set_eq:Nc
Defined   \seq_set_eq:cc
Defined   \seq_gset_eq:NN
Defined   \seq_gset_eq:cN
Defined   \seq_gset_eq:Nc
Defined   \seq_gset_eq:cc
Defined   \seq_gconcat:NNN
Defined   \seq_gconcat:ccc
Defined   \seq_put_left:Nn
Defined   \seq_put_left:No
Defined   \seq_put_left:Nx
Defined   \seq_put_left:cn
Defined   \seq_put_left:co
Defined   \seq_put_right:Nn
Defined   \seq_put_right:No
Defined   \seq_put_right:Nx
Defined   \seq_put_right:cn
Defined   \seq_put_right:co
Defined   \seq_gput_left:Nn
Defined   \seq_gput_left:No
Defined   \seq_gput_left:Nx
Defined   \seq_gput_left:cn
Defined   \seq_gput_left:co
Defined   \seq_gput_right:Nn
Defined   \seq_gput_right:No
Defined   \seq_gput_right:Nx
Defined   \seq_gput_right:cn
Defined   \seq_gput_right:co
Defined   \seq_gput_right:Nc
Defined   \seq_get:NN
Defined   \seq_get:cN
Defined   \seq_map_variable:NNn
Defined   \seq_map_variable:cNn
Defined   \seq_map:NN
Defined   \seq_map_inline:Nn
Defined   \seq_map_inline:cn
Defined   \seq_show:N
Defined   \seq_show:c
Defined   \seq_display:N
Defined   \seq_display:c
Defined   \seq_if_empty_p:N
Defined   \seq_if_empty_p:c
Defined   \seq_if_empty:NTF
Defined   \seq_if_empty:cTF
Defined   \seq_if_empty:NF
Defined   \seq_if_empty:cF
Defined   \seq_if_empty:NT
Defined   \seq_if_empty:cT
Defined   \seq_if_in:NnTF
Defined   \seq_if_in:NnT
Defined   \seq_if_in:NnF
Defined   \seq_if_in:cnTF
Defined   \seq_if_in:cnT
Defined   \seq_if_in:cnF
Defined   \seq_if_in:coTF
Defined   \seq_if_in:coT
Defined   \seq_if_in:coF
Defined   \seq_if_in:cxTF
Defined   \seq_if_in:cxT
Defined   \seq_if_in:cxF
Defined   \seq_if_empty_err:N
Defined   \seq_pop_aux:nnNN
Defined   \seq_get_aux:w
Defined   \seq_pop_aux:w
Defined   \seq_put_aux:Nnn
Defined   \seq_put_aux:w
Undefined \seq_map_variable_aux:nw
Defined   \seq_map_break:w
Undefined \seq_elt:w
Undefined \seq_elt_end:
Defined   \seq_push:Nn
Defined   \seq_push:No
Defined   \seq_push:cn
Defined   \seq_gpush:Nn
Defined   \seq_gpush:No
Defined   \seq_gpush:NC
Defined   \seq_gpush:cn
Defined   \seq_pop:NN
Defined   \seq_pop:cN
Defined   \seq_gpop:NN
Defined   \seq_gpop:cN
Defined   \seq_top:NN
Defined   \seq_top:cN
============================================================
============================================================
TEST 2: creation
============================================================
Defining \l_a_seq on line 128
Defining \g_b_seq on line 128
macro:->
macro:->
============================================================
============================================================
TEST 3: clearing
============================================================
macro:->
macro:->\seq_elt:w test a\seq_elt_end: 
macro:->
============================================================
undefined
undefined
macro:->
macro:->
undefined
undefined
============================================================
============================================================
TEST 4: clear_new
============================================================
macro:->
macro:->
macro:->\seq_elt:w test a\seq_elt_end: 
undefined
macro:->
macro:->
============================================================
============================================================
TEST 5: (g)set_eq
============================================================
macro:->\seq_elt:w abc\seq_elt_end: 
macro:->\seq_elt:w abc\seq_elt_end: 
macro:->\seq_elt:w abc\seq_elt_end: 
============================================================
macro:->\seq_elt:w abc\seq_elt_end: 
undefined
macro:->
============================================================
macro:->\seq_elt:w abc\seq_elt_end: 
macro:->\seq_elt:w abc\seq_elt_end: 
macro:->\seq_elt:w abc\seq_elt_end: 
============================================================
============================================================
TEST 6: gconcat
============================================================
macro:->\seq_elt:w abc\seq_elt_end: \seq_elt:w def\seq_elt_end: \seq_elt:w uvw\
seq_elt_end: \seq_elt:w xyz\seq_elt_end: 
============================================================
macro:->\seq_elt:w ABC\seq_elt_end: \seq_elt:w DEF\seq_elt_end: \seq_elt:w UVW\
seq_elt_end: \seq_elt:w XYZ\seq_elt_end: 
============================================================
============================================================
TEST 7: put left
============================================================
Sequence \l_tmpa_seq contains the elements (without outer braces):
>     {\l_tmpc_tlp \par }
>     {\ERROR B\par }
>     {FULL EXPANSION\par }
>     {\l_tmpb_tlp \par }
>     {\ERROR A\par }.
\seq_display:N ...har }}\toks_show:N \l_tmpa_toks 
l.238 }
============================================================
============================================================
TEST 8: put right
============================================================
Sequence \l_tmpa_seq contains the elements (without outer braces):
>     {\ERROR A\par }
>     {\l_tmpb_tlp \par }
>     {FULL EXPANSION\par }
>     {\ERROR B\par }
>     {\l_tmpc_tlp \par }.
\seq_display:N ...har }}\toks_show:N \l_tmpa_toks 
l.251 }
============================================================
============================================================
TEST 9: gput left
============================================================
Sequence \g_b_seq contains the elements (without outer braces):
>     {\l_tmpc_tlp \par }
>     {\ERROR B\par }
>     {FULL EXPANSION\par }
>     {\l_tmpb_tlp \par }
>     {\ERROR A\par }.
\seq_display:N ...har }}\toks_show:N \l_tmpa_toks 
l.266 }
============================================================
============================================================
TEST 10: gput right
============================================================
Sequence \g_b_seq contains the elements (without outer braces):
>     {\ERROR A\par }
>     {\l_tmpb_tlp \par }
>     {FULL EXPANSION\par }
>     {\ERROR B\par }
>     {\l_tmpc_tlp \par }.
\seq_display:N ...har }}\toks_show:N \l_tmpa_toks 
l.281 }
============================================================
============================================================
TEST 11: seq_if_empty (expect Y/N/N)
============================================================
YES
NO
NO
============================================================
============================================================
TEST 12: seq_get (expect an error first)
============================================================
This is a LaTeX bug! Check coding!
! Empty sequence `\l_tmpa_seq'.
\err_latex_bug:x ...coding!}\tex_errmessage:D {#1}
l.320 }
This error message was generated by an \errmessage
command, so I can't give any explicit help.
Pretend that you're Hercule Poirot: Examine all clues,
and deduce the truth by order and method.
! Use of \seq_get_aux:w doesn't match its definition.
\seq_get:NN ..._after:NN \seq_get_aux:w #1\q_stop 
l.320 }
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.
Empty --
Empty --
a\par 
Empty --
b\par 
============================================================
============================================================
TEST 13: push (same as put_left)
============================================================
Sequence \l_tmpa_seq contains the elements (without outer braces):
>     {\ERROR C\par }
>     {\ERROR B\par }
>     {\ERROR A\par }.
\seq_display:N ...har }}\toks_show:N \l_tmpa_toks 
l.331 }
============================================================
============================================================
TEST 14: gpush (same as gput_left)
============================================================
Sequence \g_b_seq contains the elements (without outer braces):
>     {\ERROR B}
>     {\ERROR C\par }
>     {\ERROR B\par }
>     {\ERROR A\par }.
\seq_display:N ...har }}\toks_show:N \l_tmpa_toks 
l.343 }
============================================================
============================================================
TEST 15: top (same as get)
============================================================
This is a LaTeX bug! Check coding!
! Empty sequence `\l_tmpa_seq'.
\err_latex_bug:x ...coding!}\tex_errmessage:D {#1}
l.365 }
(That was another \errmessage.)
! Use of \seq_get_aux:w doesn't match its definition.
\seq_top:NN ..._after:NN \seq_get_aux:w #1\q_stop 
l.365 }
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.
Empty --
Empty --
a\par 
Empty --
b\par 
============================================================
============================================================
TEST 16: if_in (expect 2 first false)
============================================================
FALSE
FALSE
TRUE
TRUE
TRUE
TRUE
TRUE
============================================================
============================================================
TEST 17: if_in (T)
============================================================
TRUE
TRUE
TRUE
TRUE
TRUE
============================================================
============================================================
TEST 18: if_in (F)
============================================================
FALSE
FALSE
============================================================
============================================================
TEST 19: map_inline
============================================================
c
b\par 
a
c
b\par 
a
============================================================
============================================================
TEST 20: map
============================================================
c
b\par 
a
c
b\par 
a
============================================================
============================================================
TEST 21: map_variable
============================================================
c
b\par 
a
c
b\par 
a
============================================================
============================================================
TEST 22: pop
============================================================
c
> \l_tmpa_seq=macro:
->\seq_elt:w b\par \seq_elt_end: \seq_elt:w a\seq_elt_end: .
<argument> \l_tmpa_seq 
l.447 }
b\par 
> \l_tmpa_seq=macro:
->\seq_elt:w a\seq_elt_end: .
<argument> \l_tmpa_seq 
l.447 }
a
> \l_tmpa_seq=macro:
->.
<argument> \l_tmpa_seq 
l.447 }
============================================================
This is a LaTeX bug! Check coding!
! Empty sequence `\l_tmpa_seq'.
\err_latex_bug:x ...coding!}\tex_errmessage:D {#1}
l.447 }
(That was another \errmessage.)
! Use of \seq_pop_aux:w doesn't match its definition.
\seq_pop_aux:nnNN ...:NN \seq_pop_aux:w #3\q_stop 
                                                  #1#2#3
l.447 }
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.
a
> \l_tmpa_seq=macro:
->.
<argument> \l_tmpa_seq 
l.447 }
============================================================
============================================================
TEST 23: gpop
============================================================
local->c.
global->.
> \l_tmpa_seq=macro:
->\seq_elt:w b\par \seq_elt_end: \seq_elt:w a\seq_elt_end: .
<argument> \l_tmpa_seq 
l.478 }
local->b\par .
global->.
> \l_tmpa_seq=macro:
->\seq_elt:w a\seq_elt_end: .
<argument> \l_tmpa_seq 
l.478 }
local->a.
global->.
> \l_tmpa_seq=macro:
->.
<argument> \l_tmpa_seq 
l.478 }
============================================================
This is a LaTeX bug! Check coding!
! Empty sequence `\l_tmpa_seq'.
\err_latex_bug:x ...coding!}\tex_errmessage:D {#1}
l.478 }
(That was another \errmessage.)
! Use of \seq_pop_aux:w doesn't match its definition.
\seq_pop_aux:nnNN ...:NN \seq_pop_aux:w #3\q_stop 
                                                  #1#2#3
l.478 }
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.
local->.
global->.
> \l_tmpa_seq=macro:
->.
<argument> \l_tmpa_seq 
l.478 }
============================================================
