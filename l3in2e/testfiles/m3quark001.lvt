%
% Copyright (C) 2008 Will Robertson
% 
\documentclass{minimal}
\RequirePackage{expl3}
\input{regression-test}
\begin{document}

\ExplSyntaxOn

% We are not starved for space in the log file output, so let's make it as
% verbose as is useful when reading the .diff's.
\int_new:N \g_TEST_int
\def:Npn \SEPARATOR {
  \io_put_term:x{
    ============================================================}}
\def_new:NNn \TEST 2 {
  \int_incr:N \g_TEST_int
  \SEPARATOR
  \io_put_term:x{
    TEST~\int_use:N \g_TEST_int :~\tlist_to_str:n{#1}}
  %\io_put_term:x{==~\tlist_to_str:n{#2}}
  \SEPARATOR 
  \begingroup
    \let:NN \TYPE \io_put_term:x
    #2 
  \endgroup
  \SEPARATOR \io_put_term:x{}
}
\def_new:NNn \TESTEXP 2 {
  \int_incr:N \g_TEST_int
  \SEPARATOR
  \io_put_term:x{
    TEST~\int_use:N \g_TEST_int :~\tlist_to_str:n{#1}}
  %\io_put_term:x{==~\tlist_to_str:n{#2}}
  \SEPARATOR 
  \begingroup
    \let:NN \TYPE \use:n
    \typeout{#2} 
  \endgroup
  \SEPARATOR \io_put_term:x{}
}

\def:Npn \TRUE  { \TYPE{TRUE}  }
\def:Npn \FALSE { \TYPE{FALSE} }
\def:Npn \YES   { \TYPE{YES}   }
\def:Npn \NO    { \TYPE{NO}    }

\START
\AUTHOR{Will Robertson}

\TEST{New~quark;~no~worries}{
  \quark_new:N \q_quark
  \cs_show:N \q_quark
}

\TEST{New~quark~with~same~name:~\ERROR!}{
  \quark_new:N \q_quark
}

\TESTEXP{Checking~for~\q_no_value~in~tokens:~expect~"YES~NO~NO"}{
  \quark_if_no_value:nTF { \q_no_value  }    { \YES   }{ \ERROR } ~
  \quark_if_no_value:nTF { \q_no_value abc } { \ERROR }{ \NO    } ~
  \quark_if_no_value:nTF { abc }             { \ERROR }{ \NO    }
}

\tlp_set:Nn \l_tempa_tlp {\q_no_value}
\tlp_set:Nn \l_tempb_tlp {abc}

\TESTEXP{Checking~for~\q_no_value:~expect~"YES~YES~NO"}{
  \quark_if_no_value:NTF \q_no_value  { \YES   }{ \ERROR } ~
  \quark_if_no_value:NTF \l_tempa_tlp { \YES   }{ \ERROR } ~
  \quark_if_no_value:NTF \l_tempb_tlp { \ERROR }{ \NO    }
}

\TESTEXP{Checking~for~\q_nil~in~tokens:~expect~"YES~NO~NO~NO"}{
  \quark_if_nil:nTF { \q_nil  }    { \YES   }{ \ERROR } ~
  \quark_if_nil:nTF { \q_nil abc } { \ERROR }{ \NO    } ~
  \quark_if_nil:nTF { abc }        { \ERROR }{ \NO    } ~
  \quark_if_nil:nTF {\cs:w q_nil\cs_end:} { \ERROR }{ \NO  }
}

\tlp_set:Nn \l_tempa_tlp {\q_nil}
\tlp_set:Nn \l_tempb_tlp {abc}

\TESTEXP{Checking~for~\q_nil:~expect~"YES~YES~NO"}{
  \quark_if_nil:NTF \q_nil       { \YES   }{ \ERROR } ~
  \quark_if_nil:NTF \l_tempa_tlp { \YES   }{ \ERROR } ~
  \quark_if_nil:NTF \l_tempb_tlp { \ERROR }{ \NO    } 
}

\TESTEXP{Checking~for~\q_nil~after~expansion:~expect~"YES~YES~NO~YES"}{
 \quark_if_nil:oTF \q_nil       { \YES   }{ \ERROR } ~
 \quark_if_nil:oTF \l_tempa_tlp { \YES   }{ \ERROR } ~
 \quark_if_nil:oTF \l_tempb_tlp { \ERROR }{ \NO    } ~
 \quark_if_nil:oTF {\cs:w q_nil\cs_end:} { \YES }{ \ERROR  } 
}

\TESTEXP{Selecting~tokens~before~\q_recursion_stop:~expect~"YES"}{
 \use_none_delimit_by_q_recursion_stop:w \ERROR abc \ERROR \q_recursion_stop
 \use_i_delimit_by_q_recursion_stop:nw \YES \ERROR  \ERROR \q_recursion_stop
}

% Still to go:
% \begin{macro}{\quark_if_recursion_tail_stop:n}
% \begin{macro}{\quark_if_recursion_tail_stop:N}
% \begin{macro}{\quark_if_recursion_tail_stop:o}
% \begin{macro}{\quark_if_recursion_tail_stop_do:nn}
% \begin{macro}{\quark_if_recursion_tail_stop_do:Nn}
% \begin{macro}{\quark_if_recursion_tail_stop_do:on}

\END
