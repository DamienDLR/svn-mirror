% \iffalse
%% File: l3quark.dtx Copyright (C) 1990-2005 LaTeX3 project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3a of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the ``expl3 bundle'' (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/cgi-bin/cvsweb.cgi/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%
%<package>\RequirePackage{l3names}
%<*dtx>
%\fi
\def\GetIdInfo$#1: #2.dtx,v #3 #4 #5 #6 #7$#8{%
  \def\fileversion{#3}%
  \def\filedate{#4}%
  \ProvidesFile{#2.dtx}[#4 v#3 #8]%
}
%\iffalse
%</dtx>
%\fi
\GetIdInfo$Id$
          {L3 Experimental Quark Commands}
%
% \iffalse
%<*driver>
\documentclass{l3doc}

\begin{document}
\DocInput{l3quark.dtx}
\end{document}
%</driver>
% \fi
%
%
% \title{The \textsf{l3quark} package\thanks{This file
%         has version number \fileversion, last
%         revised \filedate.}\\
% ``Quarks''}
% \author{\Team}
% \date{\filedate}
% \maketitle
%
%
% \section{Quarks}
%^^A \label{sec:quarks}
%
%
% A special type of constants in \LaTeX3 are `quarks'. These are control
% sequences that expand to themselves and should therefore NEVER be
% executed directly in the code. This would result in an endless loop!
%
% They are meant to be used as delimiter is weird functions (for example
% as the stop token (i.e., "\q_stop"). They also permit the following
% ingenious trick: when you pick up a token in a temporary, and you want
% to know whether you have picked up a particular quark, all you have to
% do is compare the temporary to the quark using "\if_meaning:NN". A
% set of special quark testing functions is set up below.
%
% By convention all constants of type quark start out with "\q_".
%
% \subsection{Functions}
%
% \begin{function}{%
%                  \quark_new:N |
% }
% \begin{syntax}
%    "\quark_new:N"   <quark>
% \end{syntax}
% Defines <quark> to be a new constant of type "quark".
% \end{function}
%
% \begin{function}{%
%                  \quark_if_no_value_p:n |
%                  \quark_if_no_value:nTF |
%                  \quark_if_no_value:nF  |
%                  \quark_if_no_value:nT  |
%                  \quark_if_no_value_p:N |
%                  \quark_if_no_value:NTF |
%                  \quark_if_no_value:NT  |
%                  \quark_if_no_value:NF  |
% }
% \begin{syntax}
%    "\quark_if_no_value:nTF" "{"<token list>"}"
%                          "   {"<true code>"}{"<false code>"}"
%    "\quark_if_no_value:NTF" <tlp>
%                          "   {"<true code>"}{"<false code>"}"
% \end{syntax}
% This tests whether or not <token list> contains only the quark
% "\q_no_value".
%
% If <token list> to be tested is stored in a token list pointer use
% "\quark_if_no_value:NTF", or "\quark_if_no_value:NF" or check the
% value directly with "\if_meaning:NN". All those cases are faster then
% "\quark_if_no_value:nTF" so should be preferred.\footnote{Clarify
% semantic of the ``n'' case \ldots{} i think it is not implement
% according to what we originally intended /FMi}
%
% \begin{texnote}
% But  be aware of the fact that "\if_meaning:NN" can result in an
% overflow of \TeX{}'s parameter stack since it leaves the corresponding
% "\fi:" on the input until the whole replacement text is processed. It
% is therefore better in recursions to use "\quark_if_no_value:NTF" as
% it will remove the conditional prior to processing the "T" or "F" case
% and so allows tail-recursion.
% \end{texnote}
% \end{function}
%
% \begin{function}{%
%                  \quark_if_nil_p:N |
%                  \quark_if_nil:NTF |
%                  \quark_if_nil:NT |
%                  \quark_if_nil:NF  |
% }
% \begin{syntax}
%    "\quark_if_nil:NTF" <token>
%                          "  {"<true code>"}{"<false code>"}"
% \end{syntax}
% This tests whether or not <token> is equal to the quark
% "\q_nil".
%
% This is a useful test for recursive loops which typically has 
% "\q_nil" as an end marker.
% \end{function}
%
%
%
% \subsection{Constants}
%
% \begin{variable}{\q_no_value} The canonical `missing value quark'
% that is returned by certain functions to denote that a requested value
% is not found in the data structure.
% \end{variable}
%
% \begin{variable}{\q_stop}
% This constant is used as a a marker in parameter text. This allows a
% scanning function to find the end of some input string.
% \end{variable}
%
% \begin{variable}{\q_nil}
% This constant represent the nil pointer in pointer structures.
% \end{variable}
%
% \StopEventually{}
%
% \section{Implementation}
%
%    We start by ensuring that the required packages are loaded.
%    We check for \texttt{l3expan} since this a basic package that is
%    essential for use of any higher-level package.
%    \begin{macrocode}
%<package>\RequirePackage{l3expan}\par
%<*initex|package>
%    \end{macrocode}
%
% \begin{macro}{\quark_new:N}
%    Allocate a new quark.
%    \begin{macrocode}
\def_new:Npn \quark_new:N #1{\tlp_new:Nn #1{#1}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\q_stop}
% \begin{macro}{\q_no_value}
% \begin{macro}{\q_nil}
%    |\q_stop| is often used as a marker in parameter text,
%    |\q_no_value| is the canonical missing value, and |\q_nil|
%    represents a nil pointer in some data structures.
%    \begin{macrocode}
\quark_new:N \q_stop
\quark_new:N \q_no_value
\quark_new:N \q_nil
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\q_error}
% \begin{macro}{\q_mark}
%    We need two additional quarks.  |\q_error| delimits the end of
%    the computation for purposes of error recovery.  |\q_mark| is
%    used in parameter text when we need a scanning boundary that is
%    distinct from |\q_stop|.
%    \begin{macrocode}
\quark_new:N\q_error
\quark_new:N\q_mark
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% \begin{macro}{\quark_if_no_value_p:N}
% \begin{macro}{\quark_if_no_value:NTF}
% \begin{macro}{\quark_if_no_value:NT}
% \begin{macro}{\quark_if_no_value:NF}
% \begin{macro}{\quark_if_no_value_p:n}
% \begin{macro}{\quark_if_no_value:nTF}
% \begin{macro}{\quark_if_no_value:nT}
% \begin{macro}{\quark_if_no_value:nF}
%    Here we test if we found a special quark as the first argument.
%    \begin{macrocode}
\def_long_test_function_new:npn {quark_if_no_value:N} #1 {
%    \end{macrocode}
%    We better start with |\q_no_value| as the first argument since
%    the whole thing may otherwise loop if |#1| is wrongly given
%    a string like |aabc| instead of a single token.\footnote{It may
%    still loop in special circumstances however!}
%    \begin{macrocode}
     \if_meaning:NN\q_no_value#1}
\def_long_new:Npn \quark_if_no_value_p:N #1{
  \if_meaning:NN \q_no_value #1 \c_true
  \else: \c_false \fi:
}
%    \end{macrocode}
% We also provide an |n| type. If run under pdf\eTeX, it uses a
% built-in primitive for string comparisons, otherwise it uses the
% slower |\str_if_eq_p:nn| function. In the latter case it would be
% faster to use a temporary token list pointer but it would render the
% function non-expandable. Using the pdf\eTeX\ primitive is the
% preferred approach since the other has one small disadvantage: If
% the argument starts with a blank space, it is gobbled but can't see
% how the argument could ever be precisely \verb*+ \q_no_value+
% without it being a serious error in the programming.
%    \begin{macrocode}
\cs_if_really_free:cTF{pdf_strcmp:D}{
  \def_long_new:Npn \quark_if_no_value_p:n #1{
    \if:w \exp_args:Noo
    \str_if_eq_p:nn {\tlist_to_str:n{#1}}{\token_to_string:N \q_no_value}
      \c_true
    \else:
      \c_false
    \fi:
  }
}
{
  \def_long_new:Npn \quark_if_no_value_p:n #1{
    \if_num:w 
    \pdf_strcmp:D {\exp_not:N \q_no_value}{\exp_not:n{#1}}=\c_zero 
    \c_true \else: \c_false \fi:
  }
}
\def_long_test_function_new:npn {quark_if_no_value:n} #1 {
  \if:w \quark_if_no_value_p:n{#1}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\quark_if_nil_p:N}
% \begin{macro}{\quark_if_nil:NTF}
% \begin{macro}{\quark_if_nil:NT}
% \begin{macro}{\quark_if_nil:NF}
%    A function to check for the presence of |\q_nil|.
%    \begin{macrocode}
\def_long_new:Npn \quark_if_nil_p:N #1{
  \if_meaning:NN \q_nil #1 \c_true
  \else: \c_false \fi:
}
\def_long_test_function_new:npn {quark_if_nil:N}#1{
  \if_meaning:NN\q_nil#1}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
%    Show token usage:
%    \begin{macrocode}
%</initex|package>
%<*showmemory>
\showMemUsage
%</showmemory>
%    \end{macrocode}
%
% \endinput
%
% $Log$
% Revision 1.18  2006/01/04 01:18:31  morten
% Changed \quark_if_no_value:nTF to be expandable. Added a few predicate
% functions and updated documentation.
%
% Revision 1.17  2005/12/27 10:04:41  morten
% Minor changes plus changed RCS information retrieval
%
% Revision 1.16  2005/10/27 14:12:28  morten
% Added gobble-until-quark functions.
%
% Revision 1.15  2005/07/14 18:50:31  morten
% Added \quark_if_nil:NF
%
% Revision 1.14  2005/04/06 13:55:57  morten
% Fixed \quark_if_nil:NTF
%
% Revision 1.13  2005/03/16 22:35:57  braams
% Added the tweaks necessary to be able to load with initex
%
% Revision 1.12  2005/03/11 21:41:27  braams
% Fixed the use of RCS information; added \StopEventually
%
