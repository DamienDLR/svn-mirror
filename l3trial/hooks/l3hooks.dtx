% \iffalse
% 
%% File l3hooks.dtx (C) Copyright 2011 LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the "l3kernel bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
%
%<*driver|package>
\RequirePackage{l3names}
\GetIdInfo$Id: l3hooks.dtx 2480 2011-06-20 17:25:23Z bruno $
  {L3 Experimental token parameter hooks}
%</driver|package>
%<*driver>
\documentclass[full]{l3doc}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{^^A
%   The \pkg{l3hooks} package\\ Token parameter hooks^^A
%   \thanks{This file describes v\ExplFileVersion,
%      last revised \ExplFileDate.}^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released \ExplFileDate}
%
% \maketitle
%
% \begin{documentation}
%
% \section{Hooks}
%
% \begin{function}{\everypar,\everymath,\everydisplay,
%                  \everyhbox,\everyvbox,\evercr}
% \begin{syntax}
%   \cs{everypar} \Arg{tokens}
% \end{syntax}
%   These commands are used to alter/replace the main hooks into these
%   elements. It is \emph{not recommended} that you use these since older
%   package authors may override any changes you make here.
% \end{function}
%
% \begin{table}
%   \centering
%   \begin{tabular}{@{}>{\sffamily}rl@{}}
%     \toprule
%     Hook name & Insertion point \\
%     \midrule
%     par       & Paragraph      \\
%     math      & Inline maths   \\
%     display   & Display maths  \\
%     hbox      & Horizontal box \\
%     vbox      & Vertical box   \\
%     cr        & Tabular item   \\
%     \bottomrule
%   \end{tabular}
%   \caption{Hooks.}
%   \label{tab:hooks}
% \end{table}
%
% \section{Functions}
%
% \begin{function}{\hook_pre_push:nn, \hook_post_push:nn}
%   \begin{syntax}
%     \cs{hook_pre_push:nn}  \Arg{hook name} \Arg{tokens}
%     \cs{hook_post_push:nn} \Arg{hook name} \Arg{tokens}
%   \end{syntax}
%   Adds \meta{tokens} either before or after the main \meta{hook} for an
%   element. You should not assume the order in which pushed material is
%   finally executed in the hook.
%
%   See Table~\ref{tab:hooks} for the hooks provided.
% \end{function}
%
% \begin{function}{\hook_pre_pop:n,\hook_post_pop:n}
%   \begin{syntax}
%     \cs{hook_pre_pop:n}  \Arg{hook}
%     \cs{hook_post_pop:n} \Arg{hook}
%   \end{syntax}
%   Removes the last \meta{tokens} added to a hook.
% \end{function}
%
% \begin{function}{\hook_pre_once:nn, \hook_post_once:nn}
%   \begin{syntax}
%     \cs{hook_pre_once:nn} \Arg{hook} \Arg{tokens}
%     \cs{hook_pre_once:nn} \Arg{hook} \Arg{tokens}
%   \end{syntax}
%   Adds \meta{tokens} to the hook to only the next occurrence of the element
%   (\emph{i.e.}~after executing the hook once, it automatically pops itself).
% \end{function}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{l3hooks} implementation}
%
%    \begin{macrocode}
%<*initex|package>
%    \end{macrocode}
%
%    \begin{macrocode}
%<*package>
\ProvidesExplPackage
  {\ExplFileName}{\ExplFileDate}{\ExplFileVersion}{\ExplFileDescription}
\package_check_loaded_expl:
%</package>
%    \end{macrocode}
%
%    \begin{macrocode}
\group_begin:
%    \end{macrocode}
%
% \begin{macro}[aux]{\hook_new:nN,\hook_new_aux:NNNN}
%   The hook-generator function. The primitive hook is already stored
%   by \pkg{l3names} in \cs{tex_every\meta{name}:D}, where \meta{name} is one
%   of the hook names in Table~\ref{tab:hooks}. In package mode, we keep
%   the interface \cs{every\meta{name>}}|={...}| by defining each of those
%   control sequences as toks registers.
%    \begin{macrocode}
  \cs_set_protected_nopar:Npn \hook_new:nN #1#2
    {
      \exp_args:Ncc \hook_new_aux:NNN
        { tex_every #1 :D }
        { g_hook_ #1 _seq }
        #2
    }
  \cs_set_protected_nopar:Npn \hook_new_aux:NNN #1#2#3
    {
      \seq_new:N #2
%<*package>
      \cs_undefine:N #3
      \newtoks #3
      \tex_global:D #3 #1
      \seq_gput_right:Nn #2 { \hook_item:n { \tex_the:D #3 } }
%</package>
      \tex_global:D #1 { \hook_use_gclear:N #2 }
    }
%    \end{macrocode}
% \end{macro}
%
% Don't bother with \cs{everyjob} or \cs{everyeof}.
%
% In format mode, the second argument is not used at all.
% The user-level \cs{every\meta{xyz}} functions are \emph{not}
% provided as hooks.
% In \LaTeXe{}, we want to replace the user-level \cs{every\meta{xyz}}
% functions. This provides backwards compatibility for existing code.
%    \begin{macrocode}
  \hook_new:nN { math }    \frozen@everymath
  \hook_new:nN { display } \frozen@everydisplay
  \hook_new:nN { par }     \everypar
  \hook_new:nN { hbox }    \everyhbox
  \hook_new:nN { vbox }    \everyvbox
  \hook_new:nN { cr }      \everycr
%    \end{macrocode}
%
% Clean-up: (the allocator functions are never to be used again)
%    \begin{macrocode}
\group_end:
%    \end{macrocode}
%
% \begin{macro}{\hook_use_gclear:N}
%   Slightly misnamed, this function places the contents of a hook
%   in the input stream and removes the items that are to be done
%   only once.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \hook_use_gclear:N #1
  {
    \group_begin:
    \cs_set:Npn \seq_item:n ##1 { \etex_unexpanded:D \use_none:n ##1 }
    \use:x
      {
        \group_end:
        \exp_not:n { \tl_gset:Nx #1 { \seq_use:N #1 } }
        #1
      }
  }
\cs_new:Npn \hook_item:n #1
  { \exp_not:n { \seq_item:n { \hook_item:n {#1} } } }
\cs_new_eq:NN \hook_item_once:n \use_none:n
%    \end{macrocode}
% \end{macro}
%
% \begin{variable}{\l_hook_tmp_tl}
%   Used for popping items.
%    \begin{macrocode}
\tl_new:N \l_hook_tmp_tl
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\hook_pre_push:nn, \hook_post_push:nn}
% \begin{macro}{\hook_pre_once:nn, \hook_post_once:nn}
% \begin{macro}[aux]{\hook_put_aux:NNnn}
%   These functions are used to add/remove material from a hook, in
%   addition to the main |\everyxyz| interface. Using push/pop is more
%   reliable since you never know when a dastardly package author overrides
%   anything you might do with |\everyxyz|.
%    \begin{macrocode}
\cs_new_protected:Npn \hook_pre_push:nn
  { \hook_put_aux:NNnn \seq_gput_left:cn \hook_item:n }
\cs_new_protected:Npn \hook_post_push:nn
  { \hook_put_aux:NNnn \seq_gput_right:cn \hook_item:n }
\cs_new_protected:Npn \hook_pre_once:nn
  { \hook_put_aux:NNnn \seq_gput_left:cn \hook_item_once:n }
\cs_new_protected:Npn \hook_post_once:nn
  { \hook_put_aux:NNnn \seq_gput_right:cn \hook_item_once:n }
\cs_new_protected:Npn \hook_put_aux:NNnn #1#2#3#4
  {
    \cs_if_exist:cTF { g_hook_ #3 _seq }
      { #1  { g_hook_ #3 _seq } { #2 {#4} } }
      { \msg_error:nnxx { hook } { unknown-hook } {#3} {#1} }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\hook_pre_pop:n, \hook_post_pop:n}
% \begin{macro}[aux]{\hook_pop_aux:Nn}
%    \begin{macrocode}
\cs_new_protected:Npn \hook_pre_pop:n
  { \hook_pop_aux:Nn \seq_gpop_left:cN }
\cs_new_protected:Npn \hook_post_pop:n
  { \hook_pop_aux:Nn \seq_gpop_right:cN }
\cs_new_protected:Npn \hook_pop_aux:Nn #1 #2
  {
    \cs_if_exist:cTF { g_hook_ #2 _seq }
      {
        \seq_if_empty:cTF { g_hook_ #2 _ seq }
          { \msg_error:nnx { hook } { empty-hook } {#2} }
          { #1  { g_hook_ #2 _seq } \l_hook_tmp_tl }
      }
      { \msg_error:nnxx { hook } { unknown-hook } {#2} {#1} }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% Finally the two error messages.
%    \begin{macrocode}
\cs_new:Npn \hook_error_aux:nnn #1 #2 #3
  {
    You~asked~to~#1~material~#2~the~hook~#3,~but~
    I~only~know~`par',~`math',~`display',~`hbox',~`vbox'~and~`cr'.
  }
\msg_new:nnnn { hook } { unknown-hook }
  { The~hook~#1~does~not~exist! }
  {
    \prg_case_str:nnn {#2}
      {
        { \seq_gpop_left:cN } { \hook_error_aux:nnn {remove} {from} }
        { \seq_gpop_right:cN } { \hook_error_aux:nnn {remove} {from} }
      }
      { \hook_error_aux:nnn {add} {to} }
    {#1}
  }
\msg_new:nnnn { hook } { empty-hook }
  { The~hook~#1~is~empty! }
  { \hook_error_aux:nnn {remove} {from} {#1} }
%    \end{macrocode}
%
%    \begin{macrocode}
%</initex|package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex