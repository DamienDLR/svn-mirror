%
% Copyright (C) 2009 LaTeX3 Project
% 

\documentclass{minimal}
\input{regression-test}

\RequirePackage{l3regex}

\begin{document}
\START
\AUTHOR{Bruno Le Floch}
\ExplSyntaxOn

\OMIT
\cs_new_protected:Npn \test:nn #1 #2
  {
    \regex_match:nnTF {#1} {#2} { \TRUE } { \FALSE }
    \cs_undefine:N \l_foo_seq
    \regex_extract_once:nnNTF {#1} {#2} \l_foo_seq
      { \seq_show:N \l_foo_seq } { \show \l_foo_seq }
  }
\cs_new_protected:Npn \test:Nn #1 #2
  {
    \regex_match:NnTF #1 {#2} { \TRUE } { \FALSE }
    \cs_undefine:N \l_foo_seq
    \regex_extract_once:NnNTF #1 {#2} \l_foo_seq
      { \seq_show:N \l_foo_seq } { \show \l_foo_seq }
  }
\TIMO

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\TEST{Misc}{
  \test:nn {(a)(b)*} {abb}
  \test:nn {(a)(b|c*)*} {abcccbcc}
  \test:nn {(a*b*)} {abab}
  \test:nn {a} {b}
  \test:nn {(a*)} {aaab}
  \test:nn { (La|Xe)T(e(X))(\ (It\ )?is\ nice!*)*  ! }
    { LaTeX~is~nice!~It~is~nice!!! }
  % \test:nn { (La|Xe)T(e(X))(\ (It\ )?is\ nice!*)*? ! }
  %   { LaTeX~is~nice!~It~is~nice!!! }
  \test:nn { (La|Xe)T(e(X))(\ (It\ )?is\ nice!*)* }
    { XeTeX~is~nice~is~nice!! }
  \test:nn { (a)b?c } { ac }
  \test:nn { a(b*)c } { abdabbc }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\OMIT
\tl_clear:N \l_tmpa_tl
\char_set_catcode_other:N \^^@
\prg_stepwise_inline:nnnn {0} {1} {127}
  {
    \char_set_lccode:nn {0} {#1}
    \tl_to_lowercase:n
      { \tl_put_right:Nx \l_tmpa_tl { ^^@ } }
  }
\tl_const:Nx \c_all_chars_str { \l_tmpa_tl }
\TIMO

\TEST{Simple~strings~n}{
  \test:nn { abcabcabX } { abcabcabcabXabc }
  \test:nn { } { }
  \test:nn { a } { }
  \test:nn { aa } { a }
  \test:nn { ab } { baba }
  \exp_args:Nno \test:nn
    {
      \^^@\^^A\^^B\^^C\^^D\^^E\^^F\^^G\^^H\^^I\^^J\^^K\^^L\^^M\^^N\^^O
      \^^P\^^Q\^^R\^^S\^^T\^^U\^^V\^^W\^^X\^^Y\^^Z\^^[\^^\\^^]\^^^\^^_
      \ \!\"\#\$\%\&\'\(\)\*\+\,\-\.\/
      0123456789\:\;\<\=\>\?
      \@ABCDEFGHIJKLMNO
      PQRSTUVWXYZ\[\\\]\^\_
      \`abcdefghijklmno
      pqrstuvwxyz\{\|\}\~\^^?
    }
    { \c_all_chars_str }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\TEST{Regex~set}{
  \regex_set:Nn \l_foo_tl { abc*!? }
  \test:Nn \l_foo_tl { }
  \test:Nn \l_foo_tl { aaa }
  \test:Nn \l_foo_tl { XabcX }
  \test:Nn \l_foo_tl { aababcccc!! }
  { \regex_gset:Nn \g_foo_tl { ab(c*)c? } }
  \test:Nn \g_foo_tl { }
  \test:Nn \g_foo_tl { ababccc? }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\TEST{Quantifiers~at~wrong~places}{
  \regex_set:Nn \l_foo_tl { * abc|?*c }
  \test:Nn \l_foo_tl { X * abc X }
  \test:Nn \l_foo_tl { X ??? c X }
}

% todo: test (a|b|)* or ((a|b|)*c?)*
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\TEST{Character~types}{
  \test:nn { (\.\\?.)+ } { . ^^@ . \^^ff . \ }
  \test:nn { (d\\?\d)+ } { d/ d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 d: }
  \test:nn { (h\\?\h)+ } { h\^^H h\^^I h~ h\  h\^^J }
  \test:nn { (s\\?\s)+ } { s\^^H s\^^K s\^^I s\^^J s\^^L s\^^M s\  s\^^a0 }
  \test:nn { (v\\?\v)+ } { v\^^I v\^^J v\^^K v\^^L v\^^M v\ }
  \test:nn { (w\\?\w)+ }
    { w/ w: w{ w} w@ w[ w] w^ w` w\  wa wb wc wd wy wz wA wB wZ w_ w0 w9 w? }
  \test:nn { (N\\?\N)+ } { Na Nb N* N\# N\^^ff N\^^00 N\^^J NN }
  \test:nn { (D\\?\D)+ } { D0 D9 D/ D: }
  \test:nn { (H\\\H\ ?)+ } { H\^^I H\  H\^^J H\a H\* H\^^M }
  \test:nn { (S\\?\S)+ }
    { S\^^I S\^^J S\^^L S\^^M S\  S\a S\# S\@ S\^^K S\^^@ }
  \test:nn { (V\\\V\ ?)+ } { V\^^J V\^^K V\^^L V\^^M V\^^I V\  V\a V\~ }
  \test:nn { (W\\?\W)+ }
    { Wa Wz WA WZ W_ W0 W9 W? W* W/ W: W{ W} W@ W[ W] W^ W` W? }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\char_set_catcode_other:N \^^@
\TEST{Special~characters}{
  \regex_set:Nn \l_foo_tl { \x{2a}?\x2B*\x{x}\x*(\x2ab)? }
  \test:Nn \l_foo_tl { **** + ^^@ {x} ^^@^^@ *b }
  \test:Nn \l_foo_tl { ^^@ ^^@ {x ^^@ {x} ^^@ } }
  \test:nn { \x{100} } { abc }
  \test:nn
    {
      \x{2a}\x{2b}\x{2c}\x{2d}\x{2e}\x{2f}
      \x{2A}\x{2B}\x{2C}\x{2D}\x{2E}\x{2F}
      \x 2a \x 2b \x 2c \x 2d \x 2e \x 2f 
      \x 2A \x 2B \x 2C \x 2D \x 2E \x 2F 
    }
    { *+,-./ *+,-./ *+,-./ *+,-./ }
  \test:nn { \\\a\ ?\\\e\ ?\\\f\ ?\\\n\ ?\\\r\ ?\\\t }
    { \^^G \^^[ \^^L \^^J \^^M \^^I \^^] }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\TEST{Character~classes}{
  \regex_set:Nn \l_foo_tl { \\[a-cw-y"-&\<-\?]*?? }
  \test:Nn \l_foo_tl { \\abcwxy"#$ $&<=>?? }
  \test:Nn \l_foo_tl { \`? \\d? \!? \'? \;? \@? \%? }
  \test:nn { [^\W \d _]+ } { ?@[]0349_abcAB_ }
  \test:nn { \\[^](\b] } { \^^H \]\(\^ }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\TEST{Nested~groups~with~quantifiers}{
  \test:nn { ((a)*|(b)?|(c)+|!)*?! } { aaabccbaab!a! }
  \test:nn { ((a*)|(b?)|(c+)|!)*! } { aaabccbaab!aa! }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\TEST{Quantifiers}{
  \regex_set:Nn \l_foo_tl { ((a?|b)*?(aabb)+|cd)+ }
  \test:Nn \l_foo_tl { aabcdabaabbabb }
  \test:Nn \l_foo_tl { aabcabbbabababbb }
  \test:Nn \l_foo_tl { aabbcdcdaabbaabb }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\TEST{Simple~assertions}{
  \test:nn { \b\w*\b.+?\b } { ...abc...def }
  \test:nn { \b\w*\B(.)\b* } { abc* }
  \regex_set:Nn \l_foo_tl { ( abc |^def | ghi $ | $ )+ }
  \test:Nn \l_foo_tl { def abc abc ghi }
  \test:Nn \l_foo_tl { def haldsj }
  \test:Nn \l_foo_tl { allikfj abc ghi a }
  \test:Nn \l_foo_tl { ~ def abc ghi ~ }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\TEST{Non-capturing~groups~and~alternatives}{
  \regex_set:Nn \l_foo_tl { ( (a)(?:bc|de)*f | (?:(?:(gh)|i|)+|?)* )+ j }
  \test:Nn \l_foo_tl { XabcdefghiighafjX }
  \test:Nn \l_foo_tl { abcbcfadefighjX }
  \test:nn { (?:) } { abc }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \item[{$n$\string}] Exactly $n$.
% \item[{$n,$\string}] $n$ or more, greedy.
% \item[{$n,$\string}?] $n$ or more, lazy.
% \item[{$n,m$\string}] At least $n$, no more than $m$, greedy.
% \item[{$n,m$\string}] At least $n$, no more than $m$, lazy.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\END
