% \iffalse
% 
%% File: l3galley.dtx Copyright (C) 1999-2001, 2004-2009 Frank Mittelbach
%%                              (C) 2010,2011 The LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the "l3trial bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
%
%<*driver|package>
\RequirePackage{expl3}
\GetIdInfo$Id$
  {L3 Experimental galley code}
%</driver|package>
%<*driver>
\documentclass[full]{l3doc}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
% 
% \title{^^A
%   The \textsf{l3galley} package\\ Galley code^^A
%   \thanks{This file describes v\ExplFileVersion,
%     last revised \ExplFileDate.}^^A
% }
%         
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released \ExplFileDate}
%
% \maketitle
%
% \begin{documentation}
% 
% In \LaTeX3 terminology a galley is a rectangular area which receives
% text and other material filling it from top. The vertically extend of 
% a galley is normally not restricted: instead certain chunks are taken 
% off the top of an already partially filled galley to form columns or 
% similar areas on a page. This process is typically asynchronous but 
% there are ways to control or change its behaviour.
% 
% Examples for galleys are \enquote{the main galley}, where the
% continuous document data gets formatted into  and from which columns
% and pages are constructed, and \enquote{vertical box galleys}, such
% as the body of a minipage environment. The latter galleys are 
% typically not split after formatting, though there can be exceptions.
% 
% The present module is mainly concerned with the formatting of text
% in galleys. The mechanism by which this is achieved uses four 
% (somewhat) distinct layers, which are described in the following section.
% The interfaces provided here are all at the code level: for interfaces
% at the template level (intended for multiple uses), see the module
% \pkg{xgalley}.
% 
% \section{Formatting layers}
% 
% \subsection{Layer one: external dimensions}
%
% The bottom layer of the system is the external dimensions of the
% galley. Normally only the horizontal dimension is fixed externally,
% while the vertical (filling) dimension is unspecified. The external
% dimensions are fixed when starting a new galley, and are therefore
% not modifiable within the galley. 
% 
% \subsection{Layer two: internal dimensions}
%
% The second layer is the internal dimensions of the galley: the
% \emph{measure} used for paragraph text and the position of the 
% paragraph relative to the edges of the galley.
% 
% \subsection{Layer three: paragraph shape}
%
% The third layer defines the paragraph shape within the measure as
% provided by the second layer. In the absence of any specification
% for that layer the paragraph shape used will be that of a
% rectangular area of the width of the current measure.
% 
% There are some restrictions imposed on the shape of a paragraph by the
% underlying \TeX{} mechanisms. For example, cut out sections in
% paragraphs can be specified from the top of the paragraph but not from
% the bottom. This detail is managed within the galley system.
% 
% \subsection{Layer four: formatting inside the paragraph}
%
% The forth layer deals with the paragraph formatting aspects such as 
% hyphenation and justification within the paragraph (this is sometimes
% referred to as \enquote{\texttt{h\&j}} or \enquote{\texttt{hj}}).
% 
% \section{Code level interfaces}
% 
% Using the galley requires some care, as the various interactions at a \TeX{}
% level have to be appropriately managed. The code level interfaces deal
% with \emph{some} of this detail, but it is imperative that the interfaces
% are used exactly as described here. There are important relationships
% between functions provided here, which must be respected.
% 
% \subsection{Layer one: external dimensions}
% 
% \begin{variable}{\l_galley_width_dim}
%   The total width of a galley, set either by the page geometry code
%   for the main vertical galley or when creating an independent galley,
%   such as a minipage. This value should not be altered within a galley
%   level, but instead should be established when a new level is
%   initiated.
% \end{variable}
% 
% \subsection{Layer two: internal dimensions}
% 
%  When setting the measure, the values of \cs{g_galley_total_left_margin_dim},
%  \cs{g_galley_total_right_margin_dim} and \cs{g_galley_text_width_dim} should
%  be set to be equal to \cs{l_galley_width_dim}. 
%  Any alteration of these values should be followed by
%  \cs{galley_setup_measure:}, which will apply the new values internally.
%
% \begin{variable}{\g_galley_total_left_margin_dim}
%   The total margin between the left side of the galley and the left side of
%   the text block. This may be negative if the measure is set to overlap
%   the text beyond the edge of the galley.
% \end{variable}
% 
% \begin{variable}{\g_galley_total_right_margin_dim}
%   The total margin between the right side of the galley and the right side
%   of the text block. This may be negative if the measure is set to overlap
%   the text beyond the edge of the galley.
% \end{variable}
%
% \begin{variable}{\g_galley_text_width_dim}
%   The width of a line of text within the galley, taking account of
%   any margins added. This may be larger than \cs{l_galley_width_dim}
%   if the margins are negative.
% \end{variable}
% 
% \begin{variable}{\g_galley_left_margin_dim}
%   The relative indent of the left edge of the current measure to that of the
%   \enquote{containing} measure.
%   This may be negative if the current measure is set to wider than the
%   \enquote{containing} measure.
% \end{variable}
% 
% \begin{variable}{\g_galley_right_margin_dim}
%   The relative indent of the right edge of the current measure to that of the
%   \enquote{containing} measure.
%   This may be negative if the current measure is set to wider than the
%   \enquote{containing} measure.
% \end{variable}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{l3galley} Implementation}
%
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%   
%    \begin{macrocode}
\ProvidesExplPackage
  {\ExplFileName}{\ExplFileDate}{\ExplFileVersion}{\ExplFileDescription}
%    \end{macrocode}
%
% \subsection{Galley data structures}
% 
% Galley data structures have a global and a local variant. To allow galley
% levels to work correctly, most \enquote{active} settings are global. The
% local versions are then used to move between different galley levels. 
% 
% \begin{variable}{\g_galley_begin_level_bool, \l_galley_begin_level_bool}
%   Indicates that the galley is at the very beginning of the level, and that
%   no material has yet been set. As a result, the global version is set
%   \texttt{true} to begin with.
%    \begin{macrocode}
\bool_new:N \g_galley_begin_level_bool
\bool_new:N \l_galley_begin_level_bool
\bool_gset_true:N \g_galley_begin_level_bool
%    \end{macrocode}
% \end{variable}
% 
% \begin{variable}
%   {\g_galley_collecting_vmode_bool, \l_galley_collecting_vmode_bool}
%   Indicates if the galley level is currently collecting vertical mode
%   material, or if standard typesetting is underway.
%    \begin{macrocode}
\bool_new:N \g_galley_collecting_vmode_bool
\bool_new:N \l_galley_collecting_vmode_bool
%    \end{macrocode}
% \end{variable}
% 
% \begin{variable}
%   {
%     \g_galley_left_margin_dim,  \l_galley_left_margin_dim,
%     \g_galley_right_margin_dim, \l_galley_right_margin_dim,
%   }
%   The \emph{relative} indent of the current measure from any other
%   surrounding value. As a result, this information is mainly used at the
%   template level, but is defined here so that there is a consistent approach
%   to margins.
%    \begin{macrocode}
\cs_new_eq:NN \g_galley_left_margin_dim \leftmargin
\dim_new:N \l_galley_left_margin_dim
\cs_new_eq:NN \g_galley_right_margin_dim \rightmargin
\dim_new:N \l_galley_right_margin_dim
%    \end{macrocode}
% \end{variable}
% 
% \begin{variable}{\g_galley_parshape_seq, \l_galley_parshape_seq}
%   To allow multiple paragraph shapes to be nested, a sequence is used
%   to hold those which are \enquote{suspended}.
%    \begin{macrocode}
\seq_new:N \g_galley_parshape_seq
\seq_new:N \l_galley_parshape_seq
%    \end{macrocode}
% \end{variable}
% 
% \begin{variable}{\g_galley_parshape_tl, \l_galley_parshape_tl}
%   Holds the value of the paragraph shape as required by \cs{tex_parshape:D}.
%   As a result of the way the galley works, this used at levels~2 and~3.
%    \begin{macrocode}
\tl_new:N \g_galley_parshape_tl
\tl_gset:Nn \g_galley_parshape_tl { 0 }
\tl_new:N \l_galley_parshape_tl
%    \end{macrocode}
% \end{variable}
% 
% \begin{variable}{\g_galley_text_width_dim, \l_galley_text_width_dim}
%   The width of the current measure: the \enquote{running} setting can be
%   inherited from \LaTeXe{}.
%    \begin{macrocode}
\cs_new_eq:NN \g_galley_text_width_dim \linewidth
\dim_new:N \l_galley_text_width_dim
%    \end{macrocode}
% \end{variable}
% 
% \begin{variable}
%   {
%     \g_galley_total_left_margin_dim,  \l_galley_total_left_margin_dim,
%     \g_galley_total_right_margin_dim, \l_galley_total_right_margin_dim,
%   }
%   Margins of the current text within the galley: these plus the galley
%   width are one way to define the measure width. See also the text width,
%   which is an alternative view (and should be in sync with this one!).
%    \begin{macrocode}
\cs_new_eq:NN \g_galley_total_left_margin_dim \@totalleftmargin
\dim_new:N \l_galley_total_left_margin_dim
\dim_new:N \g_galley_total_right_margin_dim
\dim_new:N \l_galley_total_right_margin_dim
%    \end{macrocode}
% \end{variable}
% 
% \subsection{Variables}
% 
% As well as the galley data structures, there are also variables which
% do not have the global--local structure. This includes variables which
% are \enquote{disposable} along with those which are on the \enquote{outside}
% of the galley.
% 
% \begin{variable}{\g_galley_last_box}
%   A temporary box to hold the box inserted by \TeX{} when a paragraph
%   is inserted with an indent. The galley actually inserts the space
%   (\emph{i.e.}~\cs{tex_parindent:D} is globally zero), but there is
%   still an empty box to test for.
%    \begin{macrocode}
\box_new:N \g_galley_last_box
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\l_galley_width_dim}
%   The external size of a galley is the stored in the \TeX{} primitive
%   \cs{tex_hsize:D}, which is renamed. This will only ever be reset by
%   the code constructing a new galley, for example the start of a
%   minipage. This value will be set for the main galley by the page 
%   layout system.
%    \begin{macrocode}
\cs_new_eq:NN \l_galley_width_dim \tex_hsize:D
%    \end{macrocode}
% \end{variable}
%
% \subsection{Vertical mode collector}
%
% Once the \cs{tex_par:D} primitive gets inserted, reversing the effect
% becomes difficult. The approach taken for the galley is therefore to
% collect up vertical-mode material which occurs \emph{after} a paragraph
% (when the \cs{par} token is seen), and hold it until the next paragraph
% starts (and \cs{tex_everypar:D} is triggered). This requires that
% vertical mode material is boxed up appropriately.
% 
% \begin{variable}{\l_galley_collect_vmode_box}
%   This box is used to actually collect vertical mode material between
%   paragraphs.
%    \begin{macrocode}
\box_new:N \l_galley_collect_vmode_box
%    \end{macrocode}
% \end{variable}
% 
% \begin{macro}
%   {\galley_collect_vmode_begin:}
% \begin{macro}[aux]{\galley_collect_vmode_end:}
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_collect_vmode_begin:
  {
    \bool_gset_true:N \g_galley_collecting_vmode_bool
    \vbox_set_inline_begin:N \l_galley_collect_vmode_box 
      \group_insert_after:N \galley_collect_vmode_tidy:
  }
\cs_new_protected_nopar:Npn \galley_collect_vmode_end:
  {
    \bool_gset_false:N \g_galley_collecting_vmode_bool
    \vbox_set_inline_end:
    \tex_par:D
    \vbox_unpack:N \l_galley_collect_vmode_box
  }
%    \end{macrocode}
%   Mixing boxes can result in the wrong box being closed. This clean up
%   function will add in the additional brace that is needed in these cases,
%   as well as sorting out the flag correctly.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_collect_vmode_tidy:
  {
    \bool_if:NT \g_galley_collecting_vmode_bool
      {
        \bool_gset_false:N \g_galley_collecting_vmode_bool
        \vbox_set_inline_end:
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Independent galley levels}
%
% As well as the main vertical list, independent galleys are required
% for items such as minipages and marginal notes. Each of these galleys
% requires an independent set of global data structures. This is
% achieved by storing the data structures in \emph{local} variables. The
% later are only used to save and restore the global value, and so \TeX{}
% grouping will manage the values correctly. This implies that each
% galley level must form a group: galley levels are tided to vertical
% boxes and so this is a reasonable requirements.
% 
% \begin{macro}{\galley_initialise_variables:}
%   At the start of a galley level, both the global and local variables
%   will need to be reset to standard values. For example, the measure 
%   is set to the galley width and any paragraph shape is cleared.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_initialise_variables:
  {
    \bool_gset_true:N \g_galley_begin_level_bool
    \bool_gset_false:N \g_galley_collecting_vmode_bool
    \dim_gzero:N \l_galley_left_margin_dim
    \dim_gzero:N \l_galley_right_margin_dim
    \dim_gset_eq:NN \g_galley_text_width_dim \l_galley_width_dim
    \dim_gzero:N \g_galley_total_left_margin_dim
    \dim_gzero:N \g_galley_total_right_margin_dim
    \seq_gclear:N \g_galley_parshape_seq
    \tl_gset:Nn \g_galley_parshape_tl { 0 }
  }
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\galley_save_parameters:, \galley_restore_parameters:}
%   Saving and restoring parameters is carried out by a series of copy
%   functions. 
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_save_parameters:
  {
    \bool_set_eq:NN \l_galley_begin_level_bool
      \g_galley_begin_level_bool
    \bool_set_eq:NN \l_galley_collecting_vmode_bool
      \g_galley_collecting_vmode_bool
    \dim_set_eq:NN \l_galley_left_margin_dim
      \g_galley_left_margin_dim
    \dim_set_eq:NN \l_galley_right_margin_dim
      \g_galley_right_margin_dim
    \seq_set_eq:NN \l_galley_parshape_seq
      \g_galley_parshape_seq
    \tl_set_eq:NN \l_galley_parshape_tl
      \g_galley_parshape_tl
    \dim_set_eq:NN \l_galley_text_width_dim
      \g_galley_text_width_dim
    \dim_set_eq:NN \l_galley_total_left_margin_dim
      \g_galley_left_margin_dim
    \dim_set_eq:NN \l_galley_total_right_margin_dim
      \g_galley_right_margin_dim
  }
\cs_new_protected_nopar:Npn \galley_restore_parameters:
  {
    \bool_gset_eq:NN \g_galley_begin_level_bool
      \l_galley_begin_level_bool
    \bool_gset_eq:NN \g_galley_collecting_vmode_bool
      \l_galley_collecting_vmode_bool
    \dim_gset_eq:NN \g_galley_left_margin_dim
      \l_galley_left_margin_dim
    \dim_gset_eq:NN \g_galley_right_margin_dim
      \l_galley_right_margin_dim
    \seq_gset_eq:NN \g_galley_parshape_seq
      \l_galley_parshape_seq
    \tl_gset_eq:NN \g_galley_parshape_tl
      \l_galley_parshape_tl
    \dim_gset_eq:NN \g_galley_text_width_dim
      \l_galley_text_width_dim
    \dim_gset_eq:NN \g_galley_total_left_margin_dim
      \l_galley_left_margin_dim
    \dim_gset_eq:NN \g_galley_total_right_margin_dim
      \l_galley_right_margin_dim
  }
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\galley_level:}
% \begin{macro}[aux]{\galley_level_end:}
%   Galley levels are created by saving all of the current global
%   settings, starting a group then initialising both the local and global
%   variables.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_level:
  {
    \galley_save_parameters:
    \group_begin:
      \galley_initialise_variables:
      \group_insert_after:N \galley_level_end:
  }
%    \end{macrocode}
%   At the end of the level, the global values are restored using the
%   saved \emph{local} versions, hence the position of the close-of-group
%   instruction. As this code can be inserted automatically, at the point
%   of use only the start of a galley level needs to be marked up: the end 
%   must come in a fixed location. All of this relies on the the
%   \enquote{colour safe} group used inside a box.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_level_end:
  {
      \par
      \galley_restore_parameters:
    \group_end:
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% 
% The end of the main vertical list is the end of a galley level, but it's
% not the same as the others, and so is handled directly.
%    \begin{macrocode}
\AtEndDocument
  {
    \bool_if:NT \g_galley_collecting_vmode_bool
     { \galley_collect_vmode_end: }
    \cs_set_eq:NN \par \tex_par:D
    \tex_par:D
  }
%    \end{macrocode}
%
% \subsection{The \cs{par} token}
%
% \begin{macro}{\galley_std_par:}
%   The standard meaning of the \cs{par} token will be this function. At the
%   start of a galley level, nothing at all should happen. Assuming that the
%   level is underway, if vertical mode material was being collected, then
%   the \cs{tex_par:D} primitive can be inserted in order to typeset the
%   previous horizontal mode material: the vertical mode material will be
%   handled by \cs{tex_everypar:D}. On the other hand, if \TeX{} was in
%   horizontal mode then collection of vertical mode material can begin.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_std_par:
  {
    \bool_if:NF \g_galley_begin_level_bool
      {
        \bool_if:NTF \g_galley_collecting_vmode_bool
          {
            \tex_par:D
            \galley_restore_parshape:
          }
          {
            \pref_global:D \tex_setbox:D \g_galley_last_box \l_last_box
            \galley_collect_vmode_begin:
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\par}
%   The meaning of the token \cs{par} itself starts off as a standard
%   paragraph.
%    \begin{macrocode}
\cs_set_protected_nopar:Npn \par { \galley_std_par: } 
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\@par}
%   \LaTeXe{} requires a \enquote{long term} version of \cs{par}, which is
%   stored as \cs{@par}. Things are done a bit differently by \LaTeX3 and
%   so this will only be needed in package mode.
%    \begin{macrocode}
\tl_set:Nn \@par { \galley_std_par: } 
%    \end{macrocode}
% \end{macro}
%
% \subsection{Insertions using \cs{tex_everypar:D}}
%
% \begin{macro}{\everypar}
%   When used on top of \LaTeXe{} the original primitive name needs to be
%   available without the risk of completely overwriting the new
%   mechanism. This is implemented as a token register in case low-level
%   \TeX{} is used. The \TeX{} primitive is set here as otherwise the 
%   \LaTeXe{} \cs{@nodocument} is never removed from the register.
%   This precaution will not be needed for a stand-alone format.
%    \begin{macrocode}
\cs_undefine:N \everypar
\newtoks \everypar
\AtBeginDocument
  {
    \tex_everypar:D
      {
        \bool_gset_false:N \g_galley_begin_level_bool
        \bool_if:NT \g_galley_collecting_vmode_bool
          { \galley_collect_vmode_end: }
        \tex_the:D \everypar 
      }
  }
%    \end{macrocode}
% \end{macro}
% 
% \subsection{Paragraph shape}
%
% \begin{macro}{\galley_setup_measure:}
%   Whenever adjusting a \texttt{measure} template, the paragraph
%   shape token list is reset to reflect the new values for the margin
%   dimensions. Any measure adjustment requires a paragraph shape as this
%   is what is used to move the text relative to the edges of the galley.
%   This is done using paragraph shape, even though it is a concept at level~2
%   in the galley.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_setup_measure:
  {
    \seq_gpush:NV \g_galley_parshape_seq \g_galley_parshape_tl
    \cs_gset_eq:NN \galley_restore_parshape: \galley_restore_parshape_running:
    \tl_gset:Nx \g_galley_parshape_tl
      {
        1 ~
        \dim_use:N \g_galley_total_left_margin_dim
        \c_space_tl
        \dim_use:N \g_galley_text_width_dim 
      }  
    \tex_parshape:D \g_galley_parshape_tl \scan_stop: 
  }
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\galley_set_parshape:nnnN, \galley_set_parshape:nooN}
% \begin{macro}[aux]{\galley_set_parshape_map:nn}
% \begin{macro}[aux]{\galley_set_parshape_map_aux:nw}
%   A totally generic approach to setting the paragraph shape is provided here.
%   This takes four arguments: the number of unaltered lines, two comma lists
%   for indents at the two sides, and a flag to continue the special shape for
%   the remaining lines in the paragraph.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_set_parshape:nnnN #1#2#3#4
  {
    \seq_gpush:NV \g_galley_parshape_seq \g_galley_parshape_tl
    \cs_gset_eq:NN \galley_restore_parshape: \galley_restore_parshape_running:
    \tl_set:Nx \g_galley_parshape_tl
      {
        \int_eval:n
          { 
            #1 +
            \int_min:nn { \clist_length:n {#2} } { \clist_length:n {#3} }
            \bool_if:NT #4 { + 1 }
          }
        \c_space_tl
        \prg_replicate:nn {#1} 
          {
            \dim_use:N \g_galley_total_left_margin_dim
            \c_space_tl
            \dim_use:N \g_galley_text_width_dim
            \c_space_tl
          }
        \galley_set_parshape_map:nn {#2} {#3}
        \bool_if:NT #4
          {
            \c_space_tl
            \dim_use:N \g_galley_total_left_margin_dim
            \c_space_tl
            \dim_use:N \g_galley_text_width_dim
          }       
      }
    \tex_parshape:D \g_galley_parshape_tl \scan_stop:
  }
\cs_generate_variant:Nn \galley_set_parshape:nnnN { noo }
%    \end{macrocode}
%   A mapping over two comma lists: whichever is shorter terminates the
%   mapping.
%    \begin{macrocode}
\cs_new_nopar:Npn \galley_set_parshape_map:nn #1#2
  { \galley_set_parshape_map_aux:nw { } #1 , \q_mark #2 , \q_stop }
\cs_new_nopar:Npn \galley_set_parshape_map_aux:nw
  #1#2 , #3 \q_mark #4 , #5 \q_stop
  {
    \bool_if:nTF { \tl_if_empty_p:n {#3} || \tl_if_empty_p:n {#4} }
      {
        #1
        \dim_eval:n { \g_galley_total_left_margin_dim + ( #2 ) }
        \c_space_tl
        \dim_eval:n { \g_galley_text_width_dim - ( ( #2 ) + ( #4 ) ) }
      }
      {
        \galley_set_parshape_map_aux:nw
          { 
            #1 
            \dim_eval:n { \g_galley_total_left_margin_dim + ( #2 ) }
            \c_space_tl
            \dim_eval:n { \g_galley_text_width_dim - ( ( #2 ) + ( #4 ) ) }
            \c_space_tl
          } 
            #3 \q_mark #5 \q_stop
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% 
% \begin{macro}{\galley_restore_parshape:}
% \begin{macro}[aux]{\galley_restore_parshape_running:}
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \galley_restore_parshape:
  { \tex_parshape:D \g_galley_parshape_tl \scan_stop: }
\cs_new_protected_nopar:Npn \galley_restore_parshape_runnning: 
  {
    \seq_gpop:NnTF \g_galley_parshape_seq \l_galley_tmp_tl
      { \tl_gset_eq:NN \g_galley_parshape_tl \l_galley_tmp_tl }
      { \cs_gset_protected_nopar:Npn \galley_restore_parshape: { } }
    \tex_parshape:D \g_galley_parshape_tl \scan_stop:
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
